
CO3009_MCU_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003350  08003350  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003350  08003350  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003350  08003350  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000018  08003370  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003370  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009921  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa5  00000000  00000000  00029962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aff  00000000  00000000  0002c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6cb  00000000  00000000  000432ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008260a  00000000  00000000  0004e9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000299c  00000000  00000000  000d1018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003318 	.word	0x08003318

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003318 	.word	0x08003318

0800014c <readKeyInput>:
static uint8_t flagForLongPress3s[NUM_OF_BUTTONS];
static uint16_t counterLongPress3s[NUM_OF_BUTTONS];

int button_flag[NUM_OF_BUTTONS];

void readKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e09b      	b.n	8000290 <readKeyInput+0x144>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000158:	4a52      	ldr	r2, [pc, #328]	; (80002a4 <readKeyInput+0x158>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a51      	ldr	r2, [pc, #324]	; (80002a8 <readKeyInput+0x15c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800016a:	4a50      	ldr	r2, [pc, #320]	; (80002ac <readKeyInput+0x160>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a4c      	ldr	r2, [pc, #304]	; (80002a4 <readKeyInput+0x158>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]

		if(i == BTN_SELECT_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin);
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10b      	bne.n	800019a <readKeyInput+0x4e>
 8000182:	2101      	movs	r1, #1
 8000184:	484a      	ldr	r0, [pc, #296]	; (80002b0 <readKeyInput+0x164>)
 8000186:	f002 f887 	bl	8002298 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	4619      	mov	r1, r3
 800018e:	4a47      	ldr	r2, [pc, #284]	; (80002ac <readKeyInput+0x160>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	701a      	strb	r2, [r3, #0]
 8000198:	e01c      	b.n	80001d4 <readKeyInput+0x88>
		else if(i == BTN_MODIFY_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_MODIFY_GPIO_Port, BTN_MODIFY_Pin);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10b      	bne.n	80001b8 <readKeyInput+0x6c>
 80001a0:	2102      	movs	r1, #2
 80001a2:	4843      	ldr	r0, [pc, #268]	; (80002b0 <readKeyInput+0x164>)
 80001a4:	f002 f878 	bl	8002298 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4619      	mov	r1, r3
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <readKeyInput+0x160>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	460a      	mov	r2, r1
 80001b4:	701a      	strb	r2, [r3, #0]
 80001b6:	e00d      	b.n	80001d4 <readKeyInput+0x88>
		else if(i == BTN_SET_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_SET_GPIO_Port, BTN_SET_Pin);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d10a      	bne.n	80001d4 <readKeyInput+0x88>
 80001be:	2104      	movs	r1, #4
 80001c0:	483b      	ldr	r0, [pc, #236]	; (80002b0 <readKeyInput+0x164>)
 80001c2:	f002 f869 	bl	8002298 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a38      	ldr	r2, [pc, #224]	; (80002ac <readKeyInput+0x160>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	460a      	mov	r2, r1
 80001d2:	701a      	strb	r2, [r3, #0]


		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 80001d4:	4a35      	ldr	r2, [pc, #212]	; (80002ac <readKeyInput+0x160>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	781a      	ldrb	r2, [r3, #0]
 80001dc:	4931      	ldr	r1, [pc, #196]	; (80002a4 <readKeyInput+0x158>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	440b      	add	r3, r1
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d123      	bne.n	8000230 <readKeyInput+0xe4>
 80001e8:	4a30      	ldr	r2, [pc, #192]	; (80002ac <readKeyInput+0x160>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	781a      	ldrb	r2, [r3, #0]
 80001f0:	492d      	ldr	r1, [pc, #180]	; (80002a8 <readKeyInput+0x15c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	440b      	add	r3, r1
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d119      	bne.n	8000230 <readKeyInput+0xe4>
			if (buttonBuffer[i] == BTN_RELEASED && debounceButtonBuffer1[i] == BTN_PRESSED) {
 80001fc:	4a2d      	ldr	r2, [pc, #180]	; (80002b4 <readKeyInput+0x168>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4413      	add	r3, r2
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d10a      	bne.n	800021e <readKeyInput+0xd2>
 8000208:	4a28      	ldr	r2, [pc, #160]	; (80002ac <readKeyInput+0x160>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d104      	bne.n	800021e <readKeyInput+0xd2>
				button_flag[i] = 1;
 8000214:	4a28      	ldr	r2, [pc, #160]	; (80002b8 <readKeyInput+0x16c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2101      	movs	r1, #1
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800021e:	4a23      	ldr	r2, [pc, #140]	; (80002ac <readKeyInput+0x160>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4413      	add	r3, r2
 8000224:	7819      	ldrb	r1, [r3, #0]
 8000226:	4a23      	ldr	r2, [pc, #140]	; (80002b4 <readKeyInput+0x168>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	460a      	mov	r2, r1
 800022e:	701a      	strb	r2, [r3, #0]
		}

		// LONGPRESSED 3S
		if (buttonBuffer[i] == BTN_PRESSED) {
 8000230:	4a20      	ldr	r2, [pc, #128]	; (80002b4 <readKeyInput+0x168>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d117      	bne.n	800026c <readKeyInput+0x120>
			if (counterLongPress3s[i] < PRESSED_DURATION_3S/TIMER_CYCLE) {
 800023c:	4a1f      	ldr	r2, [pc, #124]	; (80002bc <readKeyInput+0x170>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000244:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000248:	d20a      	bcs.n	8000260 <readKeyInput+0x114>
				counterLongPress3s[i]++;
 800024a:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <readKeyInput+0x170>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000252:	3301      	adds	r3, #1
 8000254:	b299      	uxth	r1, r3
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <readKeyInput+0x170>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800025e:	e014      	b.n	800028a <readKeyInput+0x13e>
			} else {
				flagForLongPress3s[i] = 1;
 8000260:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <readKeyInput+0x174>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	2201      	movs	r2, #1
 8000268:	701a      	strb	r2, [r3, #0]
 800026a:	e00e      	b.n	800028a <readKeyInput+0x13e>
			}
		} else {
			button_flag[i] = 0;
 800026c:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <readKeyInput+0x16c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2100      	movs	r1, #0
 8000272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 8000276:	4a11      	ldr	r2, [pc, #68]	; (80002bc <readKeyInput+0x170>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2100      	movs	r1, #0
 800027c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 8000280:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <readKeyInput+0x174>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4413      	add	r3, r2
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	f77f af60 	ble.w	8000158 <readKeyInput+0xc>
		}
	}
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	2000003c 	.word	0x2000003c
 80002a8:	20000040 	.word	0x20000040
 80002ac:	20000038 	.word	0x20000038
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000034 	.word	0x20000034
 80002b8:	200000d8 	.word	0x200000d8
 80002bc:	20000048 	.word	0x20000048
 80002c0:	20000044 	.word	0x20000044

080002c4 <isPressedAndReleased>:
int isPressedAndReleased(int buttonIndex) {
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if (button_flag[buttonIndex] == 1) {
 80002cc:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <isPressedAndReleased+0x30>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d106      	bne.n	80002e6 <isPressedAndReleased+0x22>
		button_flag[buttonIndex] = 0;
 80002d8:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <isPressedAndReleased+0x30>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2100      	movs	r1, #0
 80002de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	e000      	b.n	80002e8 <isPressedAndReleased+0x24>
	}
	return 0;
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200000d8 	.word	0x200000d8

080002f8 <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0;
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	2b02      	cmp	r3, #2
 8000306:	d901      	bls.n	800030c <is_button_pressed+0x14>
 8000308:	2300      	movs	r3, #0
 800030a:	e007      	b.n	800031c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BTN_PRESSED);
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4a06      	ldr	r2, [pc, #24]	; (8000328 <is_button_pressed+0x30>)
 8000310:	5cd3      	ldrb	r3, [r2, r3]
 8000312:	2b00      	cmp	r3, #0
 8000314:	bf0c      	ite	eq
 8000316:	2301      	moveq	r3, #1
 8000318:	2300      	movne	r3, #0
 800031a:	b2db      	uxtb	r3, r3
}
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000034 	.word	0x20000034

0800032c <is_button_pressed_3s>:
unsigned char is_button_pressed_3s(unsigned char index) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0xff ;
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d901      	bls.n	8000340 <is_button_pressed_3s+0x14>
 800033c:	23ff      	movs	r3, #255	; 0xff
 800033e:	e007      	b.n	8000350 <is_button_pressed_3s+0x24>
	return (flagForLongPress3s[index] == 1) ;
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <is_button_pressed_3s+0x30>)
 8000344:	5cd3      	ldrb	r3, [r2, r3]
 8000346:	2b01      	cmp	r3, #1
 8000348:	bf0c      	ite	eq
 800034a:	2301      	moveq	r3, #1
 800034c:	2300      	movne	r3, #0
 800034e:	b2db      	uxtb	r3, r3
}
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	20000044 	.word	0x20000044

08000360 <trafficLight_automatic>:
#include "global.h"
#include "software_timer.h"
#include "led_segment_control.h"
#include "button.h"

void trafficLight_automatic(){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	switch(state){
 8000364:	4b88      	ldr	r3, [pc, #544]	; (8000588 <trafficLight_automatic+0x228>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b04      	cmp	r3, #4
 800036a:	f200 81fa 	bhi.w	8000762 <trafficLight_automatic+0x402>
 800036e:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <trafficLight_automatic+0x14>)
 8000370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000374:	08000389 	.word	0x08000389
 8000378:	080003df 	.word	0x080003df
 800037c:	080004a9 	.word	0x080004a9
 8000380:	080005bd 	.word	0x080005bd
 8000384:	08000687 	.word	0x08000687
	case IDLE:
		state = AUTO_RED1_GREEN2;
 8000388:	4b7f      	ldr	r3, [pc, #508]	; (8000588 <trafficLight_automatic+0x228>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
		clearTrafficDisplay();
 800038e:	f000 ff53 	bl	8001238 <clearTrafficDisplay>
		segment1Counter = counter_red / DIVISION_NUMBER;
 8000392:	4b7e      	ldr	r3, [pc, #504]	; (800058c <trafficLight_automatic+0x22c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a7e      	ldr	r2, [pc, #504]	; (8000590 <trafficLight_automatic+0x230>)
 8000398:	fb82 1203 	smull	r1, r2, r2, r3
 800039c:	1192      	asrs	r2, r2, #6
 800039e:	17db      	asrs	r3, r3, #31
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	4a7c      	ldr	r2, [pc, #496]	; (8000594 <trafficLight_automatic+0x234>)
 80003a4:	6013      	str	r3, [r2, #0]
		segment2Counter	= counter_green / DIVISION_NUMBER;
 80003a6:	4b7c      	ldr	r3, [pc, #496]	; (8000598 <trafficLight_automatic+0x238>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a79      	ldr	r2, [pc, #484]	; (8000590 <trafficLight_automatic+0x230>)
 80003ac:	fb82 1203 	smull	r1, r2, r2, r3
 80003b0:	1192      	asrs	r2, r2, #6
 80003b2:	17db      	asrs	r3, r3, #31
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	4a79      	ldr	r2, [pc, #484]	; (800059c <trafficLight_automatic+0x23c>)
 80003b8:	6013      	str	r3, [r2, #0]
		setTimerTraffic1(counter_green);
 80003ba:	4b77      	ldr	r3, [pc, #476]	; (8000598 <trafficLight_automatic+0x238>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fa7e 	bl	80018c0 <setTimerTraffic1>
		setTimerCounter1(DURATION_1S);
 80003c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c8:	f001 faea 	bl	80019a0 <setTimerCounter1>
		setTimerScanFreq(DURATION_FOR_5HZ);
 80003cc:	20c8      	movs	r0, #200	; 0xc8
 80003ce:	f001 fb03 	bl	80019d8 <setTimerScanFreq>
		update7SegBufferAuto();
 80003d2:	f000 ffdb 	bl	800138c <update7SegBufferAuto>
		timeCounter = 0;
 80003d6:	4b72      	ldr	r3, [pc, #456]	; (80005a0 <trafficLight_automatic+0x240>)
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
		break;
 80003dc:	e1ca      	b.n	8000774 <trafficLight_automatic+0x414>
	case AUTO_RED1_GREEN2:
		display7SegAuto(segmentIndexAuto);
 80003de:	4b71      	ldr	r3, [pc, #452]	; (80005a4 <trafficLight_automatic+0x244>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 f850 	bl	8001488 <display7SegAuto>
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 80003e8:	2103      	movs	r1, #3
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 ff48 	bl	8001280 <displayTrafficLight>
		if(scanFreqTimer_flag == 1){
 80003f0:	4b6d      	ldr	r3, [pc, #436]	; (80005a8 <trafficLight_automatic+0x248>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d110      	bne.n	800041a <trafficLight_automatic+0xba>
			update7SegBufferAuto();
 80003f8:	f000 ffc8 	bl	800138c <update7SegBufferAuto>
			segmentIndexAuto++;
 80003fc:	4b69      	ldr	r3, [pc, #420]	; (80005a4 <trafficLight_automatic+0x244>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a68      	ldr	r2, [pc, #416]	; (80005a4 <trafficLight_automatic+0x244>)
 8000404:	6013      	str	r3, [r2, #0]
			if(segmentIndexAuto >= SEGMENT_IN_A_ROW) segmentIndexAuto = 0;
 8000406:	4b67      	ldr	r3, [pc, #412]	; (80005a4 <trafficLight_automatic+0x244>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	dd02      	ble.n	8000414 <trafficLight_automatic+0xb4>
 800040e:	4b65      	ldr	r3, [pc, #404]	; (80005a4 <trafficLight_automatic+0x244>)
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000414:	20c8      	movs	r0, #200	; 0xc8
 8000416:	f001 fadf 	bl	80019d8 <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff ff52 	bl	80002c4 <isPressedAndReleased>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d019      	beq.n	800045a <trafficLight_automatic+0xfa>
			state = SELECT_MODE_RED;
 8000426:	4b58      	ldr	r3, [pc, #352]	; (8000588 <trafficLight_automatic+0x228>)
 8000428:	2205      	movs	r2, #5
 800042a:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 800042c:	4b5f      	ldr	r3, [pc, #380]	; (80005ac <trafficLight_automatic+0x24c>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000432:	20fa      	movs	r0, #250	; 0xfa
 8000434:	f001 fa98 	bl	8001968 <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000438:	20c8      	movs	r0, #200	; 0xc8
 800043a:	f001 facd 	bl	80019d8 <setTimerScanFreq>
			clearTrafficDisplay();
 800043e:	f000 fefb 	bl	8001238 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000442:	4b52      	ldr	r3, [pc, #328]	; (800058c <trafficLight_automatic+0x22c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a52      	ldr	r2, [pc, #328]	; (8000590 <trafficLight_automatic+0x230>)
 8000448:	fb82 1203 	smull	r1, r2, r2, r3
 800044c:	1192      	asrs	r2, r2, #6
 800044e:	17db      	asrs	r3, r3, #31
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	4a57      	ldr	r2, [pc, #348]	; (80005b0 <trafficLight_automatic+0x250>)
 8000454:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000456:	f000 ffcd 	bl	80013f4 <update7SegBufferManual>
		}
		if(countDownTimer1_counter == 1){
 800045a:	4b56      	ldr	r3, [pc, #344]	; (80005b4 <trafficLight_automatic+0x254>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	f040 8181 	bne.w	8000766 <trafficLight_automatic+0x406>
			segment1Counter --;
 8000464:	4b4b      	ldr	r3, [pc, #300]	; (8000594 <trafficLight_automatic+0x234>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3b01      	subs	r3, #1
 800046a:	4a4a      	ldr	r2, [pc, #296]	; (8000594 <trafficLight_automatic+0x234>)
 800046c:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 800046e:	4b4b      	ldr	r3, [pc, #300]	; (800059c <trafficLight_automatic+0x23c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	3b01      	subs	r3, #1
 8000474:	4a49      	ldr	r2, [pc, #292]	; (800059c <trafficLight_automatic+0x23c>)
 8000476:	6013      	str	r3, [r2, #0]
			if(segment2Counter  == 0) {
 8000478:	4b48      	ldr	r3, [pc, #288]	; (800059c <trafficLight_automatic+0x23c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d10c      	bne.n	800049a <trafficLight_automatic+0x13a>
				segment2Counter = counter_yellow / DIVISION_NUMBER;
 8000480:	4b4d      	ldr	r3, [pc, #308]	; (80005b8 <trafficLight_automatic+0x258>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a42      	ldr	r2, [pc, #264]	; (8000590 <trafficLight_automatic+0x230>)
 8000486:	fb82 1203 	smull	r1, r2, r2, r3
 800048a:	1192      	asrs	r2, r2, #6
 800048c:	17db      	asrs	r3, r3, #31
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	4a42      	ldr	r2, [pc, #264]	; (800059c <trafficLight_automatic+0x23c>)
 8000492:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_YELLOW2;
 8000494:	4b3c      	ldr	r3, [pc, #240]	; (8000588 <trafficLight_automatic+0x228>)
 8000496:	2202      	movs	r2, #2
 8000498:	701a      	strb	r2, [r3, #0]
			}
			update7SegBufferAuto();
 800049a:	f000 ff77 	bl	800138c <update7SegBufferAuto>
			setTimerCounter1(DURATION_1S);
 800049e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a2:	f001 fa7d 	bl	80019a0 <setTimerCounter1>
		}
		break;
 80004a6:	e15e      	b.n	8000766 <trafficLight_automatic+0x406>
	case AUTO_RED1_YELLOW2:
		display7SegAuto(segmentIndexAuto);
 80004a8:	4b3e      	ldr	r3, [pc, #248]	; (80005a4 <trafficLight_automatic+0x244>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 ffeb 	bl	8001488 <display7SegAuto>
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 80004b2:	2102      	movs	r1, #2
 80004b4:	2001      	movs	r0, #1
 80004b6:	f000 fee3 	bl	8001280 <displayTrafficLight>
		if(scanFreqTimer_flag == 1){
 80004ba:	4b3b      	ldr	r3, [pc, #236]	; (80005a8 <trafficLight_automatic+0x248>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d110      	bne.n	80004e4 <trafficLight_automatic+0x184>
			update7SegBufferAuto();
 80004c2:	f000 ff63 	bl	800138c <update7SegBufferAuto>
			segmentIndexAuto++;
 80004c6:	4b37      	ldr	r3, [pc, #220]	; (80005a4 <trafficLight_automatic+0x244>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	4a35      	ldr	r2, [pc, #212]	; (80005a4 <trafficLight_automatic+0x244>)
 80004ce:	6013      	str	r3, [r2, #0]
			if(segmentIndexAuto >= SEGMENT_IN_A_ROW) segmentIndexAuto = 0;
 80004d0:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <trafficLight_automatic+0x244>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	dd02      	ble.n	80004de <trafficLight_automatic+0x17e>
 80004d8:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <trafficLight_automatic+0x244>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 80004de:	20c8      	movs	r0, #200	; 0xc8
 80004e0:	f001 fa7a 	bl	80019d8 <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff feed 	bl	80002c4 <isPressedAndReleased>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d019      	beq.n	8000524 <trafficLight_automatic+0x1c4>
			state = SELECT_MODE_RED;
 80004f0:	4b25      	ldr	r3, [pc, #148]	; (8000588 <trafficLight_automatic+0x228>)
 80004f2:	2205      	movs	r2, #5
 80004f4:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <trafficLight_automatic+0x24c>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80004fc:	20fa      	movs	r0, #250	; 0xfa
 80004fe:	f001 fa33 	bl	8001968 <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000502:	20c8      	movs	r0, #200	; 0xc8
 8000504:	f001 fa68 	bl	80019d8 <setTimerScanFreq>
			clearTrafficDisplay();
 8000508:	f000 fe96 	bl	8001238 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <trafficLight_automatic+0x22c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <trafficLight_automatic+0x230>)
 8000512:	fb82 1203 	smull	r1, r2, r2, r3
 8000516:	1192      	asrs	r2, r2, #6
 8000518:	17db      	asrs	r3, r3, #31
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	4a24      	ldr	r2, [pc, #144]	; (80005b0 <trafficLight_automatic+0x250>)
 800051e:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000520:	f000 ff68 	bl	80013f4 <update7SegBufferManual>
		}
		if(countDownTimer1_counter == 1){
 8000524:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <trafficLight_automatic+0x254>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	f040 811e 	bne.w	800076a <trafficLight_automatic+0x40a>
			segment1Counter --;
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <trafficLight_automatic+0x234>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a17      	ldr	r2, [pc, #92]	; (8000594 <trafficLight_automatic+0x234>)
 8000536:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <trafficLight_automatic+0x23c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3b01      	subs	r3, #1
 800053e:	4a17      	ldr	r2, [pc, #92]	; (800059c <trafficLight_automatic+0x23c>)
 8000540:	6013      	str	r3, [r2, #0]
			if (segment2Counter <= 0){
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <trafficLight_automatic+0x23c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	dc16      	bgt.n	8000578 <trafficLight_automatic+0x218>
				segment1Counter = counter_green / DIVISION_NUMBER;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <trafficLight_automatic+0x238>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <trafficLight_automatic+0x230>)
 8000550:	fb82 1203 	smull	r1, r2, r2, r3
 8000554:	1192      	asrs	r2, r2, #6
 8000556:	17db      	asrs	r3, r3, #31
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <trafficLight_automatic+0x234>)
 800055c:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_red / DIVISION_NUMBER;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <trafficLight_automatic+0x22c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <trafficLight_automatic+0x230>)
 8000564:	fb82 1203 	smull	r1, r2, r2, r3
 8000568:	1192      	asrs	r2, r2, #6
 800056a:	17db      	asrs	r3, r3, #31
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	4a0b      	ldr	r2, [pc, #44]	; (800059c <trafficLight_automatic+0x23c>)
 8000570:	6013      	str	r3, [r2, #0]
				state = AUTO_GREEN1_RED2;
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <trafficLight_automatic+0x228>)
 8000574:	2203      	movs	r2, #3
 8000576:	701a      	strb	r2, [r3, #0]
			}
			update7SegBufferAuto();
 8000578:	f000 ff08 	bl	800138c <update7SegBufferAuto>
			setTimerCounter1(DURATION_1S);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f001 fa0e 	bl	80019a0 <setTimerCounter1>
		}
		break;
 8000584:	e0f1      	b.n	800076a <trafficLight_automatic+0x40a>
 8000586:	bf00      	nop
 8000588:	200000e4 	.word	0x200000e4
 800058c:	20000000 	.word	0x20000000
 8000590:	10624dd3 	.word	0x10624dd3
 8000594:	20000064 	.word	0x20000064
 8000598:	20000008 	.word	0x20000008
 800059c:	20000068 	.word	0x20000068
 80005a0:	200000d4 	.word	0x200000d4
 80005a4:	2000006c 	.word	0x2000006c
 80005a8:	200000b0 	.word	0x200000b0
 80005ac:	20000050 	.word	0x20000050
 80005b0:	20000060 	.word	0x20000060
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	20000004 	.word	0x20000004
	case AUTO_GREEN1_RED2:
		display7SegAuto(segmentIndexAuto);
 80005bc:	4b6e      	ldr	r3, [pc, #440]	; (8000778 <trafficLight_automatic+0x418>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 ff61 	bl	8001488 <display7SegAuto>
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 80005c6:	2101      	movs	r1, #1
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 fe59 	bl	8001280 <displayTrafficLight>
		if(scanFreqTimer_flag == 1){
 80005ce:	4b6b      	ldr	r3, [pc, #428]	; (800077c <trafficLight_automatic+0x41c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d110      	bne.n	80005f8 <trafficLight_automatic+0x298>
			update7SegBufferAuto();
 80005d6:	f000 fed9 	bl	800138c <update7SegBufferAuto>
			segmentIndexAuto++;
 80005da:	4b67      	ldr	r3, [pc, #412]	; (8000778 <trafficLight_automatic+0x418>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a65      	ldr	r2, [pc, #404]	; (8000778 <trafficLight_automatic+0x418>)
 80005e2:	6013      	str	r3, [r2, #0]
			if(segmentIndexAuto >= SEGMENT_IN_A_ROW) segmentIndexAuto = 0;
 80005e4:	4b64      	ldr	r3, [pc, #400]	; (8000778 <trafficLight_automatic+0x418>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	dd02      	ble.n	80005f2 <trafficLight_automatic+0x292>
 80005ec:	4b62      	ldr	r3, [pc, #392]	; (8000778 <trafficLight_automatic+0x418>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f001 f9f0 	bl	80019d8 <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fe63 	bl	80002c4 <isPressedAndReleased>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d019      	beq.n	8000638 <trafficLight_automatic+0x2d8>
			state = SELECT_MODE_RED;
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <trafficLight_automatic+0x420>)
 8000606:	2205      	movs	r2, #5
 8000608:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 800060a:	4b5e      	ldr	r3, [pc, #376]	; (8000784 <trafficLight_automatic+0x424>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000610:	20fa      	movs	r0, #250	; 0xfa
 8000612:	f001 f9a9 	bl	8001968 <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000616:	20c8      	movs	r0, #200	; 0xc8
 8000618:	f001 f9de 	bl	80019d8 <setTimerScanFreq>
			clearTrafficDisplay();
 800061c:	f000 fe0c 	bl	8001238 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000620:	4b59      	ldr	r3, [pc, #356]	; (8000788 <trafficLight_automatic+0x428>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a59      	ldr	r2, [pc, #356]	; (800078c <trafficLight_automatic+0x42c>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1192      	asrs	r2, r2, #6
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4a57      	ldr	r2, [pc, #348]	; (8000790 <trafficLight_automatic+0x430>)
 8000632:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000634:	f000 fede 	bl	80013f4 <update7SegBufferManual>
		}
		if(countDownTimer1_counter == 1){
 8000638:	4b56      	ldr	r3, [pc, #344]	; (8000794 <trafficLight_automatic+0x434>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	f040 8096 	bne.w	800076e <trafficLight_automatic+0x40e>
			segment1Counter --;
 8000642:	4b55      	ldr	r3, [pc, #340]	; (8000798 <trafficLight_automatic+0x438>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a53      	ldr	r2, [pc, #332]	; (8000798 <trafficLight_automatic+0x438>)
 800064a:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 800064c:	4b53      	ldr	r3, [pc, #332]	; (800079c <trafficLight_automatic+0x43c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4a52      	ldr	r2, [pc, #328]	; (800079c <trafficLight_automatic+0x43c>)
 8000654:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0){
 8000656:	4b50      	ldr	r3, [pc, #320]	; (8000798 <trafficLight_automatic+0x438>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	dc0c      	bgt.n	8000678 <trafficLight_automatic+0x318>
				segment1Counter = counter_yellow / DIVISION_NUMBER;
 800065e:	4b50      	ldr	r3, [pc, #320]	; (80007a0 <trafficLight_automatic+0x440>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a4a      	ldr	r2, [pc, #296]	; (800078c <trafficLight_automatic+0x42c>)
 8000664:	fb82 1203 	smull	r1, r2, r2, r3
 8000668:	1192      	asrs	r2, r2, #6
 800066a:	17db      	asrs	r3, r3, #31
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	4a4a      	ldr	r2, [pc, #296]	; (8000798 <trafficLight_automatic+0x438>)
 8000670:	6013      	str	r3, [r2, #0]
				state = AUTO_YELLOW1_RED2;
 8000672:	4b43      	ldr	r3, [pc, #268]	; (8000780 <trafficLight_automatic+0x420>)
 8000674:	2204      	movs	r2, #4
 8000676:	701a      	strb	r2, [r3, #0]
			}
			update7SegBufferAuto();
 8000678:	f000 fe88 	bl	800138c <update7SegBufferAuto>
			setTimerCounter1(DURATION_1S);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f001 f98e 	bl	80019a0 <setTimerCounter1>
		}

		break;
 8000684:	e073      	b.n	800076e <trafficLight_automatic+0x40e>
	case AUTO_YELLOW1_RED2:
		display7SegAuto(segmentIndexAuto);
 8000686:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <trafficLight_automatic+0x418>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fefc 	bl	8001488 <display7SegAuto>
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 8000690:	2101      	movs	r1, #1
 8000692:	2002      	movs	r0, #2
 8000694:	f000 fdf4 	bl	8001280 <displayTrafficLight>
		if(scanFreqTimer_flag == 1){
 8000698:	4b38      	ldr	r3, [pc, #224]	; (800077c <trafficLight_automatic+0x41c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d110      	bne.n	80006c2 <trafficLight_automatic+0x362>
			update7SegBufferAuto();
 80006a0:	f000 fe74 	bl	800138c <update7SegBufferAuto>
			segmentIndexAuto++;
 80006a4:	4b34      	ldr	r3, [pc, #208]	; (8000778 <trafficLight_automatic+0x418>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a33      	ldr	r2, [pc, #204]	; (8000778 <trafficLight_automatic+0x418>)
 80006ac:	6013      	str	r3, [r2, #0]
			if(segmentIndexAuto >= SEGMENT_IN_A_ROW) segmentIndexAuto = 0;
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <trafficLight_automatic+0x418>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	dd02      	ble.n	80006bc <trafficLight_automatic+0x35c>
 80006b6:	4b30      	ldr	r3, [pc, #192]	; (8000778 <trafficLight_automatic+0x418>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 80006bc:	20c8      	movs	r0, #200	; 0xc8
 80006be:	f001 f98b 	bl	80019d8 <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff fdfe 	bl	80002c4 <isPressedAndReleased>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d019      	beq.n	8000702 <trafficLight_automatic+0x3a2>
			state = SELECT_MODE_RED;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <trafficLight_automatic+0x420>)
 80006d0:	2205      	movs	r2, #5
 80006d2:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <trafficLight_automatic+0x424>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80006da:	20fa      	movs	r0, #250	; 0xfa
 80006dc:	f001 f944 	bl	8001968 <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 80006e0:	20c8      	movs	r0, #200	; 0xc8
 80006e2:	f001 f979 	bl	80019d8 <setTimerScanFreq>
			clearTrafficDisplay();
 80006e6:	f000 fda7 	bl	8001238 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <trafficLight_automatic+0x428>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a27      	ldr	r2, [pc, #156]	; (800078c <trafficLight_automatic+0x42c>)
 80006f0:	fb82 1203 	smull	r1, r2, r2, r3
 80006f4:	1192      	asrs	r2, r2, #6
 80006f6:	17db      	asrs	r3, r3, #31
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <trafficLight_automatic+0x430>)
 80006fc:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 80006fe:	f000 fe79 	bl	80013f4 <update7SegBufferManual>
		}
		if(countDownTimer1_counter == 1){
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <trafficLight_automatic+0x434>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d133      	bne.n	8000772 <trafficLight_automatic+0x412>
			segment1Counter --;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <trafficLight_automatic+0x438>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <trafficLight_automatic+0x438>)
 8000712:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <trafficLight_automatic+0x43c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <trafficLight_automatic+0x43c>)
 800071c:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0){
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <trafficLight_automatic+0x438>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	dc16      	bgt.n	8000754 <trafficLight_automatic+0x3f4>
				segment1Counter = counter_red / DIVISION_NUMBER;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <trafficLight_automatic+0x428>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a18      	ldr	r2, [pc, #96]	; (800078c <trafficLight_automatic+0x42c>)
 800072c:	fb82 1203 	smull	r1, r2, r2, r3
 8000730:	1192      	asrs	r2, r2, #6
 8000732:	17db      	asrs	r3, r3, #31
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <trafficLight_automatic+0x438>)
 8000738:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_green / DIVISION_NUMBER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <trafficLight_automatic+0x444>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <trafficLight_automatic+0x42c>)
 8000740:	fb82 1203 	smull	r1, r2, r2, r3
 8000744:	1192      	asrs	r2, r2, #6
 8000746:	17db      	asrs	r3, r3, #31
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <trafficLight_automatic+0x43c>)
 800074c:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_GREEN2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <trafficLight_automatic+0x420>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
			}
			update7SegBufferAuto();
 8000754:	f000 fe1a 	bl	800138c <update7SegBufferAuto>
			setTimerCounter1(DURATION_1S);
 8000758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075c:	f001 f920 	bl	80019a0 <setTimerCounter1>
		}

		break;
 8000760:	e007      	b.n	8000772 <trafficLight_automatic+0x412>
	default:
		break;
 8000762:	bf00      	nop
 8000764:	e006      	b.n	8000774 <trafficLight_automatic+0x414>
		break;
 8000766:	bf00      	nop
 8000768:	e004      	b.n	8000774 <trafficLight_automatic+0x414>
		break;
 800076a:	bf00      	nop
 800076c:	e002      	b.n	8000774 <trafficLight_automatic+0x414>
		break;
 800076e:	bf00      	nop
 8000770:	e000      	b.n	8000774 <trafficLight_automatic+0x414>
		break;
 8000772:	bf00      	nop
	}
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000006c 	.word	0x2000006c
 800077c:	200000b0 	.word	0x200000b0
 8000780:	200000e4 	.word	0x200000e4
 8000784:	20000050 	.word	0x20000050
 8000788:	20000000 	.word	0x20000000
 800078c:	10624dd3 	.word	0x10624dd3
 8000790:	20000060 	.word	0x20000060
 8000794:	200000c8 	.word	0x200000c8
 8000798:	20000064 	.word	0x20000064
 800079c:	20000068 	.word	0x20000068
 80007a0:	20000004 	.word	0x20000004
 80007a4:	20000008 	.word	0x20000008

080007a8 <trafficLight_manual>:
#include "global.h"
#include "button.h"
#include "software_timer.h"
#include "led_segment_control.h"

void trafficLight_manual(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	switch(state){
 80007ac:	4b82      	ldr	r3, [pc, #520]	; (80009b8 <trafficLight_manual+0x210>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b05      	subs	r3, #5
 80007b2:	2b05      	cmp	r3, #5
 80007b4:	f200 828e 	bhi.w	8000cd4 <trafficLight_manual+0x52c>
 80007b8:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <trafficLight_manual+0x18>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007d9 	.word	0x080007d9
 80007c4:	080008c9 	.word	0x080008c9
 80007c8:	080009e1 	.word	0x080009e1
 80007cc:	08000ad1 	.word	0x08000ad1
 80007d0:	08000b4b 	.word	0x08000b4b
 80007d4:	08000be7 	.word	0x08000be7
	case SELECT_MODE_RED:
		display7SegManual(segmentIndexManual);
 80007d8:	4b78      	ldr	r3, [pc, #480]	; (80009bc <trafficLight_manual+0x214>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fec9 	bl	8001574 <display7SegManual>
		if(scanFreqTimer_flag == 1){
 80007e2:	4b77      	ldr	r3, [pc, #476]	; (80009c0 <trafficLight_manual+0x218>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d110      	bne.n	800080c <trafficLight_manual+0x64>
			update7SegBufferManual();
 80007ea:	f000 fe03 	bl	80013f4 <update7SegBufferManual>
			segmentIndexManual++;
 80007ee:	4b73      	ldr	r3, [pc, #460]	; (80009bc <trafficLight_manual+0x214>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a71      	ldr	r2, [pc, #452]	; (80009bc <trafficLight_manual+0x214>)
 80007f6:	6013      	str	r3, [r2, #0]
			if(segmentIndexManual >= SEGMENT_IN_A_ROW) segmentIndexManual = 0;
 80007f8:	4b70      	ldr	r3, [pc, #448]	; (80009bc <trafficLight_manual+0x214>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	dd02      	ble.n	8000806 <trafficLight_manual+0x5e>
 8000800:	4b6e      	ldr	r3, [pc, #440]	; (80009bc <trafficLight_manual+0x214>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000806:	20c8      	movs	r0, #200	; 0xc8
 8000808:	f001 f8e6 	bl	80019d8 <setTimerScanFreq>
		}
		isRedMode = 1;
 800080c:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <trafficLight_manual+0x21c>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000812:	4b6d      	ldr	r3, [pc, #436]	; (80009c8 <trafficLight_manual+0x220>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000818:	4b6c      	ldr	r3, [pc, #432]	; (80009cc <trafficLight_manual+0x224>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fd50 	bl	80002c4 <isPressedAndReleased>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d011      	beq.n	800084e <trafficLight_manual+0xa6>
			tempCounter = counter_yellow/DIVISION_NUMBER;
 800082a:	4b69      	ldr	r3, [pc, #420]	; (80009d0 <trafficLight_manual+0x228>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a69      	ldr	r2, [pc, #420]	; (80009d4 <trafficLight_manual+0x22c>)
 8000830:	fb82 1203 	smull	r1, r2, r2, r3
 8000834:	1192      	asrs	r2, r2, #6
 8000836:	17db      	asrs	r3, r3, #31
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	4a67      	ldr	r2, [pc, #412]	; (80009d8 <trafficLight_manual+0x230>)
 800083c:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 800083e:	f000 fdd9 	bl	80013f4 <update7SegBufferManual>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000842:	20c8      	movs	r0, #200	; 0xc8
 8000844:	f001 f8c8 	bl	80019d8 <setTimerScanFreq>
			state = SELECT_MODE_YELLOW;
 8000848:	4b5b      	ldr	r3, [pc, #364]	; (80009b8 <trafficLight_manual+0x210>)
 800084a:	2206      	movs	r2, #6
 800084c:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fd38 	bl	80002c4 <isPressedAndReleased>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d005      	beq.n	8000866 <trafficLight_manual+0xbe>
			setTimerScanFreq(DURATION_FOR_5HZ);
 800085a:	20c8      	movs	r0, #200	; 0xc8
 800085c:	f001 f8bc 	bl	80019d8 <setTimerScanFreq>
			state = MODIFY_PRESSED;
 8000860:	4b55      	ldr	r3, [pc, #340]	; (80009b8 <trafficLight_manual+0x210>)
 8000862:	2208      	movs	r2, #8
 8000864:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff fd46 	bl	80002f8 <is_button_pressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d01b      	beq.n	80008aa <trafficLight_manual+0x102>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fd5a 	bl	800032c <is_button_pressed_3s>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d015      	beq.n	80008aa <trafficLight_manual+0x102>
				state = MODIFY_LONGPRESSED;
 800087e:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <trafficLight_manual+0x210>)
 8000880:	2209      	movs	r2, #9
 8000882:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000884:	4b54      	ldr	r3, [pc, #336]	; (80009d8 <trafficLight_manual+0x230>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	330a      	adds	r3, #10
 800088a:	4a53      	ldr	r2, [pc, #332]	; (80009d8 <trafficLight_manual+0x230>)
 800088c:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 800088e:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <trafficLight_manual+0x230>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b63      	cmp	r3, #99	; 0x63
 8000894:	dd02      	ble.n	800089c <trafficLight_manual+0xf4>
					tempCounter = 0;
 8000896:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <trafficLight_manual+0x230>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
				}
				setTimerScanFreq(DURATION_FOR_5HZ);
 800089c:	20c8      	movs	r0, #200	; 0xc8
 800089e:	f001 f89b 	bl	80019d8 <setTimerScanFreq>
				setTimerModify(DURATION_1S);
 80008a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a6:	f001 f843 	bl	8001930 <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 80008aa:	2002      	movs	r0, #2
 80008ac:	f7ff fd0a 	bl	80002c4 <isPressedAndReleased>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8210 	beq.w	8000cd8 <trafficLight_manual+0x530>
			state = SET_PRESSED;
 80008b8:	4b3f      	ldr	r3, [pc, #252]	; (80009b8 <trafficLight_manual+0x210>)
 80008ba:	220a      	movs	r2, #10
 80008bc:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 80008be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008c2:	f001 f819 	bl	80018f8 <setTimerWait>
		}
		break;
 80008c6:	e207      	b.n	8000cd8 <trafficLight_manual+0x530>
	case SELECT_MODE_YELLOW:
		display7SegManual(segmentIndexManual);
 80008c8:	4b3c      	ldr	r3, [pc, #240]	; (80009bc <trafficLight_manual+0x214>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fe51 	bl	8001574 <display7SegManual>
		if(scanFreqTimer_flag == 1){
 80008d2:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <trafficLight_manual+0x218>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d110      	bne.n	80008fc <trafficLight_manual+0x154>
			update7SegBufferManual();
 80008da:	f000 fd8b 	bl	80013f4 <update7SegBufferManual>
			segmentIndexManual++;
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <trafficLight_manual+0x214>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a35      	ldr	r2, [pc, #212]	; (80009bc <trafficLight_manual+0x214>)
 80008e6:	6013      	str	r3, [r2, #0]
			if(segmentIndexManual >= SEGMENT_IN_A_ROW) segmentIndexManual = 0;
 80008e8:	4b34      	ldr	r3, [pc, #208]	; (80009bc <trafficLight_manual+0x214>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	dd02      	ble.n	80008f6 <trafficLight_manual+0x14e>
 80008f0:	4b32      	ldr	r3, [pc, #200]	; (80009bc <trafficLight_manual+0x214>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 80008f6:	20c8      	movs	r0, #200	; 0xc8
 80008f8:	f001 f86e 	bl	80019d8 <setTimerScanFreq>
		}
		isRedMode = 0;
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <trafficLight_manual+0x21c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
		isYellowMode = 1;
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <trafficLight_manual+0x220>)
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000908:	4b30      	ldr	r3, [pc, #192]	; (80009cc <trafficLight_manual+0x224>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fcd8 	bl	80002c4 <isPressedAndReleased>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d011      	beq.n	800093e <trafficLight_manual+0x196>
			tempCounter = counter_green/DIVISION_NUMBER;
 800091a:	4b30      	ldr	r3, [pc, #192]	; (80009dc <trafficLight_manual+0x234>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <trafficLight_manual+0x22c>)
 8000920:	fb82 1203 	smull	r1, r2, r2, r3
 8000924:	1192      	asrs	r2, r2, #6
 8000926:	17db      	asrs	r3, r3, #31
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <trafficLight_manual+0x230>)
 800092c:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 800092e:	f000 fd61 	bl	80013f4 <update7SegBufferManual>
			state = SELECT_MODE_GREEN;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <trafficLight_manual+0x210>)
 8000934:	2207      	movs	r2, #7
 8000936:	701a      	strb	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000938:	20c8      	movs	r0, #200	; 0xc8
 800093a:	f001 f84d 	bl	80019d8 <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff fcc0 	bl	80002c4 <isPressedAndReleased>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d005      	beq.n	8000956 <trafficLight_manual+0x1ae>
			state = MODIFY_PRESSED;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <trafficLight_manual+0x210>)
 800094c:	2208      	movs	r2, #8
 800094e:	701a      	strb	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000950:	20c8      	movs	r0, #200	; 0xc8
 8000952:	f001 f841 	bl	80019d8 <setTimerScanFreq>
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fcce 	bl	80002f8 <is_button_pressed>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d01b      	beq.n	800099a <trafficLight_manual+0x1f2>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff fce2 	bl	800032c <is_button_pressed_3s>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d015      	beq.n	800099a <trafficLight_manual+0x1f2>
				state = MODIFY_LONGPRESSED;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <trafficLight_manual+0x210>)
 8000970:	2209      	movs	r2, #9
 8000972:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <trafficLight_manual+0x230>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	330a      	adds	r3, #10
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <trafficLight_manual+0x230>)
 800097c:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <trafficLight_manual+0x230>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b63      	cmp	r3, #99	; 0x63
 8000984:	dd02      	ble.n	800098c <trafficLight_manual+0x1e4>
					tempCounter = 0;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <trafficLight_manual+0x230>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
				}
				setTimerScanFreq(DURATION_FOR_5HZ);
 800098c:	20c8      	movs	r0, #200	; 0xc8
 800098e:	f001 f823 	bl	80019d8 <setTimerScanFreq>
				setTimerModify(DURATION_1S);
 8000992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000996:	f000 ffcb 	bl	8001930 <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff fc92 	bl	80002c4 <isPressedAndReleased>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 819a 	beq.w	8000cdc <trafficLight_manual+0x534>
			state = SET_PRESSED;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <trafficLight_manual+0x210>)
 80009aa:	220a      	movs	r2, #10
 80009ac:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 80009ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009b2:	f000 ffa1 	bl	80018f8 <setTimerWait>
		}
		break;
 80009b6:	e191      	b.n	8000cdc <trafficLight_manual+0x534>
 80009b8:	200000e4 	.word	0x200000e4
 80009bc:	20000070 	.word	0x20000070
 80009c0:	200000b0 	.word	0x200000b0
 80009c4:	20000054 	.word	0x20000054
 80009c8:	20000058 	.word	0x20000058
 80009cc:	2000005c 	.word	0x2000005c
 80009d0:	20000004 	.word	0x20000004
 80009d4:	10624dd3 	.word	0x10624dd3
 80009d8:	20000060 	.word	0x20000060
 80009dc:	20000008 	.word	0x20000008
	case SELECT_MODE_GREEN:
		display7SegManual(segmentIndexManual);
 80009e0:	4b8e      	ldr	r3, [pc, #568]	; (8000c1c <trafficLight_manual+0x474>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fdc5 	bl	8001574 <display7SegManual>
		if(scanFreqTimer_flag == 1){
 80009ea:	4b8d      	ldr	r3, [pc, #564]	; (8000c20 <trafficLight_manual+0x478>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d110      	bne.n	8000a14 <trafficLight_manual+0x26c>
			update7SegBufferManual();
 80009f2:	f000 fcff 	bl	80013f4 <update7SegBufferManual>
			segmentIndexManual++;
 80009f6:	4b89      	ldr	r3, [pc, #548]	; (8000c1c <trafficLight_manual+0x474>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a87      	ldr	r2, [pc, #540]	; (8000c1c <trafficLight_manual+0x474>)
 80009fe:	6013      	str	r3, [r2, #0]
			if(segmentIndexManual >= SEGMENT_IN_A_ROW) segmentIndexManual = 0;
 8000a00:	4b86      	ldr	r3, [pc, #536]	; (8000c1c <trafficLight_manual+0x474>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	dd02      	ble.n	8000a0e <trafficLight_manual+0x266>
 8000a08:	4b84      	ldr	r3, [pc, #528]	; (8000c1c <trafficLight_manual+0x474>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000a0e:	20c8      	movs	r0, #200	; 0xc8
 8000a10:	f000 ffe2 	bl	80019d8 <setTimerScanFreq>
		}
		isRedMode = 0;
 8000a14:	4b83      	ldr	r3, [pc, #524]	; (8000c24 <trafficLight_manual+0x47c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000a1a:	4b83      	ldr	r3, [pc, #524]	; (8000c28 <trafficLight_manual+0x480>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
		isGreenMode = 1;
 8000a20:	4b82      	ldr	r3, [pc, #520]	; (8000c2c <trafficLight_manual+0x484>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fc4c 	bl	80002c4 <isPressedAndReleased>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d011      	beq.n	8000a56 <trafficLight_manual+0x2ae>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000a32:	4b7f      	ldr	r3, [pc, #508]	; (8000c30 <trafficLight_manual+0x488>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a7f      	ldr	r2, [pc, #508]	; (8000c34 <trafficLight_manual+0x48c>)
 8000a38:	fb82 1203 	smull	r1, r2, r2, r3
 8000a3c:	1192      	asrs	r2, r2, #6
 8000a3e:	17db      	asrs	r3, r3, #31
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	4a7d      	ldr	r2, [pc, #500]	; (8000c38 <trafficLight_manual+0x490>)
 8000a44:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000a46:	f000 fcd5 	bl	80013f4 <update7SegBufferManual>
			state = SELECT_MODE_RED;
 8000a4a:	4b7c      	ldr	r3, [pc, #496]	; (8000c3c <trafficLight_manual+0x494>)
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	701a      	strb	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000a50:	20c8      	movs	r0, #200	; 0xc8
 8000a52:	f000 ffc1 	bl	80019d8 <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fc34 	bl	80002c4 <isPressedAndReleased>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <trafficLight_manual+0x2c6>
			state = MODIFY_PRESSED;
 8000a62:	4b76      	ldr	r3, [pc, #472]	; (8000c3c <trafficLight_manual+0x494>)
 8000a64:	2208      	movs	r2, #8
 8000a66:	701a      	strb	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000a68:	20c8      	movs	r0, #200	; 0xc8
 8000a6a:	f000 ffb5 	bl	80019d8 <setTimerScanFreq>
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff fc42 	bl	80002f8 <is_button_pressed>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d01b      	beq.n	8000ab2 <trafficLight_manual+0x30a>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fc56 	bl	800032c <is_button_pressed_3s>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d015      	beq.n	8000ab2 <trafficLight_manual+0x30a>
				state = MODIFY_LONGPRESSED;
 8000a86:	4b6d      	ldr	r3, [pc, #436]	; (8000c3c <trafficLight_manual+0x494>)
 8000a88:	2209      	movs	r2, #9
 8000a8a:	701a      	strb	r2, [r3, #0]

				tempCounter += 10;
 8000a8c:	4b6a      	ldr	r3, [pc, #424]	; (8000c38 <trafficLight_manual+0x490>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	330a      	adds	r3, #10
 8000a92:	4a69      	ldr	r2, [pc, #420]	; (8000c38 <trafficLight_manual+0x490>)
 8000a94:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000a96:	4b68      	ldr	r3, [pc, #416]	; (8000c38 <trafficLight_manual+0x490>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b63      	cmp	r3, #99	; 0x63
 8000a9c:	dd02      	ble.n	8000aa4 <trafficLight_manual+0x2fc>
					tempCounter = 0;
 8000a9e:	4b66      	ldr	r3, [pc, #408]	; (8000c38 <trafficLight_manual+0x490>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa8:	f000 ff42 	bl	8001930 <setTimerModify>
				setTimerScanFreq(DURATION_FOR_5HZ);
 8000aac:	20c8      	movs	r0, #200	; 0xc8
 8000aae:	f000 ff93 	bl	80019d8 <setTimerScanFreq>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f7ff fc06 	bl	80002c4 <isPressedAndReleased>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 8110 	beq.w	8000ce0 <trafficLight_manual+0x538>
			state = SET_PRESSED;
 8000ac0:	4b5e      	ldr	r3, [pc, #376]	; (8000c3c <trafficLight_manual+0x494>)
 8000ac2:	220a      	movs	r2, #10
 8000ac4:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 8000ac6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aca:	f000 ff15 	bl	80018f8 <setTimerWait>
		}
		break;
 8000ace:	e107      	b.n	8000ce0 <trafficLight_manual+0x538>
	case MODIFY_PRESSED:
		if(isRedMode == 1){
 8000ad0:	4b54      	ldr	r3, [pc, #336]	; (8000c24 <trafficLight_manual+0x47c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d10f      	bne.n	8000af8 <trafficLight_manual+0x350>
			tempCounter += 1;
 8000ad8:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <trafficLight_manual+0x490>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a56      	ldr	r2, [pc, #344]	; (8000c38 <trafficLight_manual+0x490>)
 8000ae0:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000ae2:	4b55      	ldr	r3, [pc, #340]	; (8000c38 <trafficLight_manual+0x490>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b63      	cmp	r3, #99	; 0x63
 8000ae8:	dd02      	ble.n	8000af0 <trafficLight_manual+0x348>
				tempCounter =0;
 8000aea:	4b53      	ldr	r3, [pc, #332]	; (8000c38 <trafficLight_manual+0x490>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
			}
			state = SELECT_MODE_RED;
 8000af0:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <trafficLight_manual+0x494>)
 8000af2:	2205      	movs	r2, #5
 8000af4:	701a      	strb	r2, [r3, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
				tempCounter = 0;
			}
			state = SELECT_MODE_GREEN;
		}
		break;
 8000af6:	e0f5      	b.n	8000ce4 <trafficLight_manual+0x53c>
		else if(isYellowMode == 1){
 8000af8:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <trafficLight_manual+0x480>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d10f      	bne.n	8000b20 <trafficLight_manual+0x378>
			tempCounter += 1;
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <trafficLight_manual+0x490>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <trafficLight_manual+0x490>)
 8000b08:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000b0a:	4b4b      	ldr	r3, [pc, #300]	; (8000c38 <trafficLight_manual+0x490>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b63      	cmp	r3, #99	; 0x63
 8000b10:	dd02      	ble.n	8000b18 <trafficLight_manual+0x370>
				tempCounter =0;
 8000b12:	4b49      	ldr	r3, [pc, #292]	; (8000c38 <trafficLight_manual+0x490>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
			state = SELECT_MODE_YELLOW;
 8000b18:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <trafficLight_manual+0x494>)
 8000b1a:	2206      	movs	r2, #6
 8000b1c:	701a      	strb	r2, [r3, #0]
		break;
 8000b1e:	e0e1      	b.n	8000ce4 <trafficLight_manual+0x53c>
		else if(isGreenMode == 1){
 8000b20:	4b42      	ldr	r3, [pc, #264]	; (8000c2c <trafficLight_manual+0x484>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	f040 80dd 	bne.w	8000ce4 <trafficLight_manual+0x53c>
			tempCounter += 1;
 8000b2a:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <trafficLight_manual+0x490>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a41      	ldr	r2, [pc, #260]	; (8000c38 <trafficLight_manual+0x490>)
 8000b32:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000b34:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <trafficLight_manual+0x490>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b63      	cmp	r3, #99	; 0x63
 8000b3a:	dd02      	ble.n	8000b42 <trafficLight_manual+0x39a>
				tempCounter = 0;
 8000b3c:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <trafficLight_manual+0x490>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
			state = SELECT_MODE_GREEN;
 8000b42:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <trafficLight_manual+0x494>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	701a      	strb	r2, [r3, #0]
		break;
 8000b48:	e0cc      	b.n	8000ce4 <trafficLight_manual+0x53c>
	case MODIFY_LONGPRESSED:
		display7SegManual(segmentIndexManual);
 8000b4a:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <trafficLight_manual+0x474>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fd10 	bl	8001574 <display7SegManual>
		if(scanFreqTimer_flag == 1){
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <trafficLight_manual+0x478>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d110      	bne.n	8000b7e <trafficLight_manual+0x3d6>
			update7SegBufferManual();
 8000b5c:	f000 fc4a 	bl	80013f4 <update7SegBufferManual>
			segmentIndexManual++;
 8000b60:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <trafficLight_manual+0x474>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a2d      	ldr	r2, [pc, #180]	; (8000c1c <trafficLight_manual+0x474>)
 8000b68:	6013      	str	r3, [r2, #0]
			if(segmentIndexManual >= SEGMENT_IN_A_ROW) segmentIndexManual = 0;
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <trafficLight_manual+0x474>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	dd02      	ble.n	8000b78 <trafficLight_manual+0x3d0>
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <trafficLight_manual+0x474>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000b78:	20c8      	movs	r0, #200	; 0xc8
 8000b7a:	f000 ff2d 	bl	80019d8 <setTimerScanFreq>
		}
		if(modifyTimer_flag == 1){
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <trafficLight_manual+0x498>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d10f      	bne.n	8000ba6 <trafficLight_manual+0x3fe>
			tempCounter += 10;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <trafficLight_manual+0x490>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	330a      	adds	r3, #10
 8000b8c:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <trafficLight_manual+0x490>)
 8000b8e:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE) {
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <trafficLight_manual+0x490>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b63      	cmp	r3, #99	; 0x63
 8000b96:	dd02      	ble.n	8000b9e <trafficLight_manual+0x3f6>
				tempCounter = 0;
 8000b98:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <trafficLight_manual+0x490>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
			}
			setTimerModify(DURATION_1S);
 8000b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba2:	f000 fec5 	bl	8001930 <setTimerModify>
		}


		if(!is_button_pressed(BTN_MODIFY_INDEX)){
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fba6 	bl	80002f8 <is_button_pressed>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 809a 	bne.w	8000ce8 <trafficLight_manual+0x540>
			if(isRedMode == 1) state = SELECT_MODE_RED;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <trafficLight_manual+0x47c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d103      	bne.n	8000bc4 <trafficLight_manual+0x41c>
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <trafficLight_manual+0x494>)
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	701a      	strb	r2, [r3, #0]
			else if(isYellowMode == 1) state = SELECT_MODE_YELLOW;
			else if(isGreenMode == 1) state = SELECT_MODE_GREEN;
		}

		break;
 8000bc2:	e091      	b.n	8000ce8 <trafficLight_manual+0x540>
			else if(isYellowMode == 1) state = SELECT_MODE_YELLOW;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <trafficLight_manual+0x480>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d103      	bne.n	8000bd4 <trafficLight_manual+0x42c>
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <trafficLight_manual+0x494>)
 8000bce:	2206      	movs	r2, #6
 8000bd0:	701a      	strb	r2, [r3, #0]
		break;
 8000bd2:	e089      	b.n	8000ce8 <trafficLight_manual+0x540>
			else if(isGreenMode == 1) state = SELECT_MODE_GREEN;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <trafficLight_manual+0x484>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f040 8085 	bne.w	8000ce8 <trafficLight_manual+0x540>
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <trafficLight_manual+0x494>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	701a      	strb	r2, [r3, #0]
		break;
 8000be4:	e080      	b.n	8000ce8 <trafficLight_manual+0x540>
	case SET_PRESSED:
		if(isRedMode == 1) counter_red = tempCounter * DIVISION_NUMBER;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <trafficLight_manual+0x47c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d108      	bne.n	8000c00 <trafficLight_manual+0x458>
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <trafficLight_manual+0x490>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf6:	fb02 f303 	mul.w	r3, r2, r3
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <trafficLight_manual+0x488>)
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e02f      	b.n	8000c60 <trafficLight_manual+0x4b8>
		else if (isYellowMode == 1) counter_yellow = tempCounter * DIVISION_NUMBER;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <trafficLight_manual+0x480>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d11f      	bne.n	8000c48 <trafficLight_manual+0x4a0>
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <trafficLight_manual+0x490>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <trafficLight_manual+0x49c>)
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e022      	b.n	8000c60 <trafficLight_manual+0x4b8>
 8000c1a:	bf00      	nop
 8000c1c:	20000070 	.word	0x20000070
 8000c20:	200000b0 	.word	0x200000b0
 8000c24:	20000054 	.word	0x20000054
 8000c28:	20000058 	.word	0x20000058
 8000c2c:	2000005c 	.word	0x2000005c
 8000c30:	20000000 	.word	0x20000000
 8000c34:	10624dd3 	.word	0x10624dd3
 8000c38:	20000060 	.word	0x20000060
 8000c3c:	200000e4 	.word	0x200000e4
 8000c40:	200000a0 	.word	0x200000a0
 8000c44:	20000004 	.word	0x20000004
		else if (isGreenMode == 1) counter_green = tempCounter * DIVISION_NUMBER;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <trafficLight_manual+0x54c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d107      	bne.n	8000c60 <trafficLight_manual+0x4b8>
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <trafficLight_manual+0x550>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <trafficLight_manual+0x554>)
 8000c5e:	6013      	str	r3, [r2, #0]
		isRedMode = 0;
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <trafficLight_manual+0x558>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <trafficLight_manual+0x55c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <trafficLight_manual+0x54c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
		isInManual = 0;
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <trafficLight_manual+0x560>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
		scanFreqTimer_flag = 0;
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <trafficLight_manual+0x564>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
		tempCounter = 0;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <trafficLight_manual+0x550>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
		clear7Seg();
 8000c84:	f000 fcec 	bl	8001660 <clear7Seg>
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fb1b 	bl	80002c4 <isPressedAndReleased>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d017      	beq.n	8000cc4 <trafficLight_manual+0x51c>
			isInManual = 1;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <trafficLight_manual+0x560>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000c9a:	20fa      	movs	r0, #250	; 0xfa
 8000c9c:	f000 fe64 	bl	8001968 <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000ca0:	20c8      	movs	r0, #200	; 0xc8
 8000ca2:	f000 fe99 	bl	80019d8 <setTimerScanFreq>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <trafficLight_manual+0x568>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <trafficLight_manual+0x56c>)
 8000cac:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb0:	1192      	asrs	r2, r2, #6
 8000cb2:	17db      	asrs	r3, r3, #31
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <trafficLight_manual+0x550>)
 8000cb8:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000cba:	f000 fb9b 	bl	80013f4 <update7SegBufferManual>
			state = SELECT_MODE_RED;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <trafficLight_manual+0x570>)
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	701a      	strb	r2, [r3, #0]
		}
		if(waitTimer_flag == 1){
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <trafficLight_manual+0x574>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10f      	bne.n	8000cec <trafficLight_manual+0x544>
			state = IDLE;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <trafficLight_manual+0x570>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cd2:	e00b      	b.n	8000cec <trafficLight_manual+0x544>
	default:
		break;
 8000cd4:	bf00      	nop
 8000cd6:	e00a      	b.n	8000cee <trafficLight_manual+0x546>
		break;
 8000cd8:	bf00      	nop
 8000cda:	e008      	b.n	8000cee <trafficLight_manual+0x546>
		break;
 8000cdc:	bf00      	nop
 8000cde:	e006      	b.n	8000cee <trafficLight_manual+0x546>
		break;
 8000ce0:	bf00      	nop
 8000ce2:	e004      	b.n	8000cee <trafficLight_manual+0x546>
		break;
 8000ce4:	bf00      	nop
 8000ce6:	e002      	b.n	8000cee <trafficLight_manual+0x546>
		break;
 8000ce8:	bf00      	nop
 8000cea:	e000      	b.n	8000cee <trafficLight_manual+0x546>
		break;
 8000cec:	bf00      	nop
	}
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000005c 	.word	0x2000005c
 8000cf8:	20000060 	.word	0x20000060
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000054 	.word	0x20000054
 8000d04:	20000058 	.word	0x20000058
 8000d08:	20000050 	.word	0x20000050
 8000d0c:	200000b0 	.word	0x200000b0
 8000d10:	20000000 	.word	0x20000000
 8000d14:	10624dd3 	.word	0x10624dd3
 8000d18:	200000e4 	.word	0x200000e4
 8000d1c:	2000009c 	.word	0x2000009c

08000d20 <triggerLed>:

void triggerLed(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	if(timerLed_flag == 1){
 8000d24:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <triggerLed+0xfc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d174      	bne.n	8000e16 <triggerLed+0xf6>
		if (isRedMode == 1 && isInManual == 1){
 8000d2c:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <triggerLed+0x100>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d122      	bne.n	8000d7a <triggerLed+0x5a>
 8000d34:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <triggerLed+0x104>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d11e      	bne.n	8000d7a <triggerLed+0x5a>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4839      	ldr	r0, [pc, #228]	; (8000e28 <triggerLed+0x108>)
 8000d42:	f001 fac0 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	4837      	ldr	r0, [pc, #220]	; (8000e28 <triggerLed+0x108>)
 8000d4c:	f001 fabb 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2104      	movs	r1, #4
 8000d54:	4834      	ldr	r0, [pc, #208]	; (8000e28 <triggerLed+0x108>)
 8000d56:	f001 fab6 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4832      	ldr	r0, [pc, #200]	; (8000e28 <triggerLed+0x108>)
 8000d60:	f001 fab1 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000d64:	2102      	movs	r1, #2
 8000d66:	4830      	ldr	r0, [pc, #192]	; (8000e28 <triggerLed+0x108>)
 8000d68:	f001 fac5 	bl	80022f6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	482e      	ldr	r0, [pc, #184]	; (8000e28 <triggerLed+0x108>)
 8000d70:	f001 fac1 	bl	80022f6 <HAL_GPIO_TogglePin>
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000d74:	20fa      	movs	r0, #250	; 0xfa
 8000d76:	f000 fdf7 	bl	8001968 <setTimerTriggerLed>
		}
		if (isYellowMode == 1 && isInManual == 1){
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <triggerLed+0x10c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d122      	bne.n	8000dc8 <triggerLed+0xa8>
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <triggerLed+0x104>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11e      	bne.n	8000dc8 <triggerLed+0xa8>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <triggerLed+0x108>)
 8000d90:	f001 fa99 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	4823      	ldr	r0, [pc, #140]	; (8000e28 <triggerLed+0x108>)
 8000d9a:	f001 fa94 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2102      	movs	r1, #2
 8000da2:	4821      	ldr	r0, [pc, #132]	; (8000e28 <triggerLed+0x108>)
 8000da4:	f001 fa8f 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2110      	movs	r1, #16
 8000dac:	481e      	ldr	r0, [pc, #120]	; (8000e28 <triggerLed+0x108>)
 8000dae:	f001 fa8a 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000db2:	2104      	movs	r1, #4
 8000db4:	481c      	ldr	r0, [pc, #112]	; (8000e28 <triggerLed+0x108>)
 8000db6:	f001 fa9e 	bl	80022f6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000dba:	2120      	movs	r1, #32
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <triggerLed+0x108>)
 8000dbe:	f001 fa9a 	bl	80022f6 <HAL_GPIO_TogglePin>
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000dc2:	20fa      	movs	r0, #250	; 0xfa
 8000dc4:	f000 fdd0 	bl	8001968 <setTimerTriggerLed>
		}
		if (isGreenMode == 1 && isInManual == 1){
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <triggerLed+0x110>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d122      	bne.n	8000e16 <triggerLed+0xf6>
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <triggerLed+0x104>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d11e      	bne.n	8000e16 <triggerLed+0xf6>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2102      	movs	r1, #2
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <triggerLed+0x108>)
 8000dde:	f001 fa72 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2110      	movs	r1, #16
 8000de6:	4810      	ldr	r0, [pc, #64]	; (8000e28 <triggerLed+0x108>)
 8000de8:	f001 fa6d 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2104      	movs	r1, #4
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <triggerLed+0x108>)
 8000df2:	f001 fa68 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2120      	movs	r1, #32
 8000dfa:	480b      	ldr	r0, [pc, #44]	; (8000e28 <triggerLed+0x108>)
 8000dfc:	f001 fa63 	bl	80022c6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000e00:	2108      	movs	r1, #8
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <triggerLed+0x108>)
 8000e04:	f001 fa77 	bl	80022f6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	4807      	ldr	r0, [pc, #28]	; (8000e28 <triggerLed+0x108>)
 8000e0c:	f001 fa73 	bl	80022f6 <HAL_GPIO_TogglePin>
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000e10:	20fa      	movs	r0, #250	; 0xfa
 8000e12:	f000 fda9 	bl	8001968 <setTimerTriggerLed>
		}
	}
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000a4 	.word	0x200000a4
 8000e20:	20000054 	.word	0x20000054
 8000e24:	20000050 	.word	0x20000050
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	20000058 	.word	0x20000058
 8000e30:	2000005c 	.word	0x2000005c

08000e34 <display7Seg>:
#include "led_segment_control.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"

void display7Seg(int num){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b09      	cmp	r3, #9
 8000e40:	f200 81c8 	bhi.w	80011d4 <display7Seg+0x3a0>
 8000e44:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <display7Seg+0x18>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000e75 	.word	0x08000e75
 8000e50:	08000ecb 	.word	0x08000ecb
 8000e54:	08000f21 	.word	0x08000f21
 8000e58:	08000f77 	.word	0x08000f77
 8000e5c:	08000fcd 	.word	0x08000fcd
 8000e60:	08001023 	.word	0x08001023
 8000e64:	08001079 	.word	0x08001079
 8000e68:	080010cf 	.word	0x080010cf
 8000e6c:	08001125 	.word	0x08001125
 8000e70:	0800117b 	.word	0x0800117b
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7a:	48d5      	ldr	r0, [pc, #852]	; (80011d0 <display7Seg+0x39c>)
 8000e7c:	f001 fa23 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e86:	48d2      	ldr	r0, [pc, #840]	; (80011d0 <display7Seg+0x39c>)
 8000e88:	f001 fa1d 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e92:	48cf      	ldr	r0, [pc, #828]	; (80011d0 <display7Seg+0x39c>)
 8000e94:	f001 fa17 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9e:	48cc      	ldr	r0, [pc, #816]	; (80011d0 <display7Seg+0x39c>)
 8000ea0:	f001 fa11 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eaa:	48c9      	ldr	r0, [pc, #804]	; (80011d0 <display7Seg+0x39c>)
 8000eac:	f001 fa0b 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb6:	48c6      	ldr	r0, [pc, #792]	; (80011d0 <display7Seg+0x39c>)
 8000eb8:	f001 fa05 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	48c3      	ldr	r0, [pc, #780]	; (80011d0 <display7Seg+0x39c>)
 8000ec4:	f001 f9ff 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8000ec8:	e1af      	b.n	800122a <display7Seg+0x3f6>
	case 1:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed0:	48bf      	ldr	r0, [pc, #764]	; (80011d0 <display7Seg+0x39c>)
 8000ed2:	f001 f9f8 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000edc:	48bc      	ldr	r0, [pc, #752]	; (80011d0 <display7Seg+0x39c>)
 8000ede:	f001 f9f2 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee8:	48b9      	ldr	r0, [pc, #740]	; (80011d0 <display7Seg+0x39c>)
 8000eea:	f001 f9ec 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef4:	48b6      	ldr	r0, [pc, #728]	; (80011d0 <display7Seg+0x39c>)
 8000ef6:	f001 f9e6 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f00:	48b3      	ldr	r0, [pc, #716]	; (80011d0 <display7Seg+0x39c>)
 8000f02:	f001 f9e0 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0c:	48b0      	ldr	r0, [pc, #704]	; (80011d0 <display7Seg+0x39c>)
 8000f0e:	f001 f9da 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f18:	48ad      	ldr	r0, [pc, #692]	; (80011d0 <display7Seg+0x39c>)
 8000f1a:	f001 f9d4 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8000f1e:	e184      	b.n	800122a <display7Seg+0x3f6>
	case 2:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	48aa      	ldr	r0, [pc, #680]	; (80011d0 <display7Seg+0x39c>)
 8000f28:	f001 f9cd 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	48a7      	ldr	r0, [pc, #668]	; (80011d0 <display7Seg+0x39c>)
 8000f34:	f001 f9c7 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	48a4      	ldr	r0, [pc, #656]	; (80011d0 <display7Seg+0x39c>)
 8000f40:	f001 f9c1 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4a:	48a1      	ldr	r0, [pc, #644]	; (80011d0 <display7Seg+0x39c>)
 8000f4c:	f001 f9bb 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f56:	489e      	ldr	r0, [pc, #632]	; (80011d0 <display7Seg+0x39c>)
 8000f58:	f001 f9b5 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f62:	489b      	ldr	r0, [pc, #620]	; (80011d0 <display7Seg+0x39c>)
 8000f64:	f001 f9af 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6e:	4898      	ldr	r0, [pc, #608]	; (80011d0 <display7Seg+0x39c>)
 8000f70:	f001 f9a9 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8000f74:	e159      	b.n	800122a <display7Seg+0x3f6>
	case 3:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	4894      	ldr	r0, [pc, #592]	; (80011d0 <display7Seg+0x39c>)
 8000f7e:	f001 f9a2 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	4891      	ldr	r0, [pc, #580]	; (80011d0 <display7Seg+0x39c>)
 8000f8a:	f001 f99c 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f94:	488e      	ldr	r0, [pc, #568]	; (80011d0 <display7Seg+0x39c>)
 8000f96:	f001 f996 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	488b      	ldr	r0, [pc, #556]	; (80011d0 <display7Seg+0x39c>)
 8000fa2:	f001 f990 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4888      	ldr	r0, [pc, #544]	; (80011d0 <display7Seg+0x39c>)
 8000fae:	f001 f98a 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb8:	4885      	ldr	r0, [pc, #532]	; (80011d0 <display7Seg+0x39c>)
 8000fba:	f001 f984 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc4:	4882      	ldr	r0, [pc, #520]	; (80011d0 <display7Seg+0x39c>)
 8000fc6:	f001 f97e 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8000fca:	e12e      	b.n	800122a <display7Seg+0x3f6>
	case 4:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd2:	487f      	ldr	r0, [pc, #508]	; (80011d0 <display7Seg+0x39c>)
 8000fd4:	f001 f977 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fde:	487c      	ldr	r0, [pc, #496]	; (80011d0 <display7Seg+0x39c>)
 8000fe0:	f001 f971 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fea:	4879      	ldr	r0, [pc, #484]	; (80011d0 <display7Seg+0x39c>)
 8000fec:	f001 f96b 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff6:	4876      	ldr	r0, [pc, #472]	; (80011d0 <display7Seg+0x39c>)
 8000ff8:	f001 f965 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001002:	4873      	ldr	r0, [pc, #460]	; (80011d0 <display7Seg+0x39c>)
 8001004:	f001 f95f 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100e:	4870      	ldr	r0, [pc, #448]	; (80011d0 <display7Seg+0x39c>)
 8001010:	f001 f959 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101a:	486d      	ldr	r0, [pc, #436]	; (80011d0 <display7Seg+0x39c>)
 800101c:	f001 f953 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001020:	e103      	b.n	800122a <display7Seg+0x3f6>
	case 5:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	4869      	ldr	r0, [pc, #420]	; (80011d0 <display7Seg+0x39c>)
 800102a:	f001 f94c 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	4866      	ldr	r0, [pc, #408]	; (80011d0 <display7Seg+0x39c>)
 8001036:	f001 f946 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001040:	4863      	ldr	r0, [pc, #396]	; (80011d0 <display7Seg+0x39c>)
 8001042:	f001 f940 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	4860      	ldr	r0, [pc, #384]	; (80011d0 <display7Seg+0x39c>)
 800104e:	f001 f93a 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001058:	485d      	ldr	r0, [pc, #372]	; (80011d0 <display7Seg+0x39c>)
 800105a:	f001 f934 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001064:	485a      	ldr	r0, [pc, #360]	; (80011d0 <display7Seg+0x39c>)
 8001066:	f001 f92e 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001070:	4857      	ldr	r0, [pc, #348]	; (80011d0 <display7Seg+0x39c>)
 8001072:	f001 f928 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001076:	e0d8      	b.n	800122a <display7Seg+0x3f6>
	case 6:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107e:	4854      	ldr	r0, [pc, #336]	; (80011d0 <display7Seg+0x39c>)
 8001080:	f001 f921 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108a:	4851      	ldr	r0, [pc, #324]	; (80011d0 <display7Seg+0x39c>)
 800108c:	f001 f91b 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001096:	484e      	ldr	r0, [pc, #312]	; (80011d0 <display7Seg+0x39c>)
 8001098:	f001 f915 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a2:	484b      	ldr	r0, [pc, #300]	; (80011d0 <display7Seg+0x39c>)
 80010a4:	f001 f90f 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ae:	4848      	ldr	r0, [pc, #288]	; (80011d0 <display7Seg+0x39c>)
 80010b0:	f001 f909 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ba:	4845      	ldr	r0, [pc, #276]	; (80011d0 <display7Seg+0x39c>)
 80010bc:	f001 f903 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c6:	4842      	ldr	r0, [pc, #264]	; (80011d0 <display7Seg+0x39c>)
 80010c8:	f001 f8fd 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 80010cc:	e0ad      	b.n	800122a <display7Seg+0x3f6>
	case 7:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	483e      	ldr	r0, [pc, #248]	; (80011d0 <display7Seg+0x39c>)
 80010d6:	f001 f8f6 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e0:	483b      	ldr	r0, [pc, #236]	; (80011d0 <display7Seg+0x39c>)
 80010e2:	f001 f8f0 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ec:	4838      	ldr	r0, [pc, #224]	; (80011d0 <display7Seg+0x39c>)
 80010ee:	f001 f8ea 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f8:	4835      	ldr	r0, [pc, #212]	; (80011d0 <display7Seg+0x39c>)
 80010fa:	f001 f8e4 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001104:	4832      	ldr	r0, [pc, #200]	; (80011d0 <display7Seg+0x39c>)
 8001106:	f001 f8de 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001110:	482f      	ldr	r0, [pc, #188]	; (80011d0 <display7Seg+0x39c>)
 8001112:	f001 f8d8 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111c:	482c      	ldr	r0, [pc, #176]	; (80011d0 <display7Seg+0x39c>)
 800111e:	f001 f8d2 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001122:	e082      	b.n	800122a <display7Seg+0x3f6>
	case 8:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4829      	ldr	r0, [pc, #164]	; (80011d0 <display7Seg+0x39c>)
 800112c:	f001 f8cb 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <display7Seg+0x39c>)
 8001138:	f001 f8c5 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001142:	4823      	ldr	r0, [pc, #140]	; (80011d0 <display7Seg+0x39c>)
 8001144:	f001 f8bf 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114e:	4820      	ldr	r0, [pc, #128]	; (80011d0 <display7Seg+0x39c>)
 8001150:	f001 f8b9 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	481d      	ldr	r0, [pc, #116]	; (80011d0 <display7Seg+0x39c>)
 800115c:	f001 f8b3 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001166:	481a      	ldr	r0, [pc, #104]	; (80011d0 <display7Seg+0x39c>)
 8001168:	f001 f8ad 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001172:	4817      	ldr	r0, [pc, #92]	; (80011d0 <display7Seg+0x39c>)
 8001174:	f001 f8a7 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001178:	e057      	b.n	800122a <display7Seg+0x3f6>
	case 9:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	4813      	ldr	r0, [pc, #76]	; (80011d0 <display7Seg+0x39c>)
 8001182:	f001 f8a0 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <display7Seg+0x39c>)
 800118e:	f001 f89a 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <display7Seg+0x39c>)
 800119a:	f001 f894 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <display7Seg+0x39c>)
 80011a6:	f001 f88e 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <display7Seg+0x39c>)
 80011b2:	f001 f888 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <display7Seg+0x39c>)
 80011be:	f001 f882 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c8:	4801      	ldr	r0, [pc, #4]	; (80011d0 <display7Seg+0x39c>)
 80011ca:	f001 f87c 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 80011ce:	e02c      	b.n	800122a <display7Seg+0x3f6>
 80011d0:	40010800 	.word	0x40010800
	default:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011da:	4816      	ldr	r0, [pc, #88]	; (8001234 <display7Seg+0x400>)
 80011dc:	f001 f873 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <display7Seg+0x400>)
 80011e8:	f001 f86d 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <display7Seg+0x400>)
 80011f4:	f001 f867 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <display7Seg+0x400>)
 8001200:	f001 f861 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	480a      	ldr	r0, [pc, #40]	; (8001234 <display7Seg+0x400>)
 800120c:	f001 f85b 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <display7Seg+0x400>)
 8001218:	f001 f855 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <display7Seg+0x400>)
 8001224:	f001 f84f 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001228:	bf00      	nop
	}
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40010800 	.word	0x40010800

08001238 <clearTrafficDisplay>:
	}
	//display7Seg(led_buffer[index]);
}


void clearTrafficDisplay(){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <clearTrafficDisplay+0x44>)
 8001242:	f001 f840 	bl	80022c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	480c      	ldr	r0, [pc, #48]	; (800127c <clearTrafficDisplay+0x44>)
 800124c:	f001 f83b 	bl	80022c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2104      	movs	r1, #4
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <clearTrafficDisplay+0x44>)
 8001256:	f001 f836 	bl	80022c6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2110      	movs	r1, #16
 800125e:	4807      	ldr	r0, [pc, #28]	; (800127c <clearTrafficDisplay+0x44>)
 8001260:	f001 f831 	bl	80022c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2140      	movs	r1, #64	; 0x40
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <clearTrafficDisplay+0x44>)
 800126a:	f001 f82c 	bl	80022c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2120      	movs	r1, #32
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <clearTrafficDisplay+0x44>)
 8001274:	f001 f827 	bl	80022c6 <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40010800 	.word	0x40010800

08001280 <displayTrafficLight>:

void displayTrafficLight(int light1, int light2){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	switch(light1){
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d029      	beq.n	80012e4 <displayTrafficLight+0x64>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b03      	cmp	r3, #3
 8001294:	dc36      	bgt.n	8001304 <displayTrafficLight+0x84>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d003      	beq.n	80012a4 <displayTrafficLight+0x24>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d010      	beq.n	80012c4 <displayTrafficLight+0x44>
 80012a2:	e02f      	b.n	8001304 <displayTrafficLight+0x84>
	case RED_LIGHT:
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2102      	movs	r1, #2
 80012a8:	4837      	ldr	r0, [pc, #220]	; (8001388 <displayTrafficLight+0x108>)
 80012aa:	f001 f80c 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2108      	movs	r1, #8
 80012b2:	4835      	ldr	r0, [pc, #212]	; (8001388 <displayTrafficLight+0x108>)
 80012b4:	f001 f807 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2104      	movs	r1, #4
 80012bc:	4832      	ldr	r0, [pc, #200]	; (8001388 <displayTrafficLight+0x108>)
 80012be:	f001 f802 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 80012c2:	e01f      	b.n	8001304 <displayTrafficLight+0x84>
	case YELLOW_LIGHT:
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2102      	movs	r1, #2
 80012c8:	482f      	ldr	r0, [pc, #188]	; (8001388 <displayTrafficLight+0x108>)
 80012ca:	f000 fffc 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2108      	movs	r1, #8
 80012d2:	482d      	ldr	r0, [pc, #180]	; (8001388 <displayTrafficLight+0x108>)
 80012d4:	f000 fff7 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2104      	movs	r1, #4
 80012dc:	482a      	ldr	r0, [pc, #168]	; (8001388 <displayTrafficLight+0x108>)
 80012de:	f000 fff2 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 80012e2:	e00f      	b.n	8001304 <displayTrafficLight+0x84>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2102      	movs	r1, #2
 80012e8:	4827      	ldr	r0, [pc, #156]	; (8001388 <displayTrafficLight+0x108>)
 80012ea:	f000 ffec 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2108      	movs	r1, #8
 80012f2:	4825      	ldr	r0, [pc, #148]	; (8001388 <displayTrafficLight+0x108>)
 80012f4:	f000 ffe7 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2104      	movs	r1, #4
 80012fc:	4822      	ldr	r0, [pc, #136]	; (8001388 <displayTrafficLight+0x108>)
 80012fe:	f000 ffe2 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001302:	bf00      	nop
	}
	switch(light2){
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d029      	beq.n	800135e <displayTrafficLight+0xde>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2b03      	cmp	r3, #3
 800130e:	dc36      	bgt.n	800137e <displayTrafficLight+0xfe>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d003      	beq.n	800131e <displayTrafficLight+0x9e>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d010      	beq.n	800133e <displayTrafficLight+0xbe>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
		break;
	}
}
 800131c:	e02f      	b.n	800137e <displayTrafficLight+0xfe>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2110      	movs	r1, #16
 8001322:	4819      	ldr	r0, [pc, #100]	; (8001388 <displayTrafficLight+0x108>)
 8001324:	f000 ffcf 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	4816      	ldr	r0, [pc, #88]	; (8001388 <displayTrafficLight+0x108>)
 800132e:	f000 ffca 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2120      	movs	r1, #32
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <displayTrafficLight+0x108>)
 8001338:	f000 ffc5 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 800133c:	e01f      	b.n	800137e <displayTrafficLight+0xfe>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2110      	movs	r1, #16
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <displayTrafficLight+0x108>)
 8001344:	f000 ffbf 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <displayTrafficLight+0x108>)
 800134e:	f000 ffba 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2120      	movs	r1, #32
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <displayTrafficLight+0x108>)
 8001358:	f000 ffb5 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 800135c:	e00f      	b.n	800137e <displayTrafficLight+0xfe>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2110      	movs	r1, #16
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <displayTrafficLight+0x108>)
 8001364:	f000 ffaf 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2140      	movs	r1, #64	; 0x40
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <displayTrafficLight+0x108>)
 800136e:	f000 ffaa 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2120      	movs	r1, #32
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <displayTrafficLight+0x108>)
 8001378:	f000 ffa5 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 800137c:	bf00      	nop
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40010800 	.word	0x40010800

0800138c <update7SegBufferAuto>:
//}
//void change7SegIndexInAuto(){
//	segmentIndexAuto++;
//	if(segmentIndexAuto >= MAX_LED_SEGMENT) segmentIndexAuto = 0;
//}
void update7SegBufferAuto(){
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	if( segment1Counter < 10) led_buffer_auto[0] = 0;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <update7SegBufferAuto+0x5c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b09      	cmp	r3, #9
 8001396:	dc03      	bgt.n	80013a0 <update7SegBufferAuto+0x14>
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <update7SegBufferAuto+0x60>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e009      	b.n	80013b4 <update7SegBufferAuto+0x28>
	else led_buffer_auto[0] = segment1Counter / 10;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <update7SegBufferAuto+0x5c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <update7SegBufferAuto+0x64>)
 80013a6:	fb82 1203 	smull	r1, r2, r2, r3
 80013aa:	1092      	asrs	r2, r2, #2
 80013ac:	17db      	asrs	r3, r3, #31
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <update7SegBufferAuto+0x60>)
 80013b2:	6013      	str	r3, [r2, #0]
	led_buffer_auto[1] = segment1Counter % 10;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <update7SegBufferAuto+0x5c>)
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <update7SegBufferAuto+0x64>)
 80013ba:	fb83 2301 	smull	r2, r3, r3, r1
 80013be:	109a      	asrs	r2, r3, #2
 80013c0:	17cb      	asrs	r3, r1, #31
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	1aca      	subs	r2, r1, r3
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <update7SegBufferAuto+0x60>)
 80013d0:	605a      	str	r2, [r3, #4]
	led_buffer_auto[2] = 0;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <update7SegBufferAuto+0x60>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
	led_buffer_auto[3] = 1;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <update7SegBufferAuto+0x60>)
 80013da:	2201      	movs	r2, #1
 80013dc:	60da      	str	r2, [r3, #12]
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000064 	.word	0x20000064
 80013ec:	20000074 	.word	0x20000074
 80013f0:	66666667 	.word	0x66666667

080013f4 <update7SegBufferManual>:
void update7SegBufferManual(){
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	led_buffer_manual[0] = tempCounter / 10;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <update7SegBufferManual+0x7c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <update7SegBufferManual+0x80>)
 80013fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001402:	1092      	asrs	r2, r2, #2
 8001404:	17db      	asrs	r3, r3, #31
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <update7SegBufferManual+0x84>)
 800140a:	6013      	str	r3, [r2, #0]
	led_buffer_manual[1] = tempCounter % 10;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <update7SegBufferManual+0x7c>)
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <update7SegBufferManual+0x80>)
 8001412:	fb83 2301 	smull	r2, r3, r3, r1
 8001416:	109a      	asrs	r2, r3, #2
 8001418:	17cb      	asrs	r3, r1, #31
 800141a:	1ad2      	subs	r2, r2, r3
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	1aca      	subs	r2, r1, r3
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <update7SegBufferManual+0x84>)
 8001428:	605a      	str	r2, [r3, #4]
	led_buffer_manual[2] = 0;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <update7SegBufferManual+0x84>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
	if(isRedMode) led_buffer_manual[3] = 1;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <update7SegBufferManual+0x88>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <update7SegBufferManual+0x4c>
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <update7SegBufferManual+0x84>)
 800143a:	2201      	movs	r2, #1
 800143c:	60da      	str	r2, [r3, #12]
	else if (isYellowMode) led_buffer_manual[3] = 1;
	else if (isGreenMode) led_buffer_manual[3] = 1;
	else led_buffer_manual[3] = 0;
}
 800143e:	e012      	b.n	8001466 <update7SegBufferManual+0x72>
	else if (isYellowMode) led_buffer_manual[3] = 1;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <update7SegBufferManual+0x8c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <update7SegBufferManual+0x5c>
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <update7SegBufferManual+0x84>)
 800144a:	2201      	movs	r2, #1
 800144c:	60da      	str	r2, [r3, #12]
}
 800144e:	e00a      	b.n	8001466 <update7SegBufferManual+0x72>
	else if (isGreenMode) led_buffer_manual[3] = 1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <update7SegBufferManual+0x90>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <update7SegBufferManual+0x6c>
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <update7SegBufferManual+0x84>)
 800145a:	2201      	movs	r2, #1
 800145c:	60da      	str	r2, [r3, #12]
}
 800145e:	e002      	b.n	8001466 <update7SegBufferManual+0x72>
	else led_buffer_manual[3] = 0;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <update7SegBufferManual+0x84>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000060 	.word	0x20000060
 8001474:	66666667 	.word	0x66666667
 8001478:	20000084 	.word	0x20000084
 800147c:	20000054 	.word	0x20000054
 8001480:	20000058 	.word	0x20000058
 8001484:	2000005c 	.word	0x2000005c

08001488 <display7SegAuto>:

void display7SegAuto(int index){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d85e      	bhi.n	8001554 <display7SegAuto+0xcc>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <display7SegAuto+0x14>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014ad 	.word	0x080014ad
 80014a0:	080014d7 	.word	0x080014d7
 80014a4:	08001501 	.word	0x08001501
 80014a8:	0800152b 	.word	0x0800152b
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2110      	movs	r1, #16
 80014b0:	482e      	ldr	r0, [pc, #184]	; (800156c <display7SegAuto+0xe4>)
 80014b2:	f000 ff08 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2120      	movs	r1, #32
 80014ba:	482c      	ldr	r0, [pc, #176]	; (800156c <display7SegAuto+0xe4>)
 80014bc:	f000 ff03 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2140      	movs	r1, #64	; 0x40
 80014c4:	4829      	ldr	r0, [pc, #164]	; (800156c <display7SegAuto+0xe4>)
 80014c6:	f000 fefe 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	4827      	ldr	r0, [pc, #156]	; (800156c <display7SegAuto+0xe4>)
 80014d0:	f000 fef9 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 80014d4:	e03f      	b.n	8001556 <display7SegAuto+0xce>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2110      	movs	r1, #16
 80014da:	4824      	ldr	r0, [pc, #144]	; (800156c <display7SegAuto+0xe4>)
 80014dc:	f000 fef3 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2120      	movs	r1, #32
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <display7SegAuto+0xe4>)
 80014e6:	f000 feee 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2140      	movs	r1, #64	; 0x40
 80014ee:	481f      	ldr	r0, [pc, #124]	; (800156c <display7SegAuto+0xe4>)
 80014f0:	f000 fee9 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <display7SegAuto+0xe4>)
 80014fa:	f000 fee4 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 80014fe:	e02a      	b.n	8001556 <display7SegAuto+0xce>
	case 2:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2110      	movs	r1, #16
 8001504:	4819      	ldr	r0, [pc, #100]	; (800156c <display7SegAuto+0xe4>)
 8001506:	f000 fede 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2120      	movs	r1, #32
 800150e:	4817      	ldr	r0, [pc, #92]	; (800156c <display7SegAuto+0xe4>)
 8001510:	f000 fed9 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	4814      	ldr	r0, [pc, #80]	; (800156c <display7SegAuto+0xe4>)
 800151a:	f000 fed4 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	4812      	ldr	r0, [pc, #72]	; (800156c <display7SegAuto+0xe4>)
 8001524:	f000 fecf 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001528:	e015      	b.n	8001556 <display7SegAuto+0xce>
	case 3:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2110      	movs	r1, #16
 800152e:	480f      	ldr	r0, [pc, #60]	; (800156c <display7SegAuto+0xe4>)
 8001530:	f000 fec9 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2120      	movs	r1, #32
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <display7SegAuto+0xe4>)
 800153a:	f000 fec4 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2140      	movs	r1, #64	; 0x40
 8001542:	480a      	ldr	r0, [pc, #40]	; (800156c <display7SegAuto+0xe4>)
 8001544:	f000 febf 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <display7SegAuto+0xe4>)
 800154e:	f000 feba 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001552:	e000      	b.n	8001556 <display7SegAuto+0xce>
	default:
		break;
 8001554:	bf00      	nop
	}
	display7Seg(led_buffer_auto[index]);
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <display7SegAuto+0xe8>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc68 	bl	8000e34 <display7Seg>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010c00 	.word	0x40010c00
 8001570:	20000074 	.word	0x20000074

08001574 <display7SegManual>:
void display7SegManual(int index){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d85e      	bhi.n	8001640 <display7SegManual+0xcc>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <display7SegManual+0x14>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001599 	.word	0x08001599
 800158c:	080015c3 	.word	0x080015c3
 8001590:	080015ed 	.word	0x080015ed
 8001594:	08001617 	.word	0x08001617
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2110      	movs	r1, #16
 800159c:	482e      	ldr	r0, [pc, #184]	; (8001658 <display7SegManual+0xe4>)
 800159e:	f000 fe92 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2120      	movs	r1, #32
 80015a6:	482c      	ldr	r0, [pc, #176]	; (8001658 <display7SegManual+0xe4>)
 80015a8:	f000 fe8d 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2140      	movs	r1, #64	; 0x40
 80015b0:	4829      	ldr	r0, [pc, #164]	; (8001658 <display7SegManual+0xe4>)
 80015b2:	f000 fe88 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	4827      	ldr	r0, [pc, #156]	; (8001658 <display7SegManual+0xe4>)
 80015bc:	f000 fe83 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 80015c0:	e03f      	b.n	8001642 <display7SegManual+0xce>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	2110      	movs	r1, #16
 80015c6:	4824      	ldr	r0, [pc, #144]	; (8001658 <display7SegManual+0xe4>)
 80015c8:	f000 fe7d 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2120      	movs	r1, #32
 80015d0:	4821      	ldr	r0, [pc, #132]	; (8001658 <display7SegManual+0xe4>)
 80015d2:	f000 fe78 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2140      	movs	r1, #64	; 0x40
 80015da:	481f      	ldr	r0, [pc, #124]	; (8001658 <display7SegManual+0xe4>)
 80015dc:	f000 fe73 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	481c      	ldr	r0, [pc, #112]	; (8001658 <display7SegManual+0xe4>)
 80015e6:	f000 fe6e 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 80015ea:	e02a      	b.n	8001642 <display7SegManual+0xce>
	case 2:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2110      	movs	r1, #16
 80015f0:	4819      	ldr	r0, [pc, #100]	; (8001658 <display7SegManual+0xe4>)
 80015f2:	f000 fe68 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2120      	movs	r1, #32
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <display7SegManual+0xe4>)
 80015fc:	f000 fe63 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2140      	movs	r1, #64	; 0x40
 8001604:	4814      	ldr	r0, [pc, #80]	; (8001658 <display7SegManual+0xe4>)
 8001606:	f000 fe5e 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	4812      	ldr	r0, [pc, #72]	; (8001658 <display7SegManual+0xe4>)
 8001610:	f000 fe59 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 8001614:	e015      	b.n	8001642 <display7SegManual+0xce>
	case 3:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2110      	movs	r1, #16
 800161a:	480f      	ldr	r0, [pc, #60]	; (8001658 <display7SegManual+0xe4>)
 800161c:	f000 fe53 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2120      	movs	r1, #32
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <display7SegManual+0xe4>)
 8001626:	f000 fe4e 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2140      	movs	r1, #64	; 0x40
 800162e:	480a      	ldr	r0, [pc, #40]	; (8001658 <display7SegManual+0xe4>)
 8001630:	f000 fe49 	bl	80022c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <display7SegManual+0xe4>)
 800163a:	f000 fe44 	bl	80022c6 <HAL_GPIO_WritePin>
		break;
 800163e:	e000      	b.n	8001642 <display7SegManual+0xce>
	default:
		break;
 8001640:	bf00      	nop
	}
	display7Seg(led_buffer_manual[index]);
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <display7SegManual+0xe8>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fbf2 	bl	8000e34 <display7Seg>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010c00 	.word	0x40010c00
 800165c:	20000084 	.word	0x20000084

08001660 <clear7Seg>:
void clear7Seg(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2110      	movs	r1, #16
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <clear7Seg+0x30>)
 800166a:	f000 fe2c 	bl	80022c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2120      	movs	r1, #32
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <clear7Seg+0x30>)
 8001674:	f000 fe27 	bl	80022c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <clear7Seg+0x30>)
 800167e:	f000 fe22 	bl	80022c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	4802      	ldr	r0, [pc, #8]	; (8001690 <clear7Seg+0x30>)
 8001688:	f000 fe1d 	bl	80022c6 <HAL_GPIO_WritePin>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40010c00 	.word	0x40010c00

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001698:	f000 fb14 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169c:	f000 f816 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a0:	f000 f89c 	bl	80017dc <MX_GPIO_Init>
  MX_TIM2_Init();
 80016a4:	f000 f84e 	bl	8001744 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <main+0x30>)
 80016aa:	f001 fa75 	bl	8002b98 <HAL_TIM_Base_Start_IT>
  state = IDLE;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <main+0x34>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  trafficLight_automatic();
 80016b4:	f7fe fe54 	bl	8000360 <trafficLight_automatic>
	  trafficLight_manual();
 80016b8:	f7ff f876 	bl	80007a8 <trafficLight_manual>
	  triggerLed();
 80016bc:	f7ff fb30 	bl	8000d20 <triggerLed>
	  trafficLight_automatic();
 80016c0:	e7f8      	b.n	80016b4 <main+0x20>
 80016c2:	bf00      	nop
 80016c4:	200000e8 	.word	0x200000e8
 80016c8:	200000e4 	.word	0x200000e4

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b090      	sub	sp, #64	; 0x40
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	2228      	movs	r2, #40	; 0x28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fe14 	bl	8003308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	2310      	movs	r3, #16
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fe10 	bl	8002328 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800170e:	f000 f8d1 	bl	80018b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f001 f87c 	bl	8002828 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001736:	f000 f8bd 	bl	80018b4 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3740      	adds	r7, #64	; 0x40
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM2_Init+0x94>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <MX_TIM2_Init+0x94>)
 800176a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800176e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_TIM2_Init+0x94>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_TIM2_Init+0x94>)
 8001778:	2209      	movs	r2, #9
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_TIM2_Init+0x94>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_TIM2_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <MX_TIM2_Init+0x94>)
 800178a:	f001 f9b5 	bl	8002af8 <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001794:	f000 f88e 	bl	80018b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_TIM2_Init+0x94>)
 80017a6:	f001 fb4b 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017b0:	f000 f880 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_TIM2_Init+0x94>)
 80017c2:	f001 fd13 	bl	80031ec <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017cc:	f000 f872 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200000e8 	.word	0x200000e8

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <MX_GPIO_Init+0xb4>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a26      	ldr	r2, [pc, #152]	; (8001890 <MX_GPIO_Init+0xb4>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_GPIO_Init+0xb4>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_GPIO_Init+0xb4>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a20      	ldr	r2, [pc, #128]	; (8001890 <MX_GPIO_Init+0xb4>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_GPIO_Init+0xb4>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8001820:	2200      	movs	r2, #0
 8001822:	f64f 617e 	movw	r1, #65150	; 0xfe7e
 8001826:	481b      	ldr	r0, [pc, #108]	; (8001894 <MX_GPIO_Init+0xb8>)
 8001828:	f000 fd4d 	bl	80022c6 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	21f0      	movs	r1, #240	; 0xf0
 8001830:	4819      	ldr	r0, [pc, #100]	; (8001898 <MX_GPIO_Init+0xbc>)
 8001832:	f000 fd48 	bl	80022c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           SEG7_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8001836:	f64f 637e 	movw	r3, #65150	; 0xfe7e
 800183a:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2302      	movs	r3, #2
 8001846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	4619      	mov	r1, r3
 800184e:	4811      	ldr	r0, [pc, #68]	; (8001894 <MX_GPIO_Init+0xb8>)
 8001850:	f000 fba8 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_SELECT_Pin BTN_MODIFY_Pin BTN_SET_Pin */
  GPIO_InitStruct.Pin = BTN_SELECT_Pin|BTN_MODIFY_Pin|BTN_SET_Pin;
 8001854:	2307      	movs	r3, #7
 8001856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	4619      	mov	r1, r3
 8001866:	480c      	ldr	r0, [pc, #48]	; (8001898 <MX_GPIO_Init+0xbc>)
 8001868:	f000 fb9c 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin;
 800186c:	23f0      	movs	r3, #240	; 0xf0
 800186e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2302      	movs	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_GPIO_Init+0xbc>)
 8001884:	f000 fb8e 	bl	8001fa4 <HAL_GPIO_Init>

}
 8001888:	bf00      	nop
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000
 8001894:	40010800 	.word	0x40010800
 8001898:	40010c00 	.word	0x40010c00

0800189c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	timer_run();
 80018a4:	f000 f8b4 	bl	8001a10 <timer_run>
	readKeyInput();
 80018a8:	f7fe fc50 	bl	800014c <readKeyInput>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <setTimerTraffic1>:
 *  Created on: Nov 16, 2022
 *      Author: pmt12
 */
#include "software_timer.h"

void setTimerTraffic1(int duration){
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	trafficTimer1_counter = duration/TIMER_CYCLE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <setTimerTraffic1+0x2c>)
 80018cc:	fb82 1203 	smull	r1, r2, r2, r3
 80018d0:	1092      	asrs	r2, r2, #2
 80018d2:	17db      	asrs	r3, r3, #31
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <setTimerTraffic1+0x30>)
 80018d8:	6013      	str	r3, [r2, #0]
	trafficTimer1_flag = 0;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <setTimerTraffic1+0x34>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	66666667 	.word	0x66666667
 80018f0:	200000b8 	.word	0x200000b8
 80018f4:	20000094 	.word	0x20000094

080018f8 <setTimerWait>:
void setTimerTraffic2(int duration){
	trafficTimer2_counter = duration/TIMER_CYCLE;
	trafficTimer2_flag = 0;
}

void setTimerWait(int duration){
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	waitTimer_counter = duration/TIMER_CYCLE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <setTimerWait+0x2c>)
 8001904:	fb82 1203 	smull	r1, r2, r2, r3
 8001908:	1092      	asrs	r2, r2, #2
 800190a:	17db      	asrs	r3, r3, #31
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	4a06      	ldr	r2, [pc, #24]	; (8001928 <setTimerWait+0x30>)
 8001910:	6013      	str	r3, [r2, #0]
	waitTimer_flag = 0;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <setTimerWait+0x34>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	66666667 	.word	0x66666667
 8001928:	200000c0 	.word	0x200000c0
 800192c:	2000009c 	.word	0x2000009c

08001930 <setTimerModify>:

void setTimerModify(int duration){
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	modifyTimer_counter = duration/TIMER_CYCLE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <setTimerModify+0x2c>)
 800193c:	fb82 1203 	smull	r1, r2, r2, r3
 8001940:	1092      	asrs	r2, r2, #2
 8001942:	17db      	asrs	r3, r3, #31
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	4a06      	ldr	r2, [pc, #24]	; (8001960 <setTimerModify+0x30>)
 8001948:	6013      	str	r3, [r2, #0]
	modifyTimer_flag = 0;
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <setTimerModify+0x34>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	66666667 	.word	0x66666667
 8001960:	200000c4 	.word	0x200000c4
 8001964:	200000a0 	.word	0x200000a0

08001968 <setTimerTriggerLed>:

void setTimerTriggerLed(int duration){
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	timerLed_counter = duration/TIMER_CYCLE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <setTimerTriggerLed+0x2c>)
 8001974:	fb82 1203 	smull	r1, r2, r2, r3
 8001978:	1092      	asrs	r2, r2, #2
 800197a:	17db      	asrs	r3, r3, #31
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <setTimerTriggerLed+0x30>)
 8001980:	6013      	str	r3, [r2, #0]
	timerLed_flag = 0;
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <setTimerTriggerLed+0x34>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	66666667 	.word	0x66666667
 8001998:	200000b4 	.word	0x200000b4
 800199c:	200000a4 	.word	0x200000a4

080019a0 <setTimerCounter1>:

void setTimerCounter1(int duration){
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	countDownTimer1_counter = duration/TIMER_CYCLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <setTimerCounter1+0x2c>)
 80019ac:	fb82 1203 	smull	r1, r2, r2, r3
 80019b0:	1092      	asrs	r2, r2, #2
 80019b2:	17db      	asrs	r3, r3, #31
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <setTimerCounter1+0x30>)
 80019b8:	6013      	str	r3, [r2, #0]
	countDownTimer1_flag = 0;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <setTimerCounter1+0x34>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	66666667 	.word	0x66666667
 80019d0:	200000c8 	.word	0x200000c8
 80019d4:	200000a8 	.word	0x200000a8

080019d8 <setTimerScanFreq>:
void setTimerCounter2(int duration){
	countDownTimer2_counter = duration/TIMER_CYCLE;
	countDownTimer2_flag = 0;
}

void setTimerScanFreq(int duration){
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	scanFreqTimer_counter = duration/TIMER_CYCLE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <setTimerScanFreq+0x2c>)
 80019e4:	fb82 1203 	smull	r1, r2, r2, r3
 80019e8:	1092      	asrs	r2, r2, #2
 80019ea:	17db      	asrs	r3, r3, #31
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <setTimerScanFreq+0x30>)
 80019f0:	6013      	str	r3, [r2, #0]
	scanFreqTimer_flag = 0;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <setTimerScanFreq+0x34>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	66666667 	.word	0x66666667
 8001a08:	200000d0 	.word	0x200000d0
 8001a0c:	200000b0 	.word	0x200000b0

08001a10 <timer_run>:

void timer_run(){
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	if(trafficTimer1_counter >= 0){
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <timer_run+0x10c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0b      	blt.n	8001a34 <timer_run+0x24>
		trafficTimer1_counter --;
 8001a1c:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <timer_run+0x10c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <timer_run+0x10c>)
 8001a24:	6013      	str	r3, [r2, #0]
		if(trafficTimer1_counter == 0) trafficTimer1_flag = 1;
 8001a26:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <timer_run+0x10c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <timer_run+0x24>
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <timer_run+0x110>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
	}
	if(trafficTimer2_counter >= 0){
 8001a34:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <timer_run+0x114>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0b      	blt.n	8001a54 <timer_run+0x44>
		trafficTimer2_counter --;
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <timer_run+0x114>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	4a38      	ldr	r2, [pc, #224]	; (8001b24 <timer_run+0x114>)
 8001a44:	6013      	str	r3, [r2, #0]
		if(trafficTimer2_counter == 0) trafficTimer2_flag = 1;
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <timer_run+0x114>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <timer_run+0x44>
 8001a4e:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <timer_run+0x118>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
	}
	if(waitTimer_counter >= 0){
 8001a54:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <timer_run+0x11c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0b      	blt.n	8001a74 <timer_run+0x64>
		waitTimer_counter --;
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <timer_run+0x11c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	4a32      	ldr	r2, [pc, #200]	; (8001b2c <timer_run+0x11c>)
 8001a64:	6013      	str	r3, [r2, #0]
		if(waitTimer_counter == 0) waitTimer_flag = 1;
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <timer_run+0x11c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <timer_run+0x64>
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <timer_run+0x120>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
	}
	if(modifyTimer_counter >= 0){
 8001a74:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <timer_run+0x124>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0b      	blt.n	8001a94 <timer_run+0x84>
		modifyTimer_counter --;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <timer_run+0x124>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <timer_run+0x124>)
 8001a84:	6013      	str	r3, [r2, #0]
		if(modifyTimer_counter == 0) modifyTimer_flag = 1;
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <timer_run+0x124>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <timer_run+0x84>
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <timer_run+0x128>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
	}
	if(timerLed_counter >= 0){
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <timer_run+0x12c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0b      	blt.n	8001ab4 <timer_run+0xa4>
		timerLed_counter --;
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <timer_run+0x12c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <timer_run+0x12c>)
 8001aa4:	6013      	str	r3, [r2, #0]
		if(timerLed_counter == 0) timerLed_flag = 1;
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <timer_run+0x12c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d102      	bne.n	8001ab4 <timer_run+0xa4>
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <timer_run+0x130>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer1_counter >= 0){
 8001ab4:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <timer_run+0x134>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0b      	blt.n	8001ad4 <timer_run+0xc4>
		countDownTimer1_counter --;
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <timer_run+0x134>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	4a20      	ldr	r2, [pc, #128]	; (8001b44 <timer_run+0x134>)
 8001ac4:	6013      	str	r3, [r2, #0]
		if(countDownTimer1_counter == 0) countDownTimer1_flag = 1;
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <timer_run+0x134>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <timer_run+0xc4>
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <timer_run+0x138>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer2_counter >= 0){
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <timer_run+0x13c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0b      	blt.n	8001af4 <timer_run+0xe4>
		countDownTimer2_counter --;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <timer_run+0x13c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <timer_run+0x13c>)
 8001ae4:	6013      	str	r3, [r2, #0]
		if(countDownTimer2_counter == 0) countDownTimer2_flag = 1;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <timer_run+0x13c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <timer_run+0xe4>
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <timer_run+0x140>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
	}
	if(scanFreqTimer_counter >= 0){
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <timer_run+0x144>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0b      	blt.n	8001b14 <timer_run+0x104>
		scanFreqTimer_counter --;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <timer_run+0x144>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <timer_run+0x144>)
 8001b04:	6013      	str	r3, [r2, #0]
		if(scanFreqTimer_counter == 0) scanFreqTimer_flag = 1;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <timer_run+0x144>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <timer_run+0x104>
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <timer_run+0x148>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
	}
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	200000b8 	.word	0x200000b8
 8001b20:	20000094 	.word	0x20000094
 8001b24:	200000bc 	.word	0x200000bc
 8001b28:	20000098 	.word	0x20000098
 8001b2c:	200000c0 	.word	0x200000c0
 8001b30:	2000009c 	.word	0x2000009c
 8001b34:	200000c4 	.word	0x200000c4
 8001b38:	200000a0 	.word	0x200000a0
 8001b3c:	200000b4 	.word	0x200000b4
 8001b40:	200000a4 	.word	0x200000a4
 8001b44:	200000c8 	.word	0x200000c8
 8001b48:	200000a8 	.word	0x200000a8
 8001b4c:	200000cc 	.word	0x200000cc
 8001b50:	200000ac 	.word	0x200000ac
 8001b54:	200000d0 	.word	0x200000d0
 8001b58:	200000b0 	.word	0x200000b0

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_MspInit+0x60>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_MspInit+0x60>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d113      	bne.n	8001bfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_TIM_Base_MspInit+0x44>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_TIM_Base_MspInit+0x44>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_TIM_Base_MspInit+0x44>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	201c      	movs	r0, #28
 8001bf0:	f000 f9a1 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf4:	201c      	movs	r0, #28
 8001bf6:	f000 f9ba 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4e:	f000 f87f 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM2_IRQHandler+0x10>)
 8001c5e:	f000 ffe7 	bl	8002c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200000e8 	.word	0x200000e8

08001c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c78:	480c      	ldr	r0, [pc, #48]	; (8001cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7a:	490d      	ldr	r1, [pc, #52]	; (8001cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c90:	4c0a      	ldr	r4, [pc, #40]	; (8001cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c9e:	f7ff ffe5 	bl	8001c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f001 fb0d 	bl	80032c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ca6:	f7ff fcf5 	bl	8001694 <main>
  bx lr
 8001caa:	4770      	bx	lr
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001cb4:	08003358 	.word	0x08003358
  ldr r2, =_sbss
 8001cb8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001cbc:	20000134 	.word	0x20000134

08001cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC1_2_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_Init+0x28>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_Init+0x28>)
 8001cce:	f043 0310 	orr.w	r3, r3, #16
 8001cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 f923 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cda:	200f      	movs	r0, #15
 8001cdc:	f000 f808 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce0:	f7ff ff3c 	bl	8001b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40022000 	.word	0x40022000

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f93b 	bl	8001f8a <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f000 f903 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	20000014 	.word	0x20000014
 8001d4c:	20000010 	.word	0x20000010

08001d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_IncTick+0x1c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_IncTick+0x20>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <HAL_IncTick+0x20>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000014 	.word	0x20000014
 8001d70:	20000130 	.word	0x20000130

08001d74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_GetTick+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000130 	.word	0x20000130

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4906      	ldr	r1, [pc, #24]	; (8001e20 <__NVIC_EnableIRQ+0x34>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	; (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	; (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f7ff ff90 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff2d 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff42 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff90 	bl	8001e78 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5f 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff35 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa2 	bl	8001edc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b08b      	sub	sp, #44	; 0x2c
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb6:	e148      	b.n	800224a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 8137 	bne.w	8002244 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4aa3      	ldr	r2, [pc, #652]	; (8002268 <HAL_GPIO_Init+0x2c4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d05e      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8001fe0:	4aa1      	ldr	r2, [pc, #644]	; (8002268 <HAL_GPIO_Init+0x2c4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d875      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 8001fe6:	4aa1      	ldr	r2, [pc, #644]	; (800226c <HAL_GPIO_Init+0x2c8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d058      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8001fec:	4a9f      	ldr	r2, [pc, #636]	; (800226c <HAL_GPIO_Init+0x2c8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d86f      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 8001ff2:	4a9f      	ldr	r2, [pc, #636]	; (8002270 <HAL_GPIO_Init+0x2cc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d052      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8001ff8:	4a9d      	ldr	r2, [pc, #628]	; (8002270 <HAL_GPIO_Init+0x2cc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d869      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 8001ffe:	4a9d      	ldr	r2, [pc, #628]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d04c      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8002004:	4a9b      	ldr	r2, [pc, #620]	; (8002274 <HAL_GPIO_Init+0x2d0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d863      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 800200a:	4a9b      	ldr	r2, [pc, #620]	; (8002278 <HAL_GPIO_Init+0x2d4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d046      	beq.n	800209e <HAL_GPIO_Init+0xfa>
 8002010:	4a99      	ldr	r2, [pc, #612]	; (8002278 <HAL_GPIO_Init+0x2d4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d85d      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 8002016:	2b12      	cmp	r3, #18
 8002018:	d82a      	bhi.n	8002070 <HAL_GPIO_Init+0xcc>
 800201a:	2b12      	cmp	r3, #18
 800201c:	d859      	bhi.n	80020d2 <HAL_GPIO_Init+0x12e>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <HAL_GPIO_Init+0x80>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	0800209f 	.word	0x0800209f
 8002028:	08002079 	.word	0x08002079
 800202c:	0800208b 	.word	0x0800208b
 8002030:	080020cd 	.word	0x080020cd
 8002034:	080020d3 	.word	0x080020d3
 8002038:	080020d3 	.word	0x080020d3
 800203c:	080020d3 	.word	0x080020d3
 8002040:	080020d3 	.word	0x080020d3
 8002044:	080020d3 	.word	0x080020d3
 8002048:	080020d3 	.word	0x080020d3
 800204c:	080020d3 	.word	0x080020d3
 8002050:	080020d3 	.word	0x080020d3
 8002054:	080020d3 	.word	0x080020d3
 8002058:	080020d3 	.word	0x080020d3
 800205c:	080020d3 	.word	0x080020d3
 8002060:	080020d3 	.word	0x080020d3
 8002064:	080020d3 	.word	0x080020d3
 8002068:	08002081 	.word	0x08002081
 800206c:	08002095 	.word	0x08002095
 8002070:	4a82      	ldr	r2, [pc, #520]	; (800227c <HAL_GPIO_Init+0x2d8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002076:	e02c      	b.n	80020d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	623b      	str	r3, [r7, #32]
          break;
 800207e:	e029      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	3304      	adds	r3, #4
 8002086:	623b      	str	r3, [r7, #32]
          break;
 8002088:	e024      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	3308      	adds	r3, #8
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e01f      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	330c      	adds	r3, #12
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e01a      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020a6:	2304      	movs	r3, #4
 80020a8:	623b      	str	r3, [r7, #32]
          break;
 80020aa:	e013      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b4:	2308      	movs	r3, #8
 80020b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	611a      	str	r2, [r3, #16]
          break;
 80020be:	e009      	b.n	80020d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c0:	2308      	movs	r3, #8
 80020c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	615a      	str	r2, [r3, #20]
          break;
 80020ca:	e003      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
          break;
 80020d0:	e000      	b.n	80020d4 <HAL_GPIO_Init+0x130>
          break;
 80020d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2bff      	cmp	r3, #255	; 0xff
 80020d8:	d801      	bhi.n	80020de <HAL_GPIO_Init+0x13a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	e001      	b.n	80020e2 <HAL_GPIO_Init+0x13e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2bff      	cmp	r3, #255	; 0xff
 80020e8:	d802      	bhi.n	80020f0 <HAL_GPIO_Init+0x14c>
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	e002      	b.n	80020f6 <HAL_GPIO_Init+0x152>
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	3b08      	subs	r3, #8
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	210f      	movs	r1, #15
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	401a      	ands	r2, r3
 8002108:	6a39      	ldr	r1, [r7, #32]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	431a      	orrs	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8090 	beq.w	8002244 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_GPIO_Init+0x2dc>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a55      	ldr	r2, [pc, #340]	; (8002280 <HAL_GPIO_Init+0x2dc>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_GPIO_Init+0x2dc>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800213c:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_GPIO_Init+0x2e0>)
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a49      	ldr	r2, [pc, #292]	; (8002288 <HAL_GPIO_Init+0x2e4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d00d      	beq.n	8002184 <HAL_GPIO_Init+0x1e0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a48      	ldr	r2, [pc, #288]	; (800228c <HAL_GPIO_Init+0x2e8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d007      	beq.n	8002180 <HAL_GPIO_Init+0x1dc>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a47      	ldr	r2, [pc, #284]	; (8002290 <HAL_GPIO_Init+0x2ec>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_GPIO_Init+0x1d8>
 8002178:	2302      	movs	r3, #2
 800217a:	e004      	b.n	8002186 <HAL_GPIO_Init+0x1e2>
 800217c:	2303      	movs	r3, #3
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x1e2>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_GPIO_Init+0x1e2>
 8002184:	2300      	movs	r3, #0
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	f002 0203 	and.w	r2, r2, #3
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	4093      	lsls	r3, r2
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002196:	493b      	ldr	r1, [pc, #236]	; (8002284 <HAL_GPIO_Init+0x2e0>)
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4937      	ldr	r1, [pc, #220]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4933      	ldr	r1, [pc, #204]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	492d      	ldr	r1, [pc, #180]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021e6:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4929      	ldr	r1, [pc, #164]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	4923      	ldr	r1, [pc, #140]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	608b      	str	r3, [r1, #8]
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	43db      	mvns	r3, r3
 8002216:	491f      	ldr	r1, [pc, #124]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 8002218:	4013      	ands	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4919      	ldr	r1, [pc, #100]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	43db      	mvns	r3, r3
 800223e:	4915      	ldr	r1, [pc, #84]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 8002240:	4013      	ands	r3, r2
 8002242:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	3301      	adds	r3, #1
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	f47f aeaf 	bne.w	8001fb8 <HAL_GPIO_Init+0x14>
  }
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	372c      	adds	r7, #44	; 0x2c
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	10320000 	.word	0x10320000
 800226c:	10310000 	.word	0x10310000
 8002270:	10220000 	.word	0x10220000
 8002274:	10210000 	.word	0x10210000
 8002278:	10120000 	.word	0x10120000
 800227c:	10110000 	.word	0x10110000
 8002280:	40021000 	.word	0x40021000
 8002284:	40010000 	.word	0x40010000
 8002288:	40010800 	.word	0x40010800
 800228c:	40010c00 	.word	0x40010c00
 8002290:	40011000 	.word	0x40011000
 8002294:	40010400 	.word	0x40010400

08002298 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e001      	b.n	80022ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	807b      	strh	r3, [r7, #2]
 80022d2:	4613      	mov	r3, r2
 80022d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d6:	787b      	ldrb	r3, [r7, #1]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022dc:	887a      	ldrh	r2, [r7, #2]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022e2:	e003      	b.n	80022ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	041a      	lsls	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	611a      	str	r2, [r3, #16]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002308:	887a      	ldrh	r2, [r7, #2]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4013      	ands	r3, r2
 800230e:	041a      	lsls	r2, r3, #16
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43d9      	mvns	r1, r3
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	400b      	ands	r3, r1
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e26c      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8087 	beq.w	8002456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002348:	4b92      	ldr	r3, [pc, #584]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00c      	beq.n	800236e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002354:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d112      	bne.n	8002386 <HAL_RCC_OscConfig+0x5e>
 8002360:	4b8c      	ldr	r3, [pc, #560]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d10b      	bne.n	8002386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236e:	4b89      	ldr	r3, [pc, #548]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d06c      	beq.n	8002454 <HAL_RCC_OscConfig+0x12c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d168      	bne.n	8002454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e246      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x76>
 8002390:	4b80      	ldr	r3, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7f      	ldr	r2, [pc, #508]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e02e      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x98>
 80023a6:	4b7b      	ldr	r3, [pc, #492]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7a      	ldr	r2, [pc, #488]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b78      	ldr	r3, [pc, #480]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a77      	ldr	r2, [pc, #476]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0xbc>
 80023ca:	4b72      	ldr	r3, [pc, #456]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a71      	ldr	r2, [pc, #452]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6e      	ldr	r2, [pc, #440]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 80023e4:	4b6b      	ldr	r3, [pc, #428]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6a      	ldr	r2, [pc, #424]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a67      	ldr	r2, [pc, #412]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fcb6 	bl	8001d74 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fcb2 	bl	8001d74 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1fa      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0xe4>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fca2 	bl	8001d74 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fc9e 	bl	8001d74 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1e6      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x10c>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d063      	beq.n	800252a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002462:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800246e:	4b49      	ldr	r3, [pc, #292]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b08      	cmp	r3, #8
 8002478:	d11c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x18c>
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d116      	bne.n	80024b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x176>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e1ba      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4939      	ldr	r1, [pc, #228]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	e03a      	b.n	800252a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7ff fc57 	bl	8001d74 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ca:	f7ff fc53 	bl	8001d74 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e19b      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4927      	ldr	r1, [pc, #156]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff fc36 	bl	8001d74 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250c:	f7ff fc32 	bl	8001d74 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e17a      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d03a      	beq.n	80025ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d019      	beq.n	8002572 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <HAL_RCC_OscConfig+0x274>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7ff fc16 	bl	8001d74 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254c:	f7ff fc12 	bl	8001d74 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e15a      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800256a:	2001      	movs	r0, #1
 800256c:	f000 faa6 	bl	8002abc <RCC_Delay>
 8002570:	e01c      	b.n	80025ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_RCC_OscConfig+0x274>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff fbfc 	bl	8001d74 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257e:	e00f      	b.n	80025a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7ff fbf8 	bl	8001d74 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d908      	bls.n	80025a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e140      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	42420000 	.word	0x42420000
 800259c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b9e      	ldr	r3, [pc, #632]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e9      	bne.n	8002580 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a6 	beq.w	8002706 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b97      	ldr	r3, [pc, #604]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b94      	ldr	r3, [pc, #592]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a93      	ldr	r2, [pc, #588]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b91      	ldr	r3, [pc, #580]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b8e      	ldr	r3, [pc, #568]	; (8002820 <HAL_RCC_OscConfig+0x4f8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f2:	4b8b      	ldr	r3, [pc, #556]	; (8002820 <HAL_RCC_OscConfig+0x4f8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a8a      	ldr	r2, [pc, #552]	; (8002820 <HAL_RCC_OscConfig+0x4f8>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fe:	f7ff fbb9 	bl	8001d74 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002606:	f7ff fbb5 	bl	8001d74 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0fd      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x312>
 800262c:	4b7b      	ldr	r3, [pc, #492]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a7a      	ldr	r2, [pc, #488]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	e02d      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x334>
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	4b73      	ldr	r3, [pc, #460]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a72      	ldr	r2, [pc, #456]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	e01c      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x356>
 8002664:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a6c      	ldr	r2, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a69      	ldr	r2, [pc, #420]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	e00b      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a66      	ldr	r2, [pc, #408]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	4b64      	ldr	r3, [pc, #400]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a63      	ldr	r2, [pc, #396]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d015      	beq.n	80026ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7ff fb69 	bl	8001d74 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7ff fb65 	bl	8001d74 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e0ab      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	4b57      	ldr	r3, [pc, #348]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ee      	beq.n	80026a6 <HAL_RCC_OscConfig+0x37e>
 80026c8:	e014      	b.n	80026f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fb53 	bl	8001d74 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7ff fb4f 	bl	8001d74 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e095      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	4b4c      	ldr	r3, [pc, #304]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ee      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b48      	ldr	r3, [pc, #288]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a47      	ldr	r2, [pc, #284]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002704:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8081 	beq.w	8002812 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002710:	4b42      	ldr	r3, [pc, #264]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d061      	beq.n	80027e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d146      	bne.n	80027b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x4fc>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff fb23 	bl	8001d74 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7ff fb1f 	bl	8001d74 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e067      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d108      	bne.n	800276c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	492d      	ldr	r1, [pc, #180]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a19      	ldr	r1, [r3, #32]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	430b      	orrs	r3, r1
 800277e:	4927      	ldr	r1, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_RCC_OscConfig+0x4fc>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7ff faf3 	bl	8001d74 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002792:	f7ff faef 	bl	8001d74 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e037      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x46a>
 80027b0:	e02f      	b.n	8002812 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <HAL_RCC_OscConfig+0x4fc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff fadc 	bl	8001d74 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7ff fad8 	bl	8001d74 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e020      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x498>
 80027de:	e018      	b.n	8002812 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e013      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
 8002824:	42420060 	.word	0x42420060

08002828 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0d0      	b.n	80029de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d910      	bls.n	800286c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	4965      	ldr	r1, [pc, #404]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0b8      	b.n	80029de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a58      	ldr	r2, [pc, #352]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800288e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	494d      	ldr	r1, [pc, #308]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d040      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d115      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e07f      	b.n	80029de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b41      	ldr	r3, [pc, #260]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e073      	b.n	80029de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e06b      	b.n	80029de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4936      	ldr	r1, [pc, #216]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7ff fa2c 	bl	8001d74 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7ff fa28 	bl	8001d74 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e053      	b.n	80029de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d210      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0207 	bic.w	r2, r3, #7
 800295e:	4922      	ldr	r1, [pc, #136]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e032      	b.n	80029de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4916      	ldr	r1, [pc, #88]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	490e      	ldr	r1, [pc, #56]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029b6:	f000 f821 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	490a      	ldr	r1, [pc, #40]	; (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029c8:	5ccb      	ldrb	r3, [r1, r3]
 80029ca:	fa22 f303 	lsr.w	r3, r2, r3
 80029ce:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x1cc>)
 80029d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1d0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff f98a 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40021000 	.word	0x40021000
 80029f0:	08003340 	.word	0x08003340
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	20000010 	.word	0x20000010

080029fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	b490      	push	{r4, r7}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a04:	1d3c      	adds	r4, r7, #4
 8002a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a0c:	f240 2301 	movw	r3, #513	; 0x201
 8002a10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d002      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x40>
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x46>
 8002a3a:	e02d      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3e:	623b      	str	r3, [r7, #32]
      break;
 8002a40:	e02d      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	0c9b      	lsrs	r3, r3, #18
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a4e:	4413      	add	r3, r2
 8002a50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0c5b      	lsrs	r3, r3, #17
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a6e:	4413      	add	r3, r2
 8002a70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7a:	fb02 f203 	mul.w	r2, r2, r3
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	e004      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	623b      	str	r3, [r7, #32]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9a:	623b      	str	r3, [r7, #32]
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3728      	adds	r7, #40	; 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc90      	pop	{r4, r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	08003330 	.word	0x08003330
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	007a1200 	.word	0x007a1200
 8002ab8:	003d0900 	.word	0x003d0900

08002abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <RCC_Delay+0x34>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <RCC_Delay+0x38>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0a5b      	lsrs	r3, r3, #9
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ad8:	bf00      	nop
  }
  while (Delay --);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	60fa      	str	r2, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f9      	bne.n	8002ad8 <RCC_Delay+0x1c>
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	2000000c 	.word	0x2000000c
 8002af4:	10624dd3 	.word	0x10624dd3

08002af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e041      	b.n	8002b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff f84e 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f000 fa6a 	bl	8003010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d001      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e035      	b.n	8002c1c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_TIM_Base_Start_IT+0x90>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_TIM_Base_Start_IT+0x4e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d004      	beq.n	8002be6 <HAL_TIM_Base_Start_IT+0x4e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <HAL_TIM_Base_Start_IT+0x94>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d111      	bne.n	8002c0a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b06      	cmp	r3, #6
 8002bf6:	d010      	beq.n	8002c1a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	e007      	b.n	8002c1a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0201 	orr.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40000400 	.word	0x40000400

08002c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0202 	mvn.w	r2, #2
 8002c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f9b1 	bl	8002fda <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f9a4 	bl	8002fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f9b3 	bl	8002fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0204 	mvn.w	r2, #4
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f987 	bl	8002fda <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f97a 	bl	8002fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f989 	bl	8002fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0208 	mvn.w	r2, #8
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f95d 	bl	8002fda <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f950 	bl	8002fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f95f 	bl	8002fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0210 	mvn.w	r2, #16
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f933 	bl	8002fda <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f926 	bl	8002fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f935 	bl	8002fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0201 	mvn.w	r2, #1
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fd74 	bl	800189c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d10e      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d107      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa67 	bl	80032ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8f9 	bl	8002ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0220 	mvn.w	r2, #32
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa32 	bl	800329c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_TIM_ConfigClockSource+0x18>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0b3      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x180>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e90:	d03e      	beq.n	8002f10 <HAL_TIM_ConfigClockSource+0xd0>
 8002e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e96:	f200 8087 	bhi.w	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	f000 8085 	beq.w	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea6:	d87f      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ea8:	2b70      	cmp	r3, #112	; 0x70
 8002eaa:	d01a      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0xa2>
 8002eac:	2b70      	cmp	r3, #112	; 0x70
 8002eae:	d87b      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002eb0:	2b60      	cmp	r3, #96	; 0x60
 8002eb2:	d050      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x116>
 8002eb4:	2b60      	cmp	r3, #96	; 0x60
 8002eb6:	d877      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002eb8:	2b50      	cmp	r3, #80	; 0x50
 8002eba:	d03c      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0xf6>
 8002ebc:	2b50      	cmp	r3, #80	; 0x50
 8002ebe:	d873      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d058      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x136>
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d86f      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ec8:	2b30      	cmp	r3, #48	; 0x30
 8002eca:	d064      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x156>
 8002ecc:	2b30      	cmp	r3, #48	; 0x30
 8002ece:	d86b      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d060      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x156>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d867      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d05c      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x156>
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d05a      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ee0:	e062      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6899      	ldr	r1, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f000 f95c 	bl	80031ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
      break;
 8002f0e:	e04e      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f000 f945 	bl	80031ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f32:	609a      	str	r2, [r3, #8]
      break;
 8002f34:	e03b      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 f8bc 	bl	80030c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2150      	movs	r1, #80	; 0x50
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f913 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002f54:	e02b      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 f8da 	bl	800311c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2160      	movs	r1, #96	; 0x60
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f903 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002f74:	e01b      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f000 f89c 	bl	80030c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f8f3 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002f94:	e00b      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f000 f8ea 	bl	800317a <TIM_ITRx_SetConfig>
        break;
 8002fa6:	e002      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <TIM_Base_SetConfig+0xa8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_Base_SetConfig+0x28>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0x28>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a22      	ldr	r2, [pc, #136]	; (80030bc <TIM_Base_SetConfig+0xac>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d108      	bne.n	800304a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <TIM_Base_SetConfig+0xa8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <TIM_Base_SetConfig+0x52>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d003      	beq.n	8003062 <TIM_Base_SetConfig+0x52>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <TIM_Base_SetConfig+0xac>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d108      	bne.n	8003074 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <TIM_Base_SetConfig+0xa8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d103      	bne.n	80030a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	615a      	str	r2, [r3, #20]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400

080030c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f023 030a 	bic.w	r3, r3, #10
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f023 0210 	bic.w	r2, r3, #16
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003146:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	031b      	lsls	r3, r3, #12
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003158:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	f043 0307 	orr.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	021a      	lsls	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	609a      	str	r2, [r3, #8]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003200:	2302      	movs	r3, #2
 8003202:	e041      	b.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a14      	ldr	r2, [pc, #80]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d004      	beq.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10c      	bne.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400

0800329c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	2600      	movs	r6, #0
 80032c4:	4d0c      	ldr	r5, [pc, #48]	; (80032f8 <__libc_init_array+0x38>)
 80032c6:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c8:	1b64      	subs	r4, r4, r5
 80032ca:	10a4      	asrs	r4, r4, #2
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	f000 f822 	bl	8003318 <_init>
 80032d4:	2600      	movs	r6, #0
 80032d6:	4d0a      	ldr	r5, [pc, #40]	; (8003300 <__libc_init_array+0x40>)
 80032d8:	4c0a      	ldr	r4, [pc, #40]	; (8003304 <__libc_init_array+0x44>)
 80032da:	1b64      	subs	r4, r4, r5
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	08003350 	.word	0x08003350
 80032fc:	08003350 	.word	0x08003350
 8003300:	08003350 	.word	0x08003350
 8003304:	08003354 	.word	0x08003354

08003308 <memset>:
 8003308:	4603      	mov	r3, r0
 800330a:	4402      	add	r2, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <_init>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr

08003324 <_fini>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr
