
CO3009_MCU_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003048  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003174  08003174  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003174  08003174  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003174  08003174  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800317c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000018  08003194  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003194  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009931  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a78  00000000  00000000  00029972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aff  00000000  00000000  0002c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b631  00000000  00000000  000432e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082616  00000000  00000000  0004e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0f2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000d0f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800313c 	.word	0x0800313c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800313c 	.word	0x0800313c

0800014c <readKeyInput>:
static uint8_t flagForLongPress3s[NUM_OF_BUTTONS];
static uint16_t counterLongPress3s[NUM_OF_BUTTONS];

int button_flag[NUM_OF_BUTTONS];

void readKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e09b      	b.n	8000290 <readKeyInput+0x144>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000158:	4a52      	ldr	r2, [pc, #328]	; (80002a4 <readKeyInput+0x158>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a51      	ldr	r2, [pc, #324]	; (80002a8 <readKeyInput+0x15c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800016a:	4a50      	ldr	r2, [pc, #320]	; (80002ac <readKeyInput+0x160>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a4c      	ldr	r2, [pc, #304]	; (80002a4 <readKeyInput+0x158>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]

		if(i == BTN_SELECT_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin);
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10b      	bne.n	800019a <readKeyInput+0x4e>
 8000182:	2101      	movs	r1, #1
 8000184:	484a      	ldr	r0, [pc, #296]	; (80002b0 <readKeyInput+0x164>)
 8000186:	f001 ff99 	bl	80020bc <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	4619      	mov	r1, r3
 800018e:	4a47      	ldr	r2, [pc, #284]	; (80002ac <readKeyInput+0x160>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	701a      	strb	r2, [r3, #0]
 8000198:	e01c      	b.n	80001d4 <readKeyInput+0x88>
		else if(i == BTN_MODIFY_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_MODIFY_GPIO_Port, BTN_MODIFY_Pin);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10b      	bne.n	80001b8 <readKeyInput+0x6c>
 80001a0:	2102      	movs	r1, #2
 80001a2:	4843      	ldr	r0, [pc, #268]	; (80002b0 <readKeyInput+0x164>)
 80001a4:	f001 ff8a 	bl	80020bc <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4619      	mov	r1, r3
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <readKeyInput+0x160>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	460a      	mov	r2, r1
 80001b4:	701a      	strb	r2, [r3, #0]
 80001b6:	e00d      	b.n	80001d4 <readKeyInput+0x88>
		else if(i == BTN_SET_INDEX) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_SET_GPIO_Port, BTN_SET_Pin);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d10a      	bne.n	80001d4 <readKeyInput+0x88>
 80001be:	2104      	movs	r1, #4
 80001c0:	483b      	ldr	r0, [pc, #236]	; (80002b0 <readKeyInput+0x164>)
 80001c2:	f001 ff7b 	bl	80020bc <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a38      	ldr	r2, [pc, #224]	; (80002ac <readKeyInput+0x160>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	460a      	mov	r2, r1
 80001d2:	701a      	strb	r2, [r3, #0]


		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 80001d4:	4a35      	ldr	r2, [pc, #212]	; (80002ac <readKeyInput+0x160>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	781a      	ldrb	r2, [r3, #0]
 80001dc:	4931      	ldr	r1, [pc, #196]	; (80002a4 <readKeyInput+0x158>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	440b      	add	r3, r1
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d123      	bne.n	8000230 <readKeyInput+0xe4>
 80001e8:	4a30      	ldr	r2, [pc, #192]	; (80002ac <readKeyInput+0x160>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	781a      	ldrb	r2, [r3, #0]
 80001f0:	492d      	ldr	r1, [pc, #180]	; (80002a8 <readKeyInput+0x15c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	440b      	add	r3, r1
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d119      	bne.n	8000230 <readKeyInput+0xe4>
			if (buttonBuffer[i] == BTN_RELEASED && debounceButtonBuffer1[i] == BTN_PRESSED) {
 80001fc:	4a2d      	ldr	r2, [pc, #180]	; (80002b4 <readKeyInput+0x168>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4413      	add	r3, r2
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d10a      	bne.n	800021e <readKeyInput+0xd2>
 8000208:	4a28      	ldr	r2, [pc, #160]	; (80002ac <readKeyInput+0x160>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d104      	bne.n	800021e <readKeyInput+0xd2>
				button_flag[i] = 1;
 8000214:	4a28      	ldr	r2, [pc, #160]	; (80002b8 <readKeyInput+0x16c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2101      	movs	r1, #1
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800021e:	4a23      	ldr	r2, [pc, #140]	; (80002ac <readKeyInput+0x160>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4413      	add	r3, r2
 8000224:	7819      	ldrb	r1, [r3, #0]
 8000226:	4a23      	ldr	r2, [pc, #140]	; (80002b4 <readKeyInput+0x168>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	460a      	mov	r2, r1
 800022e:	701a      	strb	r2, [r3, #0]
		}

		// LONGPRESSED 3S
		if (buttonBuffer[i] == BTN_PRESSED) {
 8000230:	4a20      	ldr	r2, [pc, #128]	; (80002b4 <readKeyInput+0x168>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d117      	bne.n	800026c <readKeyInput+0x120>
			if (counterLongPress3s[i] < PRESSED_DURATION_3S/TIMER_CYCLE) {
 800023c:	4a1f      	ldr	r2, [pc, #124]	; (80002bc <readKeyInput+0x170>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000244:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000248:	d20a      	bcs.n	8000260 <readKeyInput+0x114>
				counterLongPress3s[i]++;
 800024a:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <readKeyInput+0x170>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000252:	3301      	adds	r3, #1
 8000254:	b299      	uxth	r1, r3
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <readKeyInput+0x170>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800025e:	e014      	b.n	800028a <readKeyInput+0x13e>
			} else {
				flagForLongPress3s[i] = 1;
 8000260:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <readKeyInput+0x174>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	2201      	movs	r2, #1
 8000268:	701a      	strb	r2, [r3, #0]
 800026a:	e00e      	b.n	800028a <readKeyInput+0x13e>
			}
		} else {
			button_flag[i] = 0;
 800026c:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <readKeyInput+0x16c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2100      	movs	r1, #0
 8000272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterLongPress3s[i] = 0;
 8000276:	4a11      	ldr	r2, [pc, #68]	; (80002bc <readKeyInput+0x170>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2100      	movs	r1, #0
 800027c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPress3s[i] = 0;
 8000280:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <readKeyInput+0x174>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4413      	add	r3, r2
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < NUM_OF_BUTTONS; i++){
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	f77f af60 	ble.w	8000158 <readKeyInput+0xc>
		}
	}
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	2000003c 	.word	0x2000003c
 80002a8:	20000040 	.word	0x20000040
 80002ac:	20000038 	.word	0x20000038
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000034 	.word	0x20000034
 80002b8:	200000d8 	.word	0x200000d8
 80002bc:	20000048 	.word	0x20000048
 80002c0:	20000044 	.word	0x20000044

080002c4 <isPressedAndReleased>:
int isPressedAndReleased(int buttonIndex) {
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if (button_flag[buttonIndex] == 1) {
 80002cc:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <isPressedAndReleased+0x30>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d106      	bne.n	80002e6 <isPressedAndReleased+0x22>
		button_flag[buttonIndex] = 0;
 80002d8:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <isPressedAndReleased+0x30>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2100      	movs	r1, #0
 80002de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	e000      	b.n	80002e8 <isPressedAndReleased+0x24>
	}
	return 0;
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200000d8 	.word	0x200000d8

080002f8 <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0;
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	2b02      	cmp	r3, #2
 8000306:	d901      	bls.n	800030c <is_button_pressed+0x14>
 8000308:	2300      	movs	r3, #0
 800030a:	e007      	b.n	800031c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BTN_PRESSED);
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4a06      	ldr	r2, [pc, #24]	; (8000328 <is_button_pressed+0x30>)
 8000310:	5cd3      	ldrb	r3, [r2, r3]
 8000312:	2b00      	cmp	r3, #0
 8000314:	bf0c      	ite	eq
 8000316:	2301      	moveq	r3, #1
 8000318:	2300      	movne	r3, #0
 800031a:	b2db      	uxtb	r3, r3
}
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000034 	.word	0x20000034

0800032c <is_button_pressed_3s>:
unsigned char is_button_pressed_3s(unsigned char index) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	if(index >= NUM_OF_BUTTONS) return 0xff ;
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d901      	bls.n	8000340 <is_button_pressed_3s+0x14>
 800033c:	23ff      	movs	r3, #255	; 0xff
 800033e:	e007      	b.n	8000350 <is_button_pressed_3s+0x24>
	return (flagForLongPress3s[index] == 1) ;
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <is_button_pressed_3s+0x30>)
 8000344:	5cd3      	ldrb	r3, [r2, r3]
 8000346:	2b01      	cmp	r3, #1
 8000348:	bf0c      	ite	eq
 800034a:	2301      	moveq	r3, #1
 800034c:	2300      	movne	r3, #0
 800034e:	b2db      	uxtb	r3, r3
}
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	20000044 	.word	0x20000044

08000360 <trafficLight_automatic>:
#include "global.h"
#include "software_timer.h"
#include "led_segment_control.h"
#include "button.h"

void trafficLight_automatic(){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	switch(state){
 8000364:	4b88      	ldr	r3, [pc, #544]	; (8000588 <trafficLight_automatic+0x228>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b04      	cmp	r3, #4
 800036a:	f200 81fa 	bhi.w	8000762 <trafficLight_automatic+0x402>
 800036e:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <trafficLight_automatic+0x14>)
 8000370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000374:	08000389 	.word	0x08000389
 8000378:	080003df 	.word	0x080003df
 800037c:	080004a9 	.word	0x080004a9
 8000380:	080005bd 	.word	0x080005bd
 8000384:	08000687 	.word	0x08000687
	case IDLE:
		state = AUTO_RED1_GREEN2;
 8000388:	4b7f      	ldr	r3, [pc, #508]	; (8000588 <trafficLight_automatic+0x228>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
		clearTrafficDisplay();
 800038e:	f000 fe9f 	bl	80010d0 <clearTrafficDisplay>
		segment1Counter = counter_red / DIVISION_NUMBER;
 8000392:	4b7e      	ldr	r3, [pc, #504]	; (800058c <trafficLight_automatic+0x22c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a7e      	ldr	r2, [pc, #504]	; (8000590 <trafficLight_automatic+0x230>)
 8000398:	fb82 1203 	smull	r1, r2, r2, r3
 800039c:	1192      	asrs	r2, r2, #6
 800039e:	17db      	asrs	r3, r3, #31
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	4a7c      	ldr	r2, [pc, #496]	; (8000594 <trafficLight_automatic+0x234>)
 80003a4:	6013      	str	r3, [r2, #0]
		segment2Counter	= counter_green / DIVISION_NUMBER;
 80003a6:	4b7c      	ldr	r3, [pc, #496]	; (8000598 <trafficLight_automatic+0x238>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a79      	ldr	r2, [pc, #484]	; (8000590 <trafficLight_automatic+0x230>)
 80003ac:	fb82 1203 	smull	r1, r2, r2, r3
 80003b0:	1192      	asrs	r2, r2, #6
 80003b2:	17db      	asrs	r3, r3, #31
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	4a79      	ldr	r2, [pc, #484]	; (800059c <trafficLight_automatic+0x23c>)
 80003b8:	6013      	str	r3, [r2, #0]
		setTimerTraffic1(counter_green);
 80003ba:	4b77      	ldr	r3, [pc, #476]	; (8000598 <trafficLight_automatic+0x238>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 f990 	bl	80016e4 <setTimerTraffic1>
		setTimerCounter1(DURATION_1S);
 80003c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c8:	f001 f9fc 	bl	80017c4 <setTimerCounter1>
		setTimerScanFreq(DURATION_FOR_5HZ);
 80003cc:	20c8      	movs	r0, #200	; 0xc8
 80003ce:	f001 fa15 	bl	80017fc <setTimerScanFreq>
		update7SegBufferAuto();
 80003d2:	f000 ff27 	bl	8001224 <update7SegBufferAuto>
		timeCounter = 0;
 80003d6:	4b72      	ldr	r3, [pc, #456]	; (80005a0 <trafficLight_automatic+0x240>)
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
		break;
 80003dc:	e1ca      	b.n	8000774 <trafficLight_automatic+0x414>
	case AUTO_RED1_GREEN2:
		display7SegAuto(segmentIndexAuto);
 80003de:	4b71      	ldr	r3, [pc, #452]	; (80005a4 <trafficLight_automatic+0x244>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 ff94 	bl	8001310 <display7SegAuto>
		displayTrafficLight(RED_LIGHT, GREEN_LIGHT);
 80003e8:	2103      	movs	r1, #3
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 fe94 	bl	8001118 <displayTrafficLight>
		if(scanFreqTimer_flag == 1){
 80003f0:	4b6d      	ldr	r3, [pc, #436]	; (80005a8 <trafficLight_automatic+0x248>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d110      	bne.n	800041a <trafficLight_automatic+0xba>
			update7SegBufferAuto();
 80003f8:	f000 ff14 	bl	8001224 <update7SegBufferAuto>
			segmentIndexAuto++;
 80003fc:	4b69      	ldr	r3, [pc, #420]	; (80005a4 <trafficLight_automatic+0x244>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a68      	ldr	r2, [pc, #416]	; (80005a4 <trafficLight_automatic+0x244>)
 8000404:	6013      	str	r3, [r2, #0]
			if(segmentIndexAuto >= SEGMENT_IN_A_ROW) segmentIndexAuto = 0;
 8000406:	4b67      	ldr	r3, [pc, #412]	; (80005a4 <trafficLight_automatic+0x244>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	dd02      	ble.n	8000414 <trafficLight_automatic+0xb4>
 800040e:	4b65      	ldr	r3, [pc, #404]	; (80005a4 <trafficLight_automatic+0x244>)
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000414:	20c8      	movs	r0, #200	; 0xc8
 8000416:	f001 f9f1 	bl	80017fc <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff ff52 	bl	80002c4 <isPressedAndReleased>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d019      	beq.n	800045a <trafficLight_automatic+0xfa>
			state = SELECT_MODE_RED;
 8000426:	4b58      	ldr	r3, [pc, #352]	; (8000588 <trafficLight_automatic+0x228>)
 8000428:	2205      	movs	r2, #5
 800042a:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 800042c:	4b5f      	ldr	r3, [pc, #380]	; (80005ac <trafficLight_automatic+0x24c>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000432:	20fa      	movs	r0, #250	; 0xfa
 8000434:	f001 f9aa 	bl	800178c <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000438:	20c8      	movs	r0, #200	; 0xc8
 800043a:	f001 f9df 	bl	80017fc <setTimerScanFreq>
			clearTrafficDisplay();
 800043e:	f000 fe47 	bl	80010d0 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000442:	4b52      	ldr	r3, [pc, #328]	; (800058c <trafficLight_automatic+0x22c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a52      	ldr	r2, [pc, #328]	; (8000590 <trafficLight_automatic+0x230>)
 8000448:	fb82 1203 	smull	r1, r2, r2, r3
 800044c:	1192      	asrs	r2, r2, #6
 800044e:	17db      	asrs	r3, r3, #31
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	4a57      	ldr	r2, [pc, #348]	; (80005b0 <trafficLight_automatic+0x250>)
 8000454:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000456:	f000 ff35 	bl	80012c4 <update7SegBufferManual>
		}
		if(countDownTimer1_counter == 1){
 800045a:	4b56      	ldr	r3, [pc, #344]	; (80005b4 <trafficLight_automatic+0x254>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	f040 8181 	bne.w	8000766 <trafficLight_automatic+0x406>
			segment1Counter --;
 8000464:	4b4b      	ldr	r3, [pc, #300]	; (8000594 <trafficLight_automatic+0x234>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3b01      	subs	r3, #1
 800046a:	4a4a      	ldr	r2, [pc, #296]	; (8000594 <trafficLight_automatic+0x234>)
 800046c:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 800046e:	4b4b      	ldr	r3, [pc, #300]	; (800059c <trafficLight_automatic+0x23c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	3b01      	subs	r3, #1
 8000474:	4a49      	ldr	r2, [pc, #292]	; (800059c <trafficLight_automatic+0x23c>)
 8000476:	6013      	str	r3, [r2, #0]
			if(segment2Counter  == 0) {
 8000478:	4b48      	ldr	r3, [pc, #288]	; (800059c <trafficLight_automatic+0x23c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d10c      	bne.n	800049a <trafficLight_automatic+0x13a>
				segment2Counter = counter_yellow / DIVISION_NUMBER;
 8000480:	4b4d      	ldr	r3, [pc, #308]	; (80005b8 <trafficLight_automatic+0x258>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a42      	ldr	r2, [pc, #264]	; (8000590 <trafficLight_automatic+0x230>)
 8000486:	fb82 1203 	smull	r1, r2, r2, r3
 800048a:	1192      	asrs	r2, r2, #6
 800048c:	17db      	asrs	r3, r3, #31
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	4a42      	ldr	r2, [pc, #264]	; (800059c <trafficLight_automatic+0x23c>)
 8000492:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_YELLOW2;
 8000494:	4b3c      	ldr	r3, [pc, #240]	; (8000588 <trafficLight_automatic+0x228>)
 8000496:	2202      	movs	r2, #2
 8000498:	701a      	strb	r2, [r3, #0]
			}
			update7SegBufferAuto();
 800049a:	f000 fec3 	bl	8001224 <update7SegBufferAuto>
			setTimerCounter1(DURATION_1S);
 800049e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a2:	f001 f98f 	bl	80017c4 <setTimerCounter1>
		}
		break;
 80004a6:	e15e      	b.n	8000766 <trafficLight_automatic+0x406>
	case AUTO_RED1_YELLOW2:
		display7SegAuto(segmentIndexAuto);
 80004a8:	4b3e      	ldr	r3, [pc, #248]	; (80005a4 <trafficLight_automatic+0x244>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 ff2f 	bl	8001310 <display7SegAuto>
		displayTrafficLight(RED_LIGHT, YELLOW_LIGHT);
 80004b2:	2102      	movs	r1, #2
 80004b4:	2001      	movs	r0, #1
 80004b6:	f000 fe2f 	bl	8001118 <displayTrafficLight>
		if(scanFreqTimer_flag == 1){
 80004ba:	4b3b      	ldr	r3, [pc, #236]	; (80005a8 <trafficLight_automatic+0x248>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d110      	bne.n	80004e4 <trafficLight_automatic+0x184>
			update7SegBufferAuto();
 80004c2:	f000 feaf 	bl	8001224 <update7SegBufferAuto>
			segmentIndexAuto++;
 80004c6:	4b37      	ldr	r3, [pc, #220]	; (80005a4 <trafficLight_automatic+0x244>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	4a35      	ldr	r2, [pc, #212]	; (80005a4 <trafficLight_automatic+0x244>)
 80004ce:	6013      	str	r3, [r2, #0]
			if(segmentIndexAuto >= SEGMENT_IN_A_ROW) segmentIndexAuto = 0;
 80004d0:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <trafficLight_automatic+0x244>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	dd02      	ble.n	80004de <trafficLight_automatic+0x17e>
 80004d8:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <trafficLight_automatic+0x244>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 80004de:	20c8      	movs	r0, #200	; 0xc8
 80004e0:	f001 f98c 	bl	80017fc <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff feed 	bl	80002c4 <isPressedAndReleased>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d019      	beq.n	8000524 <trafficLight_automatic+0x1c4>
			state = SELECT_MODE_RED;
 80004f0:	4b25      	ldr	r3, [pc, #148]	; (8000588 <trafficLight_automatic+0x228>)
 80004f2:	2205      	movs	r2, #5
 80004f4:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <trafficLight_automatic+0x24c>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80004fc:	20fa      	movs	r0, #250	; 0xfa
 80004fe:	f001 f945 	bl	800178c <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000502:	20c8      	movs	r0, #200	; 0xc8
 8000504:	f001 f97a 	bl	80017fc <setTimerScanFreq>
			clearTrafficDisplay();
 8000508:	f000 fde2 	bl	80010d0 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <trafficLight_automatic+0x22c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <trafficLight_automatic+0x230>)
 8000512:	fb82 1203 	smull	r1, r2, r2, r3
 8000516:	1192      	asrs	r2, r2, #6
 8000518:	17db      	asrs	r3, r3, #31
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	4a24      	ldr	r2, [pc, #144]	; (80005b0 <trafficLight_automatic+0x250>)
 800051e:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000520:	f000 fed0 	bl	80012c4 <update7SegBufferManual>
		}
		if(countDownTimer1_counter == 1){
 8000524:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <trafficLight_automatic+0x254>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	f040 811e 	bne.w	800076a <trafficLight_automatic+0x40a>
			segment1Counter --;
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <trafficLight_automatic+0x234>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a17      	ldr	r2, [pc, #92]	; (8000594 <trafficLight_automatic+0x234>)
 8000536:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <trafficLight_automatic+0x23c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3b01      	subs	r3, #1
 800053e:	4a17      	ldr	r2, [pc, #92]	; (800059c <trafficLight_automatic+0x23c>)
 8000540:	6013      	str	r3, [r2, #0]
			if (segment2Counter <= 0){
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <trafficLight_automatic+0x23c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	dc16      	bgt.n	8000578 <trafficLight_automatic+0x218>
				segment1Counter = counter_green / DIVISION_NUMBER;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <trafficLight_automatic+0x238>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <trafficLight_automatic+0x230>)
 8000550:	fb82 1203 	smull	r1, r2, r2, r3
 8000554:	1192      	asrs	r2, r2, #6
 8000556:	17db      	asrs	r3, r3, #31
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <trafficLight_automatic+0x234>)
 800055c:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_red / DIVISION_NUMBER;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <trafficLight_automatic+0x22c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <trafficLight_automatic+0x230>)
 8000564:	fb82 1203 	smull	r1, r2, r2, r3
 8000568:	1192      	asrs	r2, r2, #6
 800056a:	17db      	asrs	r3, r3, #31
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	4a0b      	ldr	r2, [pc, #44]	; (800059c <trafficLight_automatic+0x23c>)
 8000570:	6013      	str	r3, [r2, #0]
				state = AUTO_GREEN1_RED2;
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <trafficLight_automatic+0x228>)
 8000574:	2203      	movs	r2, #3
 8000576:	701a      	strb	r2, [r3, #0]
			}
			update7SegBufferAuto();
 8000578:	f000 fe54 	bl	8001224 <update7SegBufferAuto>
			setTimerCounter1(DURATION_1S);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f001 f920 	bl	80017c4 <setTimerCounter1>
		}
		break;
 8000584:	e0f1      	b.n	800076a <trafficLight_automatic+0x40a>
 8000586:	bf00      	nop
 8000588:	200000e4 	.word	0x200000e4
 800058c:	20000000 	.word	0x20000000
 8000590:	10624dd3 	.word	0x10624dd3
 8000594:	20000064 	.word	0x20000064
 8000598:	20000008 	.word	0x20000008
 800059c:	20000068 	.word	0x20000068
 80005a0:	200000d4 	.word	0x200000d4
 80005a4:	2000006c 	.word	0x2000006c
 80005a8:	200000b0 	.word	0x200000b0
 80005ac:	20000050 	.word	0x20000050
 80005b0:	20000060 	.word	0x20000060
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	20000004 	.word	0x20000004
	case AUTO_GREEN1_RED2:
		display7SegAuto(segmentIndexAuto);
 80005bc:	4b6e      	ldr	r3, [pc, #440]	; (8000778 <trafficLight_automatic+0x418>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fea5 	bl	8001310 <display7SegAuto>
		displayTrafficLight(GREEN_LIGHT, RED_LIGHT);
 80005c6:	2101      	movs	r1, #1
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 fda5 	bl	8001118 <displayTrafficLight>
		if(scanFreqTimer_flag == 1){
 80005ce:	4b6b      	ldr	r3, [pc, #428]	; (800077c <trafficLight_automatic+0x41c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d110      	bne.n	80005f8 <trafficLight_automatic+0x298>
			update7SegBufferAuto();
 80005d6:	f000 fe25 	bl	8001224 <update7SegBufferAuto>
			segmentIndexAuto++;
 80005da:	4b67      	ldr	r3, [pc, #412]	; (8000778 <trafficLight_automatic+0x418>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a65      	ldr	r2, [pc, #404]	; (8000778 <trafficLight_automatic+0x418>)
 80005e2:	6013      	str	r3, [r2, #0]
			if(segmentIndexAuto >= SEGMENT_IN_A_ROW) segmentIndexAuto = 0;
 80005e4:	4b64      	ldr	r3, [pc, #400]	; (8000778 <trafficLight_automatic+0x418>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	dd02      	ble.n	80005f2 <trafficLight_automatic+0x292>
 80005ec:	4b62      	ldr	r3, [pc, #392]	; (8000778 <trafficLight_automatic+0x418>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f001 f902 	bl	80017fc <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fe63 	bl	80002c4 <isPressedAndReleased>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d019      	beq.n	8000638 <trafficLight_automatic+0x2d8>
			state = SELECT_MODE_RED;
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <trafficLight_automatic+0x420>)
 8000606:	2205      	movs	r2, #5
 8000608:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 800060a:	4b5e      	ldr	r3, [pc, #376]	; (8000784 <trafficLight_automatic+0x424>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000610:	20fa      	movs	r0, #250	; 0xfa
 8000612:	f001 f8bb 	bl	800178c <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000616:	20c8      	movs	r0, #200	; 0xc8
 8000618:	f001 f8f0 	bl	80017fc <setTimerScanFreq>
			clearTrafficDisplay();
 800061c:	f000 fd58 	bl	80010d0 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 8000620:	4b59      	ldr	r3, [pc, #356]	; (8000788 <trafficLight_automatic+0x428>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a59      	ldr	r2, [pc, #356]	; (800078c <trafficLight_automatic+0x42c>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1192      	asrs	r2, r2, #6
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4a57      	ldr	r2, [pc, #348]	; (8000790 <trafficLight_automatic+0x430>)
 8000632:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000634:	f000 fe46 	bl	80012c4 <update7SegBufferManual>
		}
		if(countDownTimer1_counter == 1){
 8000638:	4b56      	ldr	r3, [pc, #344]	; (8000794 <trafficLight_automatic+0x434>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	f040 8096 	bne.w	800076e <trafficLight_automatic+0x40e>
			segment1Counter --;
 8000642:	4b55      	ldr	r3, [pc, #340]	; (8000798 <trafficLight_automatic+0x438>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a53      	ldr	r2, [pc, #332]	; (8000798 <trafficLight_automatic+0x438>)
 800064a:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 800064c:	4b53      	ldr	r3, [pc, #332]	; (800079c <trafficLight_automatic+0x43c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4a52      	ldr	r2, [pc, #328]	; (800079c <trafficLight_automatic+0x43c>)
 8000654:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0){
 8000656:	4b50      	ldr	r3, [pc, #320]	; (8000798 <trafficLight_automatic+0x438>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	dc0c      	bgt.n	8000678 <trafficLight_automatic+0x318>
				segment1Counter = counter_yellow / DIVISION_NUMBER;
 800065e:	4b50      	ldr	r3, [pc, #320]	; (80007a0 <trafficLight_automatic+0x440>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a4a      	ldr	r2, [pc, #296]	; (800078c <trafficLight_automatic+0x42c>)
 8000664:	fb82 1203 	smull	r1, r2, r2, r3
 8000668:	1192      	asrs	r2, r2, #6
 800066a:	17db      	asrs	r3, r3, #31
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	4a4a      	ldr	r2, [pc, #296]	; (8000798 <trafficLight_automatic+0x438>)
 8000670:	6013      	str	r3, [r2, #0]
				state = AUTO_YELLOW1_RED2;
 8000672:	4b43      	ldr	r3, [pc, #268]	; (8000780 <trafficLight_automatic+0x420>)
 8000674:	2204      	movs	r2, #4
 8000676:	701a      	strb	r2, [r3, #0]
			}
			update7SegBufferAuto();
 8000678:	f000 fdd4 	bl	8001224 <update7SegBufferAuto>
			setTimerCounter1(DURATION_1S);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f001 f8a0 	bl	80017c4 <setTimerCounter1>
		}

		break;
 8000684:	e073      	b.n	800076e <trafficLight_automatic+0x40e>
	case AUTO_YELLOW1_RED2:
		display7SegAuto(segmentIndexAuto);
 8000686:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <trafficLight_automatic+0x418>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fe40 	bl	8001310 <display7SegAuto>
		displayTrafficLight(YELLOW_LIGHT, RED_LIGHT);
 8000690:	2101      	movs	r1, #1
 8000692:	2002      	movs	r0, #2
 8000694:	f000 fd40 	bl	8001118 <displayTrafficLight>
		if(scanFreqTimer_flag == 1){
 8000698:	4b38      	ldr	r3, [pc, #224]	; (800077c <trafficLight_automatic+0x41c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d110      	bne.n	80006c2 <trafficLight_automatic+0x362>
			update7SegBufferAuto();
 80006a0:	f000 fdc0 	bl	8001224 <update7SegBufferAuto>
			segmentIndexAuto++;
 80006a4:	4b34      	ldr	r3, [pc, #208]	; (8000778 <trafficLight_automatic+0x418>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a33      	ldr	r2, [pc, #204]	; (8000778 <trafficLight_automatic+0x418>)
 80006ac:	6013      	str	r3, [r2, #0]
			if(segmentIndexAuto >= SEGMENT_IN_A_ROW) segmentIndexAuto = 0;
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <trafficLight_automatic+0x418>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	dd02      	ble.n	80006bc <trafficLight_automatic+0x35c>
 80006b6:	4b30      	ldr	r3, [pc, #192]	; (8000778 <trafficLight_automatic+0x418>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 80006bc:	20c8      	movs	r0, #200	; 0xc8
 80006be:	f001 f89d 	bl	80017fc <setTimerScanFreq>
		}
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff fdfe 	bl	80002c4 <isPressedAndReleased>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d019      	beq.n	8000702 <trafficLight_automatic+0x3a2>
			state = SELECT_MODE_RED;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <trafficLight_automatic+0x420>)
 80006d0:	2205      	movs	r2, #5
 80006d2:	701a      	strb	r2, [r3, #0]
			isInManual = 1;
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <trafficLight_automatic+0x424>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
			setTimerTriggerLed(DURATION_FOR_4HZ);
 80006da:	20fa      	movs	r0, #250	; 0xfa
 80006dc:	f001 f856 	bl	800178c <setTimerTriggerLed>
			setTimerScanFreq(DURATION_FOR_5HZ);
 80006e0:	20c8      	movs	r0, #200	; 0xc8
 80006e2:	f001 f88b 	bl	80017fc <setTimerScanFreq>
			clearTrafficDisplay();
 80006e6:	f000 fcf3 	bl	80010d0 <clearTrafficDisplay>
			tempCounter = counter_red/DIVISION_NUMBER;
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <trafficLight_automatic+0x428>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a27      	ldr	r2, [pc, #156]	; (800078c <trafficLight_automatic+0x42c>)
 80006f0:	fb82 1203 	smull	r1, r2, r2, r3
 80006f4:	1192      	asrs	r2, r2, #6
 80006f6:	17db      	asrs	r3, r3, #31
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <trafficLight_automatic+0x430>)
 80006fc:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 80006fe:	f000 fde1 	bl	80012c4 <update7SegBufferManual>
		}
		if(countDownTimer1_counter == 1){
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <trafficLight_automatic+0x434>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d133      	bne.n	8000772 <trafficLight_automatic+0x412>
			segment1Counter --;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <trafficLight_automatic+0x438>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <trafficLight_automatic+0x438>)
 8000712:	6013      	str	r3, [r2, #0]
			segment2Counter --;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <trafficLight_automatic+0x43c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <trafficLight_automatic+0x43c>)
 800071c:	6013      	str	r3, [r2, #0]
			if (segment1Counter <= 0){
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <trafficLight_automatic+0x438>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	dc16      	bgt.n	8000754 <trafficLight_automatic+0x3f4>
				segment1Counter = counter_red / DIVISION_NUMBER;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <trafficLight_automatic+0x428>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a18      	ldr	r2, [pc, #96]	; (800078c <trafficLight_automatic+0x42c>)
 800072c:	fb82 1203 	smull	r1, r2, r2, r3
 8000730:	1192      	asrs	r2, r2, #6
 8000732:	17db      	asrs	r3, r3, #31
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <trafficLight_automatic+0x438>)
 8000738:	6013      	str	r3, [r2, #0]
				segment2Counter = counter_green / DIVISION_NUMBER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <trafficLight_automatic+0x444>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <trafficLight_automatic+0x42c>)
 8000740:	fb82 1203 	smull	r1, r2, r2, r3
 8000744:	1192      	asrs	r2, r2, #6
 8000746:	17db      	asrs	r3, r3, #31
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <trafficLight_automatic+0x43c>)
 800074c:	6013      	str	r3, [r2, #0]
				state = AUTO_RED1_GREEN2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <trafficLight_automatic+0x420>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
			}
			update7SegBufferAuto();
 8000754:	f000 fd66 	bl	8001224 <update7SegBufferAuto>
			setTimerCounter1(DURATION_1S);
 8000758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075c:	f001 f832 	bl	80017c4 <setTimerCounter1>
		}

		break;
 8000760:	e007      	b.n	8000772 <trafficLight_automatic+0x412>
	default:
		break;
 8000762:	bf00      	nop
 8000764:	e006      	b.n	8000774 <trafficLight_automatic+0x414>
		break;
 8000766:	bf00      	nop
 8000768:	e004      	b.n	8000774 <trafficLight_automatic+0x414>
		break;
 800076a:	bf00      	nop
 800076c:	e002      	b.n	8000774 <trafficLight_automatic+0x414>
		break;
 800076e:	bf00      	nop
 8000770:	e000      	b.n	8000774 <trafficLight_automatic+0x414>
		break;
 8000772:	bf00      	nop
	}
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000006c 	.word	0x2000006c
 800077c:	200000b0 	.word	0x200000b0
 8000780:	200000e4 	.word	0x200000e4
 8000784:	20000050 	.word	0x20000050
 8000788:	20000000 	.word	0x20000000
 800078c:	10624dd3 	.word	0x10624dd3
 8000790:	20000060 	.word	0x20000060
 8000794:	200000c8 	.word	0x200000c8
 8000798:	20000064 	.word	0x20000064
 800079c:	20000068 	.word	0x20000068
 80007a0:	20000004 	.word	0x20000004
 80007a4:	20000008 	.word	0x20000008

080007a8 <trafficLight_manual>:
#include "global.h"
#include "button.h"
#include "software_timer.h"
#include "led_segment_control.h"

void trafficLight_manual(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	switch(state){
 80007ac:	4bac      	ldr	r3, [pc, #688]	; (8000a60 <trafficLight_manual+0x2b8>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b05      	subs	r3, #5
 80007b2:	2b05      	cmp	r3, #5
 80007b4:	f200 81d8 	bhi.w	8000b68 <trafficLight_manual+0x3c0>
 80007b8:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <trafficLight_manual+0x18>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007d9 	.word	0x080007d9
 80007c4:	080008ab 	.word	0x080008ab
 80007c8:	08000949 	.word	0x08000949
 80007cc:	080009e7 	.word	0x080009e7
 80007d0:	08000a89 	.word	0x08000a89
 80007d4:	08000ae5 	.word	0x08000ae5
	case SELECT_MODE_RED:

		display7SegManual(segmentIndexManual);
 80007d8:	4ba2      	ldr	r3, [pc, #648]	; (8000a64 <trafficLight_manual+0x2bc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fe0d 	bl	80013fc <display7SegManual>
		if(scanFreqTimer_flag == 1){
 80007e2:	4ba1      	ldr	r3, [pc, #644]	; (8000a68 <trafficLight_manual+0x2c0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d110      	bne.n	800080c <trafficLight_manual+0x64>
			update7SegBufferManual();
 80007ea:	f000 fd6b 	bl	80012c4 <update7SegBufferManual>
			segmentIndexManual++;
 80007ee:	4b9d      	ldr	r3, [pc, #628]	; (8000a64 <trafficLight_manual+0x2bc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a9b      	ldr	r2, [pc, #620]	; (8000a64 <trafficLight_manual+0x2bc>)
 80007f6:	6013      	str	r3, [r2, #0]
			if(segmentIndexManual >= SEGMENT_IN_A_ROW) segmentIndexManual = 0;
 80007f8:	4b9a      	ldr	r3, [pc, #616]	; (8000a64 <trafficLight_manual+0x2bc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	dd02      	ble.n	8000806 <trafficLight_manual+0x5e>
 8000800:	4b98      	ldr	r3, [pc, #608]	; (8000a64 <trafficLight_manual+0x2bc>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
			setTimerScanFreq(DURATION_FOR_5HZ);
 8000806:	20c8      	movs	r0, #200	; 0xc8
 8000808:	f000 fff8 	bl	80017fc <setTimerScanFreq>
		}
		isRedMode = 1;
 800080c:	4b97      	ldr	r3, [pc, #604]	; (8000a6c <trafficLight_manual+0x2c4>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000812:	4b97      	ldr	r3, [pc, #604]	; (8000a70 <trafficLight_manual+0x2c8>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000818:	4b96      	ldr	r3, [pc, #600]	; (8000a74 <trafficLight_manual+0x2cc>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fd50 	bl	80002c4 <isPressedAndReleased>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d008      	beq.n	800083c <trafficLight_manual+0x94>
			tempCounter = counter_yellow;
 800082a:	4b93      	ldr	r3, [pc, #588]	; (8000a78 <trafficLight_manual+0x2d0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a93      	ldr	r2, [pc, #588]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000830:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 8000832:	f000 fd47 	bl	80012c4 <update7SegBufferManual>
			state = SELECT_MODE_YELLOW;
 8000836:	4b8a      	ldr	r3, [pc, #552]	; (8000a60 <trafficLight_manual+0x2b8>)
 8000838:	2206      	movs	r2, #6
 800083a:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff fd41 	bl	80002c4 <isPressedAndReleased>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <trafficLight_manual+0xa6>
			state = MODIFY_PRESSED;
 8000848:	4b85      	ldr	r3, [pc, #532]	; (8000a60 <trafficLight_manual+0x2b8>)
 800084a:	2208      	movs	r2, #8
 800084c:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fd52 	bl	80002f8 <is_button_pressed>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d018      	beq.n	800088c <trafficLight_manual+0xe4>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fd66 	bl	800032c <is_button_pressed_3s>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d012      	beq.n	800088c <trafficLight_manual+0xe4>
				state = MODIFY_LONGPRESSED;
 8000866:	4b7e      	ldr	r3, [pc, #504]	; (8000a60 <trafficLight_manual+0x2b8>)
 8000868:	2209      	movs	r2, #9
 800086a:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 800086c:	4b83      	ldr	r3, [pc, #524]	; (8000a7c <trafficLight_manual+0x2d4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	330a      	adds	r3, #10
 8000872:	4a82      	ldr	r2, [pc, #520]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000874:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000876:	4b81      	ldr	r3, [pc, #516]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b63      	cmp	r3, #99	; 0x63
 800087c:	dd02      	ble.n	8000884 <trafficLight_manual+0xdc>
					tempCounter = 0;
 800087e:	4b7f      	ldr	r3, [pc, #508]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
				}
				setTimerModify(DURATION_1S);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 ff64 	bl	8001754 <setTimerModify>
			}
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 800088c:	2002      	movs	r0, #2
 800088e:	f7ff fd19 	bl	80002c4 <isPressedAndReleased>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	f000 8169 	beq.w	8000b6c <trafficLight_manual+0x3c4>
			state = SET_PRESSED;
 800089a:	4b71      	ldr	r3, [pc, #452]	; (8000a60 <trafficLight_manual+0x2b8>)
 800089c:	220a      	movs	r2, #10
 800089e:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 80008a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008a4:	f000 ff3a 	bl	800171c <setTimerWait>
		}
		break;
 80008a8:	e160      	b.n	8000b6c <trafficLight_manual+0x3c4>
	case SELECT_MODE_YELLOW:
		isRedMode = 0;
 80008aa:	4b70      	ldr	r3, [pc, #448]	; (8000a6c <trafficLight_manual+0x2c4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
		isYellowMode = 1;
 80008b0:	4b6f      	ldr	r3, [pc, #444]	; (8000a70 <trafficLight_manual+0x2c8>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 80008b6:	4b6f      	ldr	r3, [pc, #444]	; (8000a74 <trafficLight_manual+0x2cc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fd01 	bl	80002c4 <isPressedAndReleased>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d008      	beq.n	80008da <trafficLight_manual+0x132>
			tempCounter = counter_green;
 80008c8:	4b6d      	ldr	r3, [pc, #436]	; (8000a80 <trafficLight_manual+0x2d8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a6b      	ldr	r2, [pc, #428]	; (8000a7c <trafficLight_manual+0x2d4>)
 80008ce:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 80008d0:	f000 fcf8 	bl	80012c4 <update7SegBufferManual>
			state = SELECT_MODE_GREEN;
 80008d4:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <trafficLight_manual+0x2b8>)
 80008d6:	2207      	movs	r2, #7
 80008d8:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fcf2 	bl	80002c4 <isPressedAndReleased>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <trafficLight_manual+0x144>
			state = MODIFY_PRESSED;
 80008e6:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <trafficLight_manual+0x2b8>)
 80008e8:	2208      	movs	r2, #8
 80008ea:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fd03 	bl	80002f8 <is_button_pressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d018      	beq.n	800092a <trafficLight_manual+0x182>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fd17 	bl	800032c <is_button_pressed_3s>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00e      	beq.n	8000922 <trafficLight_manual+0x17a>
				state = MODIFY_LONGPRESSED;
 8000904:	4b56      	ldr	r3, [pc, #344]	; (8000a60 <trafficLight_manual+0x2b8>)
 8000906:	2209      	movs	r2, #9
 8000908:	701a      	strb	r2, [r3, #0]
				tempCounter += 10;
 800090a:	4b5c      	ldr	r3, [pc, #368]	; (8000a7c <trafficLight_manual+0x2d4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	330a      	adds	r3, #10
 8000910:	4a5a      	ldr	r2, [pc, #360]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000912:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 8000914:	4b59      	ldr	r3, [pc, #356]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b63      	cmp	r3, #99	; 0x63
 800091a:	dd02      	ble.n	8000922 <trafficLight_manual+0x17a>
					tempCounter = 0;
 800091c:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <trafficLight_manual+0x2d4>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
				}
			}
			setTimerModify(DURATION_1S);
 8000922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000926:	f000 ff15 	bl	8001754 <setTimerModify>
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fcca 	bl	80002c4 <isPressedAndReleased>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	f000 811c 	beq.w	8000b70 <trafficLight_manual+0x3c8>
			state = SET_PRESSED;
 8000938:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <trafficLight_manual+0x2b8>)
 800093a:	220a      	movs	r2, #10
 800093c:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 800093e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000942:	f000 feeb 	bl	800171c <setTimerWait>
		}
		break;
 8000946:	e113      	b.n	8000b70 <trafficLight_manual+0x3c8>
	case SELECT_MODE_GREEN:
		isRedMode = 0;
 8000948:	4b48      	ldr	r3, [pc, #288]	; (8000a6c <trafficLight_manual+0x2c4>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 800094e:	4b48      	ldr	r3, [pc, #288]	; (8000a70 <trafficLight_manual+0x2c8>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
		isGreenMode = 1;
 8000954:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <trafficLight_manual+0x2cc>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]

		if(isPressedAndReleased(BTN_SELECT_INDEX)){
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fcb2 	bl	80002c4 <isPressedAndReleased>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d008      	beq.n	8000978 <trafficLight_manual+0x1d0>
			tempCounter = counter_red;
 8000966:	4b47      	ldr	r3, [pc, #284]	; (8000a84 <trafficLight_manual+0x2dc>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a44      	ldr	r2, [pc, #272]	; (8000a7c <trafficLight_manual+0x2d4>)
 800096c:	6013      	str	r3, [r2, #0]
			update7SegBufferManual();
 800096e:	f000 fca9 	bl	80012c4 <update7SegBufferManual>
			state = SELECT_MODE_RED;
 8000972:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <trafficLight_manual+0x2b8>)
 8000974:	2205      	movs	r2, #5
 8000976:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedAndReleased(BTN_MODIFY_INDEX)){
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff fca3 	bl	80002c4 <isPressedAndReleased>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <trafficLight_manual+0x1e2>
			state = MODIFY_PRESSED;
 8000984:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <trafficLight_manual+0x2b8>)
 8000986:	2208      	movs	r2, #8
 8000988:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(BTN_MODIFY_INDEX)){
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fcb4 	bl	80002f8 <is_button_pressed>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d018      	beq.n	80009c8 <trafficLight_manual+0x220>
			if(is_button_pressed_3s(BTN_MODIFY_INDEX)){
 8000996:	2001      	movs	r0, #1
 8000998:	f7ff fcc8 	bl	800032c <is_button_pressed_3s>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00e      	beq.n	80009c0 <trafficLight_manual+0x218>
				state = MODIFY_LONGPRESSED;
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <trafficLight_manual+0x2b8>)
 80009a4:	2209      	movs	r2, #9
 80009a6:	701a      	strb	r2, [r3, #0]

				tempCounter += 10;
 80009a8:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <trafficLight_manual+0x2d4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	330a      	adds	r3, #10
 80009ae:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <trafficLight_manual+0x2d4>)
 80009b0:	6013      	str	r3, [r2, #0]
				if(tempCounter > MAX_SEGMENT_VALUE) {
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <trafficLight_manual+0x2d4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b63      	cmp	r3, #99	; 0x63
 80009b8:	dd02      	ble.n	80009c0 <trafficLight_manual+0x218>
					tempCounter = 0;
 80009ba:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <trafficLight_manual+0x2d4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
				}
			}
			setTimerModify(DURATION_1S);
 80009c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c4:	f000 fec6 	bl	8001754 <setTimerModify>
		}
		if(isPressedAndReleased(BTN_SET_INDEX)){
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fc7b 	bl	80002c4 <isPressedAndReleased>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80cf 	beq.w	8000b74 <trafficLight_manual+0x3cc>
			state = SET_PRESSED;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <trafficLight_manual+0x2b8>)
 80009d8:	220a      	movs	r2, #10
 80009da:	701a      	strb	r2, [r3, #0]
			setTimerWait(DURATION_3S);
 80009dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009e0:	f000 fe9c 	bl	800171c <setTimerWait>
		}
		break;
 80009e4:	e0c6      	b.n	8000b74 <trafficLight_manual+0x3cc>
	case MODIFY_PRESSED:
		if(isRedMode == 1){
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <trafficLight_manual+0x2c4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10f      	bne.n	8000a0e <trafficLight_manual+0x266>
			tempCounter += 1;
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <trafficLight_manual+0x2d4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <trafficLight_manual+0x2d4>)
 80009f6:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <trafficLight_manual+0x2d4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b63      	cmp	r3, #99	; 0x63
 80009fe:	dd02      	ble.n	8000a06 <trafficLight_manual+0x25e>
				tempCounter =0;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
			}
			state = SELECT_MODE_RED;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <trafficLight_manual+0x2b8>)
 8000a08:	2205      	movs	r2, #5
 8000a0a:	701a      	strb	r2, [r3, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
				tempCounter = 0;
			}
			state = SELECT_MODE_GREEN;
		}
		break;
 8000a0c:	e0b4      	b.n	8000b78 <trafficLight_manual+0x3d0>
		else if(isYellowMode == 1){
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <trafficLight_manual+0x2c8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10f      	bne.n	8000a36 <trafficLight_manual+0x28e>
			tempCounter += 1;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a1e:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b63      	cmp	r3, #99	; 0x63
 8000a26:	dd02      	ble.n	8000a2e <trafficLight_manual+0x286>
				tempCounter =0;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
			state = SELECT_MODE_YELLOW;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <trafficLight_manual+0x2b8>)
 8000a30:	2206      	movs	r2, #6
 8000a32:	701a      	strb	r2, [r3, #0]
		break;
 8000a34:	e0a0      	b.n	8000b78 <trafficLight_manual+0x3d0>
		else if(isGreenMode == 1){
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <trafficLight_manual+0x2cc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	f040 809c 	bne.w	8000b78 <trafficLight_manual+0x3d0>
			tempCounter += 1;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a48:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE){
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b63      	cmp	r3, #99	; 0x63
 8000a50:	dd02      	ble.n	8000a58 <trafficLight_manual+0x2b0>
				tempCounter = 0;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <trafficLight_manual+0x2d4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
			state = SELECT_MODE_GREEN;
 8000a58:	4b01      	ldr	r3, [pc, #4]	; (8000a60 <trafficLight_manual+0x2b8>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	701a      	strb	r2, [r3, #0]
		break;
 8000a5e:	e08b      	b.n	8000b78 <trafficLight_manual+0x3d0>
 8000a60:	200000e4 	.word	0x200000e4
 8000a64:	20000070 	.word	0x20000070
 8000a68:	200000b0 	.word	0x200000b0
 8000a6c:	20000054 	.word	0x20000054
 8000a70:	20000058 	.word	0x20000058
 8000a74:	2000005c 	.word	0x2000005c
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	20000060 	.word	0x20000060
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000000 	.word	0x20000000
	case MODIFY_LONGPRESSED:
		if(modifyTimer_flag == 1){
 8000a88:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <trafficLight_manual+0x3e0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10b      	bne.n	8000aa8 <trafficLight_manual+0x300>
			tempCounter += 10;
 8000a90:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <trafficLight_manual+0x3e4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	330a      	adds	r3, #10
 8000a96:	4a3d      	ldr	r2, [pc, #244]	; (8000b8c <trafficLight_manual+0x3e4>)
 8000a98:	6013      	str	r3, [r2, #0]
			if(tempCounter > MAX_SEGMENT_VALUE) {
 8000a9a:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <trafficLight_manual+0x3e4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b63      	cmp	r3, #99	; 0x63
 8000aa0:	dd02      	ble.n	8000aa8 <trafficLight_manual+0x300>
				tempCounter = 0;
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <trafficLight_manual+0x3e4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
			}
		}

		if(!is_button_pressed(BTN_MODIFY_INDEX)){
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fc25 	bl	80002f8 <is_button_pressed>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d163      	bne.n	8000b7c <trafficLight_manual+0x3d4>
			if(isRedMode == 1) state = SELECT_MODE_RED;
 8000ab4:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <trafficLight_manual+0x3e8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d103      	bne.n	8000ac4 <trafficLight_manual+0x31c>
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <trafficLight_manual+0x3ec>)
 8000abe:	2205      	movs	r2, #5
 8000ac0:	701a      	strb	r2, [r3, #0]
			else if(isYellowMode == 1) state = SELECT_MODE_YELLOW;
			else if(isGreenMode == 1) state = SELECT_MODE_GREEN;
		}

		break;
 8000ac2:	e05b      	b.n	8000b7c <trafficLight_manual+0x3d4>
			else if(isYellowMode == 1) state = SELECT_MODE_YELLOW;
 8000ac4:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <trafficLight_manual+0x3f0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d103      	bne.n	8000ad4 <trafficLight_manual+0x32c>
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <trafficLight_manual+0x3ec>)
 8000ace:	2206      	movs	r2, #6
 8000ad0:	701a      	strb	r2, [r3, #0]
		break;
 8000ad2:	e053      	b.n	8000b7c <trafficLight_manual+0x3d4>
			else if(isGreenMode == 1) state = SELECT_MODE_GREEN;
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <trafficLight_manual+0x3f4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d14f      	bne.n	8000b7c <trafficLight_manual+0x3d4>
 8000adc:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <trafficLight_manual+0x3ec>)
 8000ade:	2207      	movs	r2, #7
 8000ae0:	701a      	strb	r2, [r3, #0]
		break;
 8000ae2:	e04b      	b.n	8000b7c <trafficLight_manual+0x3d4>
	case SET_PRESSED:
		if(isRedMode == 1) counter_red = tempCounter * 1000;
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <trafficLight_manual+0x3e8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d108      	bne.n	8000afe <trafficLight_manual+0x356>
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <trafficLight_manual+0x3e4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af4:	fb02 f303 	mul.w	r3, r2, r3
 8000af8:	4a29      	ldr	r2, [pc, #164]	; (8000ba0 <trafficLight_manual+0x3f8>)
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e018      	b.n	8000b30 <trafficLight_manual+0x388>
		else if (isYellowMode == 1) counter_yellow = tempCounter * 1000;
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <trafficLight_manual+0x3f0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d108      	bne.n	8000b18 <trafficLight_manual+0x370>
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <trafficLight_manual+0x3e4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <trafficLight_manual+0x3fc>)
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e00b      	b.n	8000b30 <trafficLight_manual+0x388>
		else if (isGreenMode == 1) counter_green = tempCounter * 1000;
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <trafficLight_manual+0x3f4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d107      	bne.n	8000b30 <trafficLight_manual+0x388>
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <trafficLight_manual+0x3e4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b28:	fb02 f303 	mul.w	r3, r2, r3
 8000b2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <trafficLight_manual+0x400>)
 8000b2e:	6013      	str	r3, [r2, #0]
		isRedMode = 0;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <trafficLight_manual+0x3e8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
		isYellowMode = 0;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <trafficLight_manual+0x3f0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
		isGreenMode = 0;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <trafficLight_manual+0x3f4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
		isInManual = 0;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <trafficLight_manual+0x404>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
		scanFreqTimer_flag = 0;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <trafficLight_manual+0x408>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
		clear7Seg();
 8000b4e:	f000 fc99 	bl	8001484 <clear7Seg>
		tempCounter = 0;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <trafficLight_manual+0x3e4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]

		if(waitTimer_flag == 1){
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <trafficLight_manual+0x40c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d10f      	bne.n	8000b80 <trafficLight_manual+0x3d8>
			state = IDLE;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <trafficLight_manual+0x3ec>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000b66:	e00b      	b.n	8000b80 <trafficLight_manual+0x3d8>
	default:
		break;
 8000b68:	bf00      	nop
 8000b6a:	e00a      	b.n	8000b82 <trafficLight_manual+0x3da>
		break;
 8000b6c:	bf00      	nop
 8000b6e:	e008      	b.n	8000b82 <trafficLight_manual+0x3da>
		break;
 8000b70:	bf00      	nop
 8000b72:	e006      	b.n	8000b82 <trafficLight_manual+0x3da>
		break;
 8000b74:	bf00      	nop
 8000b76:	e004      	b.n	8000b82 <trafficLight_manual+0x3da>
		break;
 8000b78:	bf00      	nop
 8000b7a:	e002      	b.n	8000b82 <trafficLight_manual+0x3da>
		break;
 8000b7c:	bf00      	nop
 8000b7e:	e000      	b.n	8000b82 <trafficLight_manual+0x3da>
		break;
 8000b80:	bf00      	nop
	}
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000a0 	.word	0x200000a0
 8000b8c:	20000060 	.word	0x20000060
 8000b90:	20000054 	.word	0x20000054
 8000b94:	200000e4 	.word	0x200000e4
 8000b98:	20000058 	.word	0x20000058
 8000b9c:	2000005c 	.word	0x2000005c
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000050 	.word	0x20000050
 8000bb0:	200000b0 	.word	0x200000b0
 8000bb4:	2000009c 	.word	0x2000009c

08000bb8 <triggerLed>:

void triggerLed(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	if(timerLed_flag == 1){
 8000bbc:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <triggerLed+0xfc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d174      	bne.n	8000cae <triggerLed+0xf6>
		if (isRedMode == 1 && isInManual == 1){
 8000bc4:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <triggerLed+0x100>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d122      	bne.n	8000c12 <triggerLed+0x5a>
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <triggerLed+0x104>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d11e      	bne.n	8000c12 <triggerLed+0x5a>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	4839      	ldr	r0, [pc, #228]	; (8000cc0 <triggerLed+0x108>)
 8000bda:	f001 fa86 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	4837      	ldr	r0, [pc, #220]	; (8000cc0 <triggerLed+0x108>)
 8000be4:	f001 fa81 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2104      	movs	r1, #4
 8000bec:	4834      	ldr	r0, [pc, #208]	; (8000cc0 <triggerLed+0x108>)
 8000bee:	f001 fa7c 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4832      	ldr	r0, [pc, #200]	; (8000cc0 <triggerLed+0x108>)
 8000bf8:	f001 fa77 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4830      	ldr	r0, [pc, #192]	; (8000cc0 <triggerLed+0x108>)
 8000c00:	f001 fa8b 	bl	800211a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000c04:	2110      	movs	r1, #16
 8000c06:	482e      	ldr	r0, [pc, #184]	; (8000cc0 <triggerLed+0x108>)
 8000c08:	f001 fa87 	bl	800211a <HAL_GPIO_TogglePin>
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000c0c:	20fa      	movs	r0, #250	; 0xfa
 8000c0e:	f000 fdbd 	bl	800178c <setTimerTriggerLed>
		}
		if (isYellowMode == 1 && isInManual == 1){
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <triggerLed+0x10c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d122      	bne.n	8000c60 <triggerLed+0xa8>
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <triggerLed+0x104>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d11e      	bne.n	8000c60 <triggerLed+0xa8>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2108      	movs	r1, #8
 8000c26:	4826      	ldr	r0, [pc, #152]	; (8000cc0 <triggerLed+0x108>)
 8000c28:	f001 fa5f 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	4823      	ldr	r0, [pc, #140]	; (8000cc0 <triggerLed+0x108>)
 8000c32:	f001 fa5a 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4821      	ldr	r0, [pc, #132]	; (8000cc0 <triggerLed+0x108>)
 8000c3c:	f001 fa55 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2110      	movs	r1, #16
 8000c44:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <triggerLed+0x108>)
 8000c46:	f001 fa50 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	481c      	ldr	r0, [pc, #112]	; (8000cc0 <triggerLed+0x108>)
 8000c4e:	f001 fa64 	bl	800211a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000c52:	2120      	movs	r1, #32
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <triggerLed+0x108>)
 8000c56:	f001 fa60 	bl	800211a <HAL_GPIO_TogglePin>
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000c5a:	20fa      	movs	r0, #250	; 0xfa
 8000c5c:	f000 fd96 	bl	800178c <setTimerTriggerLed>
		}
		if (isGreenMode == 1 && isInManual == 1){
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <triggerLed+0x110>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d122      	bne.n	8000cae <triggerLed+0xf6>
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <triggerLed+0x104>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d11e      	bne.n	8000cae <triggerLed+0xf6>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2102      	movs	r1, #2
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <triggerLed+0x108>)
 8000c76:	f001 fa38 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <triggerLed+0x108>)
 8000c80:	f001 fa33 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <triggerLed+0x108>)
 8000c8a:	f001 fa2e 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2120      	movs	r1, #32
 8000c92:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <triggerLed+0x108>)
 8000c94:	f001 fa29 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000c98:	2108      	movs	r1, #8
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <triggerLed+0x108>)
 8000c9c:	f001 fa3d 	bl	800211a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000ca0:	2140      	movs	r1, #64	; 0x40
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <triggerLed+0x108>)
 8000ca4:	f001 fa39 	bl	800211a <HAL_GPIO_TogglePin>
			setTimerTriggerLed(DURATION_FOR_4HZ);
 8000ca8:	20fa      	movs	r0, #250	; 0xfa
 8000caa:	f000 fd6f 	bl	800178c <setTimerTriggerLed>
		}
	}
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000a4 	.word	0x200000a4
 8000cb8:	20000054 	.word	0x20000054
 8000cbc:	20000050 	.word	0x20000050
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	20000058 	.word	0x20000058
 8000cc8:	2000005c 	.word	0x2000005c

08000ccc <display7Seg>:
#include "led_segment_control.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"

void display7Seg(int num){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b09      	cmp	r3, #9
 8000cd8:	f200 81c8 	bhi.w	800106c <display7Seg+0x3a0>
 8000cdc:	a201      	add	r2, pc, #4	; (adr r2, 8000ce4 <display7Seg+0x18>)
 8000cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce2:	bf00      	nop
 8000ce4:	08000d0d 	.word	0x08000d0d
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000db9 	.word	0x08000db9
 8000cf0:	08000e0f 	.word	0x08000e0f
 8000cf4:	08000e65 	.word	0x08000e65
 8000cf8:	08000ebb 	.word	0x08000ebb
 8000cfc:	08000f11 	.word	0x08000f11
 8000d00:	08000f67 	.word	0x08000f67
 8000d04:	08000fbd 	.word	0x08000fbd
 8000d08:	08001013 	.word	0x08001013
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d12:	48d5      	ldr	r0, [pc, #852]	; (8001068 <display7Seg+0x39c>)
 8000d14:	f001 f9e9 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1e:	48d2      	ldr	r0, [pc, #840]	; (8001068 <display7Seg+0x39c>)
 8000d20:	f001 f9e3 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2a:	48cf      	ldr	r0, [pc, #828]	; (8001068 <display7Seg+0x39c>)
 8000d2c:	f001 f9dd 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d36:	48cc      	ldr	r0, [pc, #816]	; (8001068 <display7Seg+0x39c>)
 8000d38:	f001 f9d7 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d42:	48c9      	ldr	r0, [pc, #804]	; (8001068 <display7Seg+0x39c>)
 8000d44:	f001 f9d1 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4e:	48c6      	ldr	r0, [pc, #792]	; (8001068 <display7Seg+0x39c>)
 8000d50:	f001 f9cb 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5a:	48c3      	ldr	r0, [pc, #780]	; (8001068 <display7Seg+0x39c>)
 8000d5c:	f001 f9c5 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000d60:	e1af      	b.n	80010c2 <display7Seg+0x3f6>
	case 1:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d68:	48bf      	ldr	r0, [pc, #764]	; (8001068 <display7Seg+0x39c>)
 8000d6a:	f001 f9be 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d74:	48bc      	ldr	r0, [pc, #752]	; (8001068 <display7Seg+0x39c>)
 8000d76:	f001 f9b8 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d80:	48b9      	ldr	r0, [pc, #740]	; (8001068 <display7Seg+0x39c>)
 8000d82:	f001 f9b2 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8c:	48b6      	ldr	r0, [pc, #728]	; (8001068 <display7Seg+0x39c>)
 8000d8e:	f001 f9ac 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d98:	48b3      	ldr	r0, [pc, #716]	; (8001068 <display7Seg+0x39c>)
 8000d9a:	f001 f9a6 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da4:	48b0      	ldr	r0, [pc, #704]	; (8001068 <display7Seg+0x39c>)
 8000da6:	f001 f9a0 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db0:	48ad      	ldr	r0, [pc, #692]	; (8001068 <display7Seg+0x39c>)
 8000db2:	f001 f99a 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000db6:	e184      	b.n	80010c2 <display7Seg+0x3f6>
	case 2:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbe:	48aa      	ldr	r0, [pc, #680]	; (8001068 <display7Seg+0x39c>)
 8000dc0:	f001 f993 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	48a7      	ldr	r0, [pc, #668]	; (8001068 <display7Seg+0x39c>)
 8000dcc:	f001 f98d 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd6:	48a4      	ldr	r0, [pc, #656]	; (8001068 <display7Seg+0x39c>)
 8000dd8:	f001 f987 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de2:	48a1      	ldr	r0, [pc, #644]	; (8001068 <display7Seg+0x39c>)
 8000de4:	f001 f981 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dee:	489e      	ldr	r0, [pc, #632]	; (8001068 <display7Seg+0x39c>)
 8000df0:	f001 f97b 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfa:	489b      	ldr	r0, [pc, #620]	; (8001068 <display7Seg+0x39c>)
 8000dfc:	f001 f975 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e06:	4898      	ldr	r0, [pc, #608]	; (8001068 <display7Seg+0x39c>)
 8000e08:	f001 f96f 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000e0c:	e159      	b.n	80010c2 <display7Seg+0x3f6>
	case 3:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e14:	4894      	ldr	r0, [pc, #592]	; (8001068 <display7Seg+0x39c>)
 8000e16:	f001 f968 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e20:	4891      	ldr	r0, [pc, #580]	; (8001068 <display7Seg+0x39c>)
 8000e22:	f001 f962 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e2c:	488e      	ldr	r0, [pc, #568]	; (8001068 <display7Seg+0x39c>)
 8000e2e:	f001 f95c 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e38:	488b      	ldr	r0, [pc, #556]	; (8001068 <display7Seg+0x39c>)
 8000e3a:	f001 f956 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e44:	4888      	ldr	r0, [pc, #544]	; (8001068 <display7Seg+0x39c>)
 8000e46:	f001 f950 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e50:	4885      	ldr	r0, [pc, #532]	; (8001068 <display7Seg+0x39c>)
 8000e52:	f001 f94a 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e5c:	4882      	ldr	r0, [pc, #520]	; (8001068 <display7Seg+0x39c>)
 8000e5e:	f001 f944 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000e62:	e12e      	b.n	80010c2 <display7Seg+0x3f6>
	case 4:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	487f      	ldr	r0, [pc, #508]	; (8001068 <display7Seg+0x39c>)
 8000e6c:	f001 f93d 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	487c      	ldr	r0, [pc, #496]	; (8001068 <display7Seg+0x39c>)
 8000e78:	f001 f937 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e82:	4879      	ldr	r0, [pc, #484]	; (8001068 <display7Seg+0x39c>)
 8000e84:	f001 f931 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8e:	4876      	ldr	r0, [pc, #472]	; (8001068 <display7Seg+0x39c>)
 8000e90:	f001 f92b 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	4873      	ldr	r0, [pc, #460]	; (8001068 <display7Seg+0x39c>)
 8000e9c:	f001 f925 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea6:	4870      	ldr	r0, [pc, #448]	; (8001068 <display7Seg+0x39c>)
 8000ea8:	f001 f91f 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	486d      	ldr	r0, [pc, #436]	; (8001068 <display7Seg+0x39c>)
 8000eb4:	f001 f919 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000eb8:	e103      	b.n	80010c2 <display7Seg+0x3f6>
	case 5:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec0:	4869      	ldr	r0, [pc, #420]	; (8001068 <display7Seg+0x39c>)
 8000ec2:	f001 f912 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	4866      	ldr	r0, [pc, #408]	; (8001068 <display7Seg+0x39c>)
 8000ece:	f001 f90c 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed8:	4863      	ldr	r0, [pc, #396]	; (8001068 <display7Seg+0x39c>)
 8000eda:	f001 f906 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	4860      	ldr	r0, [pc, #384]	; (8001068 <display7Seg+0x39c>)
 8000ee6:	f001 f900 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef0:	485d      	ldr	r0, [pc, #372]	; (8001068 <display7Seg+0x39c>)
 8000ef2:	f001 f8fa 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	485a      	ldr	r0, [pc, #360]	; (8001068 <display7Seg+0x39c>)
 8000efe:	f001 f8f4 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f08:	4857      	ldr	r0, [pc, #348]	; (8001068 <display7Seg+0x39c>)
 8000f0a:	f001 f8ee 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000f0e:	e0d8      	b.n	80010c2 <display7Seg+0x3f6>
	case 6:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f16:	4854      	ldr	r0, [pc, #336]	; (8001068 <display7Seg+0x39c>)
 8000f18:	f001 f8e7 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f22:	4851      	ldr	r0, [pc, #324]	; (8001068 <display7Seg+0x39c>)
 8000f24:	f001 f8e1 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2e:	484e      	ldr	r0, [pc, #312]	; (8001068 <display7Seg+0x39c>)
 8000f30:	f001 f8db 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3a:	484b      	ldr	r0, [pc, #300]	; (8001068 <display7Seg+0x39c>)
 8000f3c:	f001 f8d5 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f46:	4848      	ldr	r0, [pc, #288]	; (8001068 <display7Seg+0x39c>)
 8000f48:	f001 f8cf 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f52:	4845      	ldr	r0, [pc, #276]	; (8001068 <display7Seg+0x39c>)
 8000f54:	f001 f8c9 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f5e:	4842      	ldr	r0, [pc, #264]	; (8001068 <display7Seg+0x39c>)
 8000f60:	f001 f8c3 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000f64:	e0ad      	b.n	80010c2 <display7Seg+0x3f6>
	case 7:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	483e      	ldr	r0, [pc, #248]	; (8001068 <display7Seg+0x39c>)
 8000f6e:	f001 f8bc 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f78:	483b      	ldr	r0, [pc, #236]	; (8001068 <display7Seg+0x39c>)
 8000f7a:	f001 f8b6 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f84:	4838      	ldr	r0, [pc, #224]	; (8001068 <display7Seg+0x39c>)
 8000f86:	f001 f8b0 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f90:	4835      	ldr	r0, [pc, #212]	; (8001068 <display7Seg+0x39c>)
 8000f92:	f001 f8aa 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4832      	ldr	r0, [pc, #200]	; (8001068 <display7Seg+0x39c>)
 8000f9e:	f001 f8a4 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa8:	482f      	ldr	r0, [pc, #188]	; (8001068 <display7Seg+0x39c>)
 8000faa:	f001 f89e 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb4:	482c      	ldr	r0, [pc, #176]	; (8001068 <display7Seg+0x39c>)
 8000fb6:	f001 f898 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000fba:	e082      	b.n	80010c2 <display7Seg+0x3f6>
	case 8:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	4829      	ldr	r0, [pc, #164]	; (8001068 <display7Seg+0x39c>)
 8000fc4:	f001 f891 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fce:	4826      	ldr	r0, [pc, #152]	; (8001068 <display7Seg+0x39c>)
 8000fd0:	f001 f88b 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fda:	4823      	ldr	r0, [pc, #140]	; (8001068 <display7Seg+0x39c>)
 8000fdc:	f001 f885 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe6:	4820      	ldr	r0, [pc, #128]	; (8001068 <display7Seg+0x39c>)
 8000fe8:	f001 f87f 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff2:	481d      	ldr	r0, [pc, #116]	; (8001068 <display7Seg+0x39c>)
 8000ff4:	f001 f879 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffe:	481a      	ldr	r0, [pc, #104]	; (8001068 <display7Seg+0x39c>)
 8001000:	f001 f873 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100a:	4817      	ldr	r0, [pc, #92]	; (8001068 <display7Seg+0x39c>)
 800100c:	f001 f86d 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8001010:	e057      	b.n	80010c2 <display7Seg+0x3f6>
	case 9:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001018:	4813      	ldr	r0, [pc, #76]	; (8001068 <display7Seg+0x39c>)
 800101a:	f001 f866 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001024:	4810      	ldr	r0, [pc, #64]	; (8001068 <display7Seg+0x39c>)
 8001026:	f001 f860 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <display7Seg+0x39c>)
 8001032:	f001 f85a 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <display7Seg+0x39c>)
 800103e:	f001 f854 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <display7Seg+0x39c>)
 800104a:	f001 f84e 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <display7Seg+0x39c>)
 8001056:	f001 f848 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001060:	4801      	ldr	r0, [pc, #4]	; (8001068 <display7Seg+0x39c>)
 8001062:	f001 f842 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8001066:	e02c      	b.n	80010c2 <display7Seg+0x3f6>
 8001068:	40010800 	.word	0x40010800
	default:
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001072:	4816      	ldr	r0, [pc, #88]	; (80010cc <display7Seg+0x400>)
 8001074:	f001 f839 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <display7Seg+0x400>)
 8001080:	f001 f833 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108a:	4810      	ldr	r0, [pc, #64]	; (80010cc <display7Seg+0x400>)
 800108c:	f001 f82d 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <display7Seg+0x400>)
 8001098:	f001 f827 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <display7Seg+0x400>)
 80010a4:	f001 f821 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <display7Seg+0x400>)
 80010b0:	f001 f81b 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <display7Seg+0x400>)
 80010bc:	f001 f815 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 80010c0:	bf00      	nop
	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40010800 	.word	0x40010800

080010d0 <clearTrafficDisplay>:
	}
	//display7Seg(led_buffer[index]);
}


void clearTrafficDisplay(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2102      	movs	r1, #2
 80010d8:	480e      	ldr	r0, [pc, #56]	; (8001114 <clearTrafficDisplay+0x44>)
 80010da:	f001 f806 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2108      	movs	r1, #8
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <clearTrafficDisplay+0x44>)
 80010e4:	f001 f801 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2104      	movs	r1, #4
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <clearTrafficDisplay+0x44>)
 80010ee:	f000 fffc 	bl	80020ea <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2110      	movs	r1, #16
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <clearTrafficDisplay+0x44>)
 80010f8:	f000 fff7 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <clearTrafficDisplay+0x44>)
 8001102:	f000 fff2 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2120      	movs	r1, #32
 800110a:	4802      	ldr	r0, [pc, #8]	; (8001114 <clearTrafficDisplay+0x44>)
 800110c:	f000 ffed 	bl	80020ea <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40010800 	.word	0x40010800

08001118 <displayTrafficLight>:

void displayTrafficLight(int light1, int light2){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	switch(light1){
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d029      	beq.n	800117c <displayTrafficLight+0x64>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b03      	cmp	r3, #3
 800112c:	dc36      	bgt.n	800119c <displayTrafficLight+0x84>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d003      	beq.n	800113c <displayTrafficLight+0x24>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d010      	beq.n	800115c <displayTrafficLight+0x44>
 800113a:	e02f      	b.n	800119c <displayTrafficLight+0x84>
	case RED_LIGHT:
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2102      	movs	r1, #2
 8001140:	4837      	ldr	r0, [pc, #220]	; (8001220 <displayTrafficLight+0x108>)
 8001142:	f000 ffd2 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2108      	movs	r1, #8
 800114a:	4835      	ldr	r0, [pc, #212]	; (8001220 <displayTrafficLight+0x108>)
 800114c:	f000 ffcd 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2104      	movs	r1, #4
 8001154:	4832      	ldr	r0, [pc, #200]	; (8001220 <displayTrafficLight+0x108>)
 8001156:	f000 ffc8 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 800115a:	e01f      	b.n	800119c <displayTrafficLight+0x84>
	case YELLOW_LIGHT:
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2102      	movs	r1, #2
 8001160:	482f      	ldr	r0, [pc, #188]	; (8001220 <displayTrafficLight+0x108>)
 8001162:	f000 ffc2 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2108      	movs	r1, #8
 800116a:	482d      	ldr	r0, [pc, #180]	; (8001220 <displayTrafficLight+0x108>)
 800116c:	f000 ffbd 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2104      	movs	r1, #4
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <displayTrafficLight+0x108>)
 8001176:	f000 ffb8 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 800117a:	e00f      	b.n	800119c <displayTrafficLight+0x84>
	case GREEN_LIGHT:
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2102      	movs	r1, #2
 8001180:	4827      	ldr	r0, [pc, #156]	; (8001220 <displayTrafficLight+0x108>)
 8001182:	f000 ffb2 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2108      	movs	r1, #8
 800118a:	4825      	ldr	r0, [pc, #148]	; (8001220 <displayTrafficLight+0x108>)
 800118c:	f000 ffad 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2104      	movs	r1, #4
 8001194:	4822      	ldr	r0, [pc, #136]	; (8001220 <displayTrafficLight+0x108>)
 8001196:	f000 ffa8 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 800119a:	bf00      	nop
	}
	switch(light2){
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d029      	beq.n	80011f6 <displayTrafficLight+0xde>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	dc36      	bgt.n	8001216 <displayTrafficLight+0xfe>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d003      	beq.n	80011b6 <displayTrafficLight+0x9e>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d010      	beq.n	80011d6 <displayTrafficLight+0xbe>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
		break;
	}
}
 80011b4:	e02f      	b.n	8001216 <displayTrafficLight+0xfe>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2110      	movs	r1, #16
 80011ba:	4819      	ldr	r0, [pc, #100]	; (8001220 <displayTrafficLight+0x108>)
 80011bc:	f000 ff95 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <displayTrafficLight+0x108>)
 80011c6:	f000 ff90 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2120      	movs	r1, #32
 80011ce:	4814      	ldr	r0, [pc, #80]	; (8001220 <displayTrafficLight+0x108>)
 80011d0:	f000 ff8b 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 80011d4:	e01f      	b.n	8001216 <displayTrafficLight+0xfe>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2110      	movs	r1, #16
 80011da:	4811      	ldr	r0, [pc, #68]	; (8001220 <displayTrafficLight+0x108>)
 80011dc:	f000 ff85 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	; 0x40
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <displayTrafficLight+0x108>)
 80011e6:	f000 ff80 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2120      	movs	r1, #32
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <displayTrafficLight+0x108>)
 80011f0:	f000 ff7b 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 80011f4:	e00f      	b.n	8001216 <displayTrafficLight+0xfe>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2110      	movs	r1, #16
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <displayTrafficLight+0x108>)
 80011fc:	f000 ff75 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <displayTrafficLight+0x108>)
 8001206:	f000 ff70 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2120      	movs	r1, #32
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <displayTrafficLight+0x108>)
 8001210:	f000 ff6b 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8001214:	bf00      	nop
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40010800 	.word	0x40010800

08001224 <update7SegBufferAuto>:
//}
//void change7SegIndexInAuto(){
//	segmentIndexAuto++;
//	if(segmentIndexAuto >= MAX_LED_SEGMENT) segmentIndexAuto = 0;
//}
void update7SegBufferAuto(){
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	if( segment1Counter < 10) led_buffer_auto[0] = 0;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <update7SegBufferAuto+0x90>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b09      	cmp	r3, #9
 800122e:	dc03      	bgt.n	8001238 <update7SegBufferAuto+0x14>
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <update7SegBufferAuto+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e009      	b.n	800124c <update7SegBufferAuto+0x28>
	else led_buffer_auto[0] = segment1Counter / 10;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <update7SegBufferAuto+0x90>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <update7SegBufferAuto+0x98>)
 800123e:	fb82 1203 	smull	r1, r2, r2, r3
 8001242:	1092      	asrs	r2, r2, #2
 8001244:	17db      	asrs	r3, r3, #31
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <update7SegBufferAuto+0x94>)
 800124a:	6013      	str	r3, [r2, #0]
	led_buffer_auto[1] = segment1Counter % 10;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <update7SegBufferAuto+0x90>)
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <update7SegBufferAuto+0x98>)
 8001252:	fb83 2301 	smull	r2, r3, r3, r1
 8001256:	109a      	asrs	r2, r3, #2
 8001258:	17cb      	asrs	r3, r1, #31
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	1aca      	subs	r2, r1, r3
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <update7SegBufferAuto+0x94>)
 8001268:	605a      	str	r2, [r3, #4]
	if( segment2Counter < 10) led_buffer_auto[2] = 0;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <update7SegBufferAuto+0x9c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b09      	cmp	r3, #9
 8001270:	dc03      	bgt.n	800127a <update7SegBufferAuto+0x56>
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <update7SegBufferAuto+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	e009      	b.n	800128e <update7SegBufferAuto+0x6a>
	else led_buffer_auto[2] = segment2Counter / 10;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <update7SegBufferAuto+0x9c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <update7SegBufferAuto+0x98>)
 8001280:	fb82 1203 	smull	r1, r2, r2, r3
 8001284:	1092      	asrs	r2, r2, #2
 8001286:	17db      	asrs	r3, r3, #31
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <update7SegBufferAuto+0x94>)
 800128c:	6093      	str	r3, [r2, #8]
	led_buffer_auto[3] = segment2Counter % 10;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <update7SegBufferAuto+0x9c>)
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <update7SegBufferAuto+0x98>)
 8001294:	fb83 2301 	smull	r2, r3, r3, r1
 8001298:	109a      	asrs	r2, r3, #2
 800129a:	17cb      	asrs	r3, r1, #31
 800129c:	1ad2      	subs	r2, r2, r3
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	1aca      	subs	r2, r1, r3
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <update7SegBufferAuto+0x94>)
 80012aa:	60da      	str	r2, [r3, #12]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	20000064 	.word	0x20000064
 80012b8:	20000074 	.word	0x20000074
 80012bc:	66666667 	.word	0x66666667
 80012c0:	20000068 	.word	0x20000068

080012c4 <update7SegBufferManual>:
void update7SegBufferManual(){
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	led_buffer_manual[0] = tempCounter / 10;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <update7SegBufferManual+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <update7SegBufferManual+0x44>)
 80012ce:	fb82 1203 	smull	r1, r2, r2, r3
 80012d2:	1092      	asrs	r2, r2, #2
 80012d4:	17db      	asrs	r3, r3, #31
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <update7SegBufferManual+0x48>)
 80012da:	6013      	str	r3, [r2, #0]
	led_buffer_manual[1] = tempCounter % 10;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <update7SegBufferManual+0x40>)
 80012de:	6819      	ldr	r1, [r3, #0]
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <update7SegBufferManual+0x44>)
 80012e2:	fb83 2301 	smull	r2, r3, r3, r1
 80012e6:	109a      	asrs	r2, r3, #2
 80012e8:	17cb      	asrs	r3, r1, #31
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	1aca      	subs	r2, r1, r3
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <update7SegBufferManual+0x48>)
 80012f8:	605a      	str	r2, [r3, #4]
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000060 	.word	0x20000060
 8001308:	66666667 	.word	0x66666667
 800130c:	20000084 	.word	0x20000084

08001310 <display7SegAuto>:

void display7SegAuto(int index){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d85e      	bhi.n	80013dc <display7SegAuto+0xcc>
 800131e:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <display7SegAuto+0x14>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	08001335 	.word	0x08001335
 8001328:	0800135f 	.word	0x0800135f
 800132c:	08001389 	.word	0x08001389
 8001330:	080013b3 	.word	0x080013b3
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2110      	movs	r1, #16
 8001338:	482e      	ldr	r0, [pc, #184]	; (80013f4 <display7SegAuto+0xe4>)
 800133a:	f000 fed6 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2120      	movs	r1, #32
 8001342:	482c      	ldr	r0, [pc, #176]	; (80013f4 <display7SegAuto+0xe4>)
 8001344:	f000 fed1 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	4829      	ldr	r0, [pc, #164]	; (80013f4 <display7SegAuto+0xe4>)
 800134e:	f000 fecc 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	4827      	ldr	r0, [pc, #156]	; (80013f4 <display7SegAuto+0xe4>)
 8001358:	f000 fec7 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 800135c:	e03f      	b.n	80013de <display7SegAuto+0xce>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2110      	movs	r1, #16
 8001362:	4824      	ldr	r0, [pc, #144]	; (80013f4 <display7SegAuto+0xe4>)
 8001364:	f000 fec1 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2120      	movs	r1, #32
 800136c:	4821      	ldr	r0, [pc, #132]	; (80013f4 <display7SegAuto+0xe4>)
 800136e:	f000 febc 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2140      	movs	r1, #64	; 0x40
 8001376:	481f      	ldr	r0, [pc, #124]	; (80013f4 <display7SegAuto+0xe4>)
 8001378:	f000 feb7 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	481c      	ldr	r0, [pc, #112]	; (80013f4 <display7SegAuto+0xe4>)
 8001382:	f000 feb2 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8001386:	e02a      	b.n	80013de <display7SegAuto+0xce>
	case 2:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2110      	movs	r1, #16
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <display7SegAuto+0xe4>)
 800138e:	f000 feac 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2120      	movs	r1, #32
 8001396:	4817      	ldr	r0, [pc, #92]	; (80013f4 <display7SegAuto+0xe4>)
 8001398:	f000 fea7 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4814      	ldr	r0, [pc, #80]	; (80013f4 <display7SegAuto+0xe4>)
 80013a2:	f000 fea2 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	4812      	ldr	r0, [pc, #72]	; (80013f4 <display7SegAuto+0xe4>)
 80013ac:	f000 fe9d 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 80013b0:	e015      	b.n	80013de <display7SegAuto+0xce>
	case 3:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2110      	movs	r1, #16
 80013b6:	480f      	ldr	r0, [pc, #60]	; (80013f4 <display7SegAuto+0xe4>)
 80013b8:	f000 fe97 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2120      	movs	r1, #32
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <display7SegAuto+0xe4>)
 80013c2:	f000 fe92 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	480a      	ldr	r0, [pc, #40]	; (80013f4 <display7SegAuto+0xe4>)
 80013cc:	f000 fe8d 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <display7SegAuto+0xe4>)
 80013d6:	f000 fe88 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 80013da:	e000      	b.n	80013de <display7SegAuto+0xce>
	default:
		break;
 80013dc:	bf00      	nop
	}
	display7Seg(led_buffer_auto[index]);
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <display7SegAuto+0xe8>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fc70 	bl	8000ccc <display7Seg>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	20000074 	.word	0x20000074

080013fc <display7SegManual>:
void display7SegManual(int index){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	switch(index){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <display7SegManual+0x16>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d015      	beq.n	800143c <display7SegManual+0x40>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
		break;
	default:
		break;
 8001410:	e029      	b.n	8001466 <display7SegManual+0x6a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2110      	movs	r1, #16
 8001416:	4819      	ldr	r0, [pc, #100]	; (800147c <display7SegManual+0x80>)
 8001418:	f000 fe67 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2120      	movs	r1, #32
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <display7SegManual+0x80>)
 8001422:	f000 fe62 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	2140      	movs	r1, #64	; 0x40
 800142a:	4814      	ldr	r0, [pc, #80]	; (800147c <display7SegManual+0x80>)
 800142c:	f000 fe5d 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4811      	ldr	r0, [pc, #68]	; (800147c <display7SegManual+0x80>)
 8001436:	f000 fe58 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 800143a:	e014      	b.n	8001466 <display7SegManual+0x6a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2110      	movs	r1, #16
 8001440:	480e      	ldr	r0, [pc, #56]	; (800147c <display7SegManual+0x80>)
 8001442:	f000 fe52 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2120      	movs	r1, #32
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <display7SegManual+0x80>)
 800144c:	f000 fe4d 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <display7SegManual+0x80>)
 8001456:	f000 fe48 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <display7SegManual+0x80>)
 8001460:	f000 fe43 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8001464:	bf00      	nop
	}
	display7Seg(led_buffer_manual[index]);
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <display7SegManual+0x84>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc2c 	bl	8000ccc <display7Seg>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40010c00 	.word	0x40010c00
 8001480:	20000084 	.word	0x20000084

08001484 <clear7Seg>:
void clear7Seg(){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	2110      	movs	r1, #16
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <clear7Seg+0x30>)
 800148e:	f000 fe2c 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2120      	movs	r1, #32
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <clear7Seg+0x30>)
 8001498:	f000 fe27 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2140      	movs	r1, #64	; 0x40
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <clear7Seg+0x30>)
 80014a2:	f000 fe22 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <clear7Seg+0x30>)
 80014ac:	f000 fe1d 	bl	80020ea <HAL_GPIO_WritePin>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40010c00 	.word	0x40010c00

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014bc:	f000 fb14 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f816 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c4:	f000 f89c 	bl	8001600 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014c8:	f000 f84e 	bl	8001568 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <main+0x30>)
 80014ce:	f001 fa75 	bl	80029bc <HAL_TIM_Base_Start_IT>
  state = IDLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <main+0x34>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  trafficLight_automatic();
 80014d8:	f7fe ff42 	bl	8000360 <trafficLight_automatic>
	  trafficLight_manual();
 80014dc:	f7ff f964 	bl	80007a8 <trafficLight_manual>
	  triggerLed();
 80014e0:	f7ff fb6a 	bl	8000bb8 <triggerLed>
	  trafficLight_automatic();
 80014e4:	e7f8      	b.n	80014d8 <main+0x20>
 80014e6:	bf00      	nop
 80014e8:	200000e8 	.word	0x200000e8
 80014ec:	200000e4 	.word	0x200000e4

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b090      	sub	sp, #64	; 0x40
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	2228      	movs	r2, #40	; 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fe14 	bl	800312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001516:	2301      	movs	r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151a:	2310      	movs	r3, #16
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800151e:	2300      	movs	r3, #0
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fe10 	bl	800214c <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001532:	f000 f8d1 	bl	80016d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f001 f87c 	bl	800264c <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800155a:	f000 f8bd 	bl	80016d8 <Error_Handler>
  }
}
 800155e:	bf00      	nop
 8001560:	3740      	adds	r7, #64	; 0x40
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_TIM2_Init+0x94>)
 8001586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_TIM2_Init+0x94>)
 800158e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001592:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_TIM2_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_TIM2_Init+0x94>)
 800159c:	2209      	movs	r2, #9
 800159e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <MX_TIM2_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_TIM2_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <MX_TIM2_Init+0x94>)
 80015ae:	f001 f9b5 	bl	800291c <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015b8:	f000 f88e 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_TIM2_Init+0x94>)
 80015ca:	f001 fb4b 	bl	8002c64 <HAL_TIM_ConfigClockSource>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015d4:	f000 f880 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_TIM2_Init+0x94>)
 80015e6:	f001 fd13 	bl	8003010 <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f000 f872 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200000e8 	.word	0x200000e8

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <MX_GPIO_Init+0xb4>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <MX_GPIO_Init+0xb4>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <MX_GPIO_Init+0xb4>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <MX_GPIO_Init+0xb4>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <MX_GPIO_Init+0xb4>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <MX_GPIO_Init+0xb4>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8001644:	2200      	movs	r2, #0
 8001646:	f64f 617e 	movw	r1, #65150	; 0xfe7e
 800164a:	481b      	ldr	r0, [pc, #108]	; (80016b8 <MX_GPIO_Init+0xb8>)
 800164c:	f000 fd4d 	bl	80020ea <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	21f0      	movs	r1, #240	; 0xf0
 8001654:	4819      	ldr	r0, [pc, #100]	; (80016bc <MX_GPIO_Init+0xbc>)
 8001656:	f000 fd48 	bl	80020ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           SEG7_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 800165a:	f64f 637e 	movw	r3, #65150	; 0xfe7e
 800165e:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG1_Pin|SEG2_Pin
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2302      	movs	r3, #2
 800166a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <MX_GPIO_Init+0xb8>)
 8001674:	f000 fba8 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_SELECT_Pin BTN_MODIFY_Pin BTN_SET_Pin */
  GPIO_InitStruct.Pin = BTN_SELECT_Pin|BTN_MODIFY_Pin|BTN_SET_Pin;
 8001678:	2307      	movs	r3, #7
 800167a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4619      	mov	r1, r3
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_GPIO_Init+0xbc>)
 800168c:	f000 fb9c 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin;
 8001690:	23f0      	movs	r3, #240	; 0xf0
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4619      	mov	r1, r3
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_GPIO_Init+0xbc>)
 80016a8:	f000 fb8e 	bl	8001dc8 <HAL_GPIO_Init>

}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40010c00 	.word	0x40010c00

080016c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	timer_run();
 80016c8:	f000 f8b4 	bl	8001834 <timer_run>
	readKeyInput();
 80016cc:	f7fe fd3e 	bl	800014c <readKeyInput>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <setTimerTraffic1>:
 *  Created on: Nov 16, 2022
 *      Author: pmt12
 */
#include "software_timer.h"

void setTimerTraffic1(int duration){
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	trafficTimer1_counter = duration/TIMER_CYCLE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <setTimerTraffic1+0x2c>)
 80016f0:	fb82 1203 	smull	r1, r2, r2, r3
 80016f4:	1092      	asrs	r2, r2, #2
 80016f6:	17db      	asrs	r3, r3, #31
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	4a06      	ldr	r2, [pc, #24]	; (8001714 <setTimerTraffic1+0x30>)
 80016fc:	6013      	str	r3, [r2, #0]
	trafficTimer1_flag = 0;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <setTimerTraffic1+0x34>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	66666667 	.word	0x66666667
 8001714:	200000b8 	.word	0x200000b8
 8001718:	20000094 	.word	0x20000094

0800171c <setTimerWait>:
void setTimerTraffic2(int duration){
	trafficTimer2_counter = duration/TIMER_CYCLE;
	trafficTimer2_flag = 0;
}

void setTimerWait(int duration){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	waitTimer_counter = duration/TIMER_CYCLE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <setTimerWait+0x2c>)
 8001728:	fb82 1203 	smull	r1, r2, r2, r3
 800172c:	1092      	asrs	r2, r2, #2
 800172e:	17db      	asrs	r3, r3, #31
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	4a06      	ldr	r2, [pc, #24]	; (800174c <setTimerWait+0x30>)
 8001734:	6013      	str	r3, [r2, #0]
	waitTimer_flag = 0;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <setTimerWait+0x34>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	66666667 	.word	0x66666667
 800174c:	200000c0 	.word	0x200000c0
 8001750:	2000009c 	.word	0x2000009c

08001754 <setTimerModify>:

void setTimerModify(int duration){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	modifyTimer_counter = duration/TIMER_CYCLE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <setTimerModify+0x2c>)
 8001760:	fb82 1203 	smull	r1, r2, r2, r3
 8001764:	1092      	asrs	r2, r2, #2
 8001766:	17db      	asrs	r3, r3, #31
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	4a06      	ldr	r2, [pc, #24]	; (8001784 <setTimerModify+0x30>)
 800176c:	6013      	str	r3, [r2, #0]
	modifyTimer_flag = 0;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <setTimerModify+0x34>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	66666667 	.word	0x66666667
 8001784:	200000c4 	.word	0x200000c4
 8001788:	200000a0 	.word	0x200000a0

0800178c <setTimerTriggerLed>:

void setTimerTriggerLed(int duration){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	timerLed_counter = duration/TIMER_CYCLE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <setTimerTriggerLed+0x2c>)
 8001798:	fb82 1203 	smull	r1, r2, r2, r3
 800179c:	1092      	asrs	r2, r2, #2
 800179e:	17db      	asrs	r3, r3, #31
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	4a06      	ldr	r2, [pc, #24]	; (80017bc <setTimerTriggerLed+0x30>)
 80017a4:	6013      	str	r3, [r2, #0]
	timerLed_flag = 0;
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <setTimerTriggerLed+0x34>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	66666667 	.word	0x66666667
 80017bc:	200000b4 	.word	0x200000b4
 80017c0:	200000a4 	.word	0x200000a4

080017c4 <setTimerCounter1>:

void setTimerCounter1(int duration){
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	countDownTimer1_counter = duration/TIMER_CYCLE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <setTimerCounter1+0x2c>)
 80017d0:	fb82 1203 	smull	r1, r2, r2, r3
 80017d4:	1092      	asrs	r2, r2, #2
 80017d6:	17db      	asrs	r3, r3, #31
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <setTimerCounter1+0x30>)
 80017dc:	6013      	str	r3, [r2, #0]
	countDownTimer1_flag = 0;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <setTimerCounter1+0x34>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	66666667 	.word	0x66666667
 80017f4:	200000c8 	.word	0x200000c8
 80017f8:	200000a8 	.word	0x200000a8

080017fc <setTimerScanFreq>:
void setTimerCounter2(int duration){
	countDownTimer2_counter = duration/TIMER_CYCLE;
	countDownTimer2_flag = 0;
}

void setTimerScanFreq(int duration){
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	scanFreqTimer_counter = duration/TIMER_CYCLE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <setTimerScanFreq+0x2c>)
 8001808:	fb82 1203 	smull	r1, r2, r2, r3
 800180c:	1092      	asrs	r2, r2, #2
 800180e:	17db      	asrs	r3, r3, #31
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	4a06      	ldr	r2, [pc, #24]	; (800182c <setTimerScanFreq+0x30>)
 8001814:	6013      	str	r3, [r2, #0]
	scanFreqTimer_flag = 0;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <setTimerScanFreq+0x34>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	66666667 	.word	0x66666667
 800182c:	200000d0 	.word	0x200000d0
 8001830:	200000b0 	.word	0x200000b0

08001834 <timer_run>:

void timer_run(){
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	if(trafficTimer1_counter >= 0){
 8001838:	4b41      	ldr	r3, [pc, #260]	; (8001940 <timer_run+0x10c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0b      	blt.n	8001858 <timer_run+0x24>
		trafficTimer1_counter --;
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <timer_run+0x10c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <timer_run+0x10c>)
 8001848:	6013      	str	r3, [r2, #0]
		if(trafficTimer1_counter == 0) trafficTimer1_flag = 1;
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <timer_run+0x10c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <timer_run+0x24>
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <timer_run+0x110>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]
	}
	if(trafficTimer2_counter >= 0){
 8001858:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <timer_run+0x114>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0b      	blt.n	8001878 <timer_run+0x44>
		trafficTimer2_counter --;
 8001860:	4b39      	ldr	r3, [pc, #228]	; (8001948 <timer_run+0x114>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	4a38      	ldr	r2, [pc, #224]	; (8001948 <timer_run+0x114>)
 8001868:	6013      	str	r3, [r2, #0]
		if(trafficTimer2_counter == 0) trafficTimer2_flag = 1;
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <timer_run+0x114>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <timer_run+0x44>
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <timer_run+0x118>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
	}
	if(waitTimer_counter >= 0){
 8001878:	4b35      	ldr	r3, [pc, #212]	; (8001950 <timer_run+0x11c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0b      	blt.n	8001898 <timer_run+0x64>
		waitTimer_counter --;
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <timer_run+0x11c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	4a32      	ldr	r2, [pc, #200]	; (8001950 <timer_run+0x11c>)
 8001888:	6013      	str	r3, [r2, #0]
		if(waitTimer_counter == 0) waitTimer_flag = 1;
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <timer_run+0x11c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <timer_run+0x64>
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <timer_run+0x120>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
	}
	if(modifyTimer_counter >= 0){
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <timer_run+0x124>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0b      	blt.n	80018b8 <timer_run+0x84>
		modifyTimer_counter --;
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <timer_run+0x124>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a2c      	ldr	r2, [pc, #176]	; (8001958 <timer_run+0x124>)
 80018a8:	6013      	str	r3, [r2, #0]
		if(modifyTimer_counter == 0) modifyTimer_flag = 1;
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <timer_run+0x124>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <timer_run+0x84>
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <timer_run+0x128>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
	}
	if(timerLed_counter >= 0){
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <timer_run+0x12c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0b      	blt.n	80018d8 <timer_run+0xa4>
		timerLed_counter --;
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <timer_run+0x12c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4a26      	ldr	r2, [pc, #152]	; (8001960 <timer_run+0x12c>)
 80018c8:	6013      	str	r3, [r2, #0]
		if(timerLed_counter == 0) timerLed_flag = 1;
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <timer_run+0x12c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <timer_run+0xa4>
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <timer_run+0x130>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer1_counter >= 0){
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <timer_run+0x134>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0b      	blt.n	80018f8 <timer_run+0xc4>
		countDownTimer1_counter --;
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <timer_run+0x134>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	4a20      	ldr	r2, [pc, #128]	; (8001968 <timer_run+0x134>)
 80018e8:	6013      	str	r3, [r2, #0]
		if(countDownTimer1_counter == 0) countDownTimer1_flag = 1;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <timer_run+0x134>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <timer_run+0xc4>
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <timer_run+0x138>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
	}
	if(countDownTimer2_counter >= 0){
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <timer_run+0x13c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0b      	blt.n	8001918 <timer_run+0xe4>
		countDownTimer2_counter --;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <timer_run+0x13c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <timer_run+0x13c>)
 8001908:	6013      	str	r3, [r2, #0]
		if(countDownTimer2_counter == 0) countDownTimer2_flag = 1;
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <timer_run+0x13c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <timer_run+0xe4>
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <timer_run+0x140>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
	}
	if(scanFreqTimer_counter >= 0){
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <timer_run+0x144>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0b      	blt.n	8001938 <timer_run+0x104>
		scanFreqTimer_counter --;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <timer_run+0x144>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	4a14      	ldr	r2, [pc, #80]	; (8001978 <timer_run+0x144>)
 8001928:	6013      	str	r3, [r2, #0]
		if(scanFreqTimer_counter == 0) scanFreqTimer_flag = 1;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <timer_run+0x144>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <timer_run+0x104>
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <timer_run+0x148>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
	}
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	200000b8 	.word	0x200000b8
 8001944:	20000094 	.word	0x20000094
 8001948:	200000bc 	.word	0x200000bc
 800194c:	20000098 	.word	0x20000098
 8001950:	200000c0 	.word	0x200000c0
 8001954:	2000009c 	.word	0x2000009c
 8001958:	200000c4 	.word	0x200000c4
 800195c:	200000a0 	.word	0x200000a0
 8001960:	200000b4 	.word	0x200000b4
 8001964:	200000a4 	.word	0x200000a4
 8001968:	200000c8 	.word	0x200000c8
 800196c:	200000a8 	.word	0x200000a8
 8001970:	200000cc 	.word	0x200000cc
 8001974:	200000ac 	.word	0x200000ac
 8001978:	200000d0 	.word	0x200000d0
 800197c:	200000b0 	.word	0x200000b0

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_MspInit+0x5c>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_MspInit+0x5c>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6193      	str	r3, [r2, #24]
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_MspInit+0x5c>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_MspInit+0x5c>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_MspInit+0x5c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_MspInit+0x5c>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_MspInit+0x60>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_MspInit+0x60>)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000

080019e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f4:	d113      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0x44>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_TIM_Base_MspInit+0x44>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_TIM_Base_MspInit+0x44>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	201c      	movs	r0, #28
 8001a14:	f000 f9a1 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a18:	201c      	movs	r0, #28
 8001a1a:	f000 f9ba 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a72:	f000 f87f 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM2_IRQHandler+0x10>)
 8001a82:	f000 ffe7 	bl	8002a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200000e8 	.word	0x200000e8

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ac2:	f7ff ffe5 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f001 fb0d 	bl	80030e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7ff fcf5 	bl	80014b8 <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001ad8:	0800317c 	.word	0x0800317c
  ldr r2, =_sbss
 8001adc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001ae0:	20000134 	.word	0x20000134

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x28>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f923 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff ff3c 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f93b 	bl	8001dae <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 f903 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000000c 	.word	0x2000000c
 8001b6c:	20000014 	.word	0x20000014
 8001b70:	20000010 	.word	0x20000010

08001b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_IncTick+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000014 	.word	0x20000014
 8001b94:	20000130 	.word	0x20000130

08001b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000130 	.word	0x20000130

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <__NVIC_EnableIRQ+0x34>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff90 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff2d 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff42 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff35 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa2 	bl	8001d00 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b08b      	sub	sp, #44	; 0x2c
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e148      	b.n	800206e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 8137 	bne.w	8002068 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4aa3      	ldr	r2, [pc, #652]	; (800208c <HAL_GPIO_Init+0x2c4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d05e      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e04:	4aa1      	ldr	r2, [pc, #644]	; (800208c <HAL_GPIO_Init+0x2c4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d875      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e0a:	4aa1      	ldr	r2, [pc, #644]	; (8002090 <HAL_GPIO_Init+0x2c8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d058      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e10:	4a9f      	ldr	r2, [pc, #636]	; (8002090 <HAL_GPIO_Init+0x2c8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d86f      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e16:	4a9f      	ldr	r2, [pc, #636]	; (8002094 <HAL_GPIO_Init+0x2cc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d052      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a9d      	ldr	r2, [pc, #628]	; (8002094 <HAL_GPIO_Init+0x2cc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d869      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e22:	4a9d      	ldr	r2, [pc, #628]	; (8002098 <HAL_GPIO_Init+0x2d0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d04c      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e28:	4a9b      	ldr	r2, [pc, #620]	; (8002098 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d863      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a9b      	ldr	r2, [pc, #620]	; (800209c <HAL_GPIO_Init+0x2d4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d046      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e34:	4a99      	ldr	r2, [pc, #612]	; (800209c <HAL_GPIO_Init+0x2d4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d85d      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d82a      	bhi.n	8001e94 <HAL_GPIO_Init+0xcc>
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d859      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <HAL_GPIO_Init+0x80>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001e9d 	.word	0x08001e9d
 8001e50:	08001eaf 	.word	0x08001eaf
 8001e54:	08001ef1 	.word	0x08001ef1
 8001e58:	08001ef7 	.word	0x08001ef7
 8001e5c:	08001ef7 	.word	0x08001ef7
 8001e60:	08001ef7 	.word	0x08001ef7
 8001e64:	08001ef7 	.word	0x08001ef7
 8001e68:	08001ef7 	.word	0x08001ef7
 8001e6c:	08001ef7 	.word	0x08001ef7
 8001e70:	08001ef7 	.word	0x08001ef7
 8001e74:	08001ef7 	.word	0x08001ef7
 8001e78:	08001ef7 	.word	0x08001ef7
 8001e7c:	08001ef7 	.word	0x08001ef7
 8001e80:	08001ef7 	.word	0x08001ef7
 8001e84:	08001ef7 	.word	0x08001ef7
 8001e88:	08001ef7 	.word	0x08001ef7
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001eb9 	.word	0x08001eb9
 8001e94:	4a82      	ldr	r2, [pc, #520]	; (80020a0 <HAL_GPIO_Init+0x2d8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9a:	e02c      	b.n	8001ef6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e029      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e024      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e01f      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e01a      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e013      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	611a      	str	r2, [r3, #16]
          break;
 8001ee2:	e009      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	615a      	str	r2, [r3, #20]
          break;
 8001eee:	e003      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          break;
 8001ef6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2bff      	cmp	r3, #255	; 0xff
 8001efc:	d801      	bhi.n	8001f02 <HAL_GPIO_Init+0x13a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	e001      	b.n	8001f06 <HAL_GPIO_Init+0x13e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d802      	bhi.n	8001f14 <HAL_GPIO_Init+0x14c>
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x152>
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	3b08      	subs	r3, #8
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	210f      	movs	r1, #15
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	6a39      	ldr	r1, [r7, #32]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8090 	beq.w	8002068 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f48:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a55      	ldr	r2, [pc, #340]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f60:	4a51      	ldr	r2, [pc, #324]	; (80020a8 <HAL_GPIO_Init+0x2e0>)
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a49      	ldr	r2, [pc, #292]	; (80020ac <HAL_GPIO_Init+0x2e4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_GPIO_Init+0x1e0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d007      	beq.n	8001fa4 <HAL_GPIO_Init+0x1dc>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_GPIO_Init+0x2ec>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_GPIO_Init+0x1d8>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e004      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fba:	493b      	ldr	r1, [pc, #236]	; (80020a8 <HAL_GPIO_Init+0x2e0>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4937      	ldr	r1, [pc, #220]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4933      	ldr	r1, [pc, #204]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	492d      	ldr	r1, [pc, #180]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200a:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4929      	ldr	r1, [pc, #164]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002014:	4013      	ands	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4923      	ldr	r1, [pc, #140]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	491f      	ldr	r1, [pc, #124]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800203c:	4013      	ands	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	4919      	ldr	r1, [pc, #100]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4915      	ldr	r1, [pc, #84]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002064:	4013      	ands	r3, r2
 8002066:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	3301      	adds	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f aeaf 	bne.w	8001ddc <HAL_GPIO_Init+0x14>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	372c      	adds	r7, #44	; 0x2c
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	10320000 	.word	0x10320000
 8002090:	10310000 	.word	0x10310000
 8002094:	10220000 	.word	0x10220000
 8002098:	10210000 	.word	0x10210000
 800209c:	10120000 	.word	0x10120000
 80020a0:	10110000 	.word	0x10110000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e001      	b.n	80020de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
 80020f6:	4613      	mov	r3, r2
 80020f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fa:	787b      	ldrb	r3, [r7, #1]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002100:	887a      	ldrh	r2, [r7, #2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002106:	e003      	b.n	8002110 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800212c:	887a      	ldrh	r2, [r7, #2]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	041a      	lsls	r2, r3, #16
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43d9      	mvns	r1, r3
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	400b      	ands	r3, r1
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e26c      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8087 	beq.w	800227a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800216c:	4b92      	ldr	r3, [pc, #584]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b04      	cmp	r3, #4
 8002176:	d00c      	beq.n	8002192 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002178:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b08      	cmp	r3, #8
 8002182:	d112      	bne.n	80021aa <HAL_RCC_OscConfig+0x5e>
 8002184:	4b8c      	ldr	r3, [pc, #560]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002190:	d10b      	bne.n	80021aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002192:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d06c      	beq.n	8002278 <HAL_RCC_OscConfig+0x12c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d168      	bne.n	8002278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e246      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x76>
 80021b4:	4b80      	ldr	r3, [pc, #512]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a7f      	ldr	r2, [pc, #508]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e02e      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x98>
 80021ca:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7a      	ldr	r2, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b78      	ldr	r3, [pc, #480]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a77      	ldr	r2, [pc, #476]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e01d      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0xbc>
 80021ee:	4b72      	ldr	r3, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a71      	ldr	r2, [pc, #452]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 8002208:	4b6b      	ldr	r3, [pc, #428]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6a      	ldr	r2, [pc, #424]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a67      	ldr	r2, [pc, #412]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff fcb6 	bl	8001b98 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002230:	f7ff fcb2 	bl	8001b98 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e1fa      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b5d      	ldr	r3, [pc, #372]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xe4>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fca2 	bl	8001b98 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff fc9e 	bl	8001b98 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1e6      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x10c>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002286:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d11c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x18c>
 800229e:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x176>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e1ba      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4939      	ldr	r1, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	e03a      	b.n	800234e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e0:	4b36      	ldr	r3, [pc, #216]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fc57 	bl	8001b98 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7ff fc53 	bl	8001b98 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e19b      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4927      	ldr	r1, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fc36 	bl	8001b98 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002330:	f7ff fc32 	bl	8001b98 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e17a      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03a      	beq.n	80023d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d019      	beq.n	8002396 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7ff fc16 	bl	8001b98 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002370:	f7ff fc12 	bl	8001b98 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e15a      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800238e:	2001      	movs	r0, #1
 8002390:	f000 faa6 	bl	80028e0 <RCC_Delay>
 8002394:	e01c      	b.n	80023d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239c:	f7ff fbfc 	bl	8001b98 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a2:	e00f      	b.n	80023c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a4:	f7ff fbf8 	bl	8001b98 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d908      	bls.n	80023c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e140      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	42420000 	.word	0x42420000
 80023c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b9e      	ldr	r3, [pc, #632]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1e9      	bne.n	80023a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a6 	beq.w	800252a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e2:	4b97      	ldr	r3, [pc, #604]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10d      	bne.n	800240a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b94      	ldr	r3, [pc, #592]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a93      	ldr	r2, [pc, #588]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	61d3      	str	r3, [r2, #28]
 80023fa:	4b91      	ldr	r3, [pc, #580]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b8e      	ldr	r3, [pc, #568]	; (8002644 <HAL_RCC_OscConfig+0x4f8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d118      	bne.n	8002448 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b8b      	ldr	r3, [pc, #556]	; (8002644 <HAL_RCC_OscConfig+0x4f8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a8a      	ldr	r2, [pc, #552]	; (8002644 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002422:	f7ff fbb9 	bl	8001b98 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7ff fbb5 	bl	8001b98 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0fd      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4b81      	ldr	r3, [pc, #516]	; (8002644 <HAL_RCC_OscConfig+0x4f8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x312>
 8002450:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a7a      	ldr	r2, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	e02d      	b.n	80024ba <HAL_RCC_OscConfig+0x36e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x334>
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	4b73      	ldr	r3, [pc, #460]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a72      	ldr	r2, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 0304 	bic.w	r3, r3, #4
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	e01c      	b.n	80024ba <HAL_RCC_OscConfig+0x36e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b05      	cmp	r3, #5
 8002486:	d10c      	bne.n	80024a2 <HAL_RCC_OscConfig+0x356>
 8002488:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a6c      	ldr	r2, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a69      	ldr	r2, [pc, #420]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e00b      	b.n	80024ba <HAL_RCC_OscConfig+0x36e>
 80024a2:	4b67      	ldr	r3, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a66      	ldr	r2, [pc, #408]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	4b64      	ldr	r3, [pc, #400]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a63      	ldr	r2, [pc, #396]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d015      	beq.n	80024ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7ff fb69 	bl	8001b98 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7ff fb65 	bl	8001b98 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0ab      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	4b57      	ldr	r3, [pc, #348]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ee      	beq.n	80024ca <HAL_RCC_OscConfig+0x37e>
 80024ec:	e014      	b.n	8002518 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7ff fb53 	bl	8001b98 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7ff fb4f 	bl	8001b98 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e095      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ee      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4b48      	ldr	r3, [pc, #288]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4a47      	ldr	r2, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002528:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8081 	beq.w	8002636 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b08      	cmp	r3, #8
 800253e:	d061      	beq.n	8002604 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d146      	bne.n	80025d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_OscConfig+0x4fc>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff fb23 	bl	8001b98 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7ff fb1f 	bl	8001b98 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e067      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002568:	4b35      	ldr	r3, [pc, #212]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d108      	bne.n	8002590 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	492d      	ldr	r1, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a19      	ldr	r1, [r3, #32]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	430b      	orrs	r3, r1
 80025a2:	4927      	ldr	r1, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x4fc>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff faf3 	bl	8001b98 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff faef 	bl	8001b98 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e037      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x46a>
 80025d4:	e02f      	b.n	8002636 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_RCC_OscConfig+0x4fc>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff fadc 	bl	8001b98 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7ff fad8 	bl	8001b98 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e020      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x498>
 8002602:	e018      	b.n	8002636 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e013      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
 8002648:	42420060 	.word	0x42420060

0800264c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d0      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b67      	ldr	r3, [pc, #412]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	4965      	ldr	r1, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d040      	beq.n	800276c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e073      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06b      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4936      	ldr	r1, [pc, #216]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273c:	f7ff fa2c 	bl	8001b98 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7ff fa28 	bl	8001b98 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e053      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d210      	bcs.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4922      	ldr	r1, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1cc>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1d0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f98a 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40022000 	.word	0x40022000
 8002810:	40021000 	.word	0x40021000
 8002814:	08003164 	.word	0x08003164
 8002818:	2000000c 	.word	0x2000000c
 800281c:	20000010 	.word	0x20000010

08002820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b490      	push	{r4, r7}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002828:	1d3c      	adds	r4, r7, #4
 800282a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800282c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002830:	f240 2301 	movw	r3, #513	; 0x201
 8002834:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800284a:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d002      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x40>
 800285a:	2b08      	cmp	r3, #8
 800285c:	d003      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x46>
 800285e:	e02d      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002862:	623b      	str	r3, [r7, #32]
      break;
 8002864:	e02d      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	0c9b      	lsrs	r3, r3, #18
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002872:	4413      	add	r3, r2
 8002874:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002878:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d013      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0c5b      	lsrs	r3, r3, #17
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002892:	4413      	add	r3, r2
 8002894:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002898:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289e:	fb02 f203 	mul.w	r2, r2, r3
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
 80028aa:	e004      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	623b      	str	r3, [r7, #32]
      break;
 80028ba:	e002      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028be:	623b      	str	r3, [r7, #32]
      break;
 80028c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c2:	6a3b      	ldr	r3, [r7, #32]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3728      	adds	r7, #40	; 0x28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc90      	pop	{r4, r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	08003154 	.word	0x08003154
 80028d4:	40021000 	.word	0x40021000
 80028d8:	007a1200 	.word	0x007a1200
 80028dc:	003d0900 	.word	0x003d0900

080028e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <RCC_Delay+0x34>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <RCC_Delay+0x38>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0a5b      	lsrs	r3, r3, #9
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028fc:	bf00      	nop
  }
  while (Delay --);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f9      	bne.n	80028fc <RCC_Delay+0x1c>
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	2000000c 	.word	0x2000000c
 8002918:	10624dd3 	.word	0x10624dd3

0800291c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e041      	b.n	80029b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff f84e 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f000 fa6a 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d001      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e035      	b.n	8002a40 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_TIM_Base_Start_IT+0x90>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x4e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fe:	d004      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x4e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_TIM_Base_Start_IT+0x94>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d111      	bne.n	8002a2e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d010      	beq.n	8002a3e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2c:	e007      	b.n	8002a3e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400

08002a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0202 	mvn.w	r2, #2
 8002a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9b1 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f9a4 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f9b3 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d122      	bne.n	8002b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d11b      	bne.n	8002b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0204 	mvn.w	r2, #4
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f987 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f97a 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f989 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d122      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0208 	mvn.w	r2, #8
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f95d 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f950 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f95f 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0210 	mvn.w	r2, #16
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2208      	movs	r2, #8
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f933 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f926 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f935 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0201 	mvn.w	r2, #1
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe fd74 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d107      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa67 	bl	80030d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8f9 	bl	8002e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0220 	mvn.w	r2, #32
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa32 	bl	80030c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_TIM_ConfigClockSource+0x18>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0b3      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x180>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ca2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb4:	d03e      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0xd0>
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cba:	f200 8087 	bhi.w	8002dcc <HAL_TIM_ConfigClockSource+0x168>
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc2:	f000 8085 	beq.w	8002dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cca:	d87f      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x168>
 8002ccc:	2b70      	cmp	r3, #112	; 0x70
 8002cce:	d01a      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0xa2>
 8002cd0:	2b70      	cmp	r3, #112	; 0x70
 8002cd2:	d87b      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x168>
 8002cd4:	2b60      	cmp	r3, #96	; 0x60
 8002cd6:	d050      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x116>
 8002cd8:	2b60      	cmp	r3, #96	; 0x60
 8002cda:	d877      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x168>
 8002cdc:	2b50      	cmp	r3, #80	; 0x50
 8002cde:	d03c      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0xf6>
 8002ce0:	2b50      	cmp	r3, #80	; 0x50
 8002ce2:	d873      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x168>
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d058      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x136>
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	d86f      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x168>
 8002cec:	2b30      	cmp	r3, #48	; 0x30
 8002cee:	d064      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x156>
 8002cf0:	2b30      	cmp	r3, #48	; 0x30
 8002cf2:	d86b      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x168>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d060      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x156>
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d867      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x168>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d05c      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x156>
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d05a      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d04:	e062      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f000 f95c 	bl	8002fd2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	609a      	str	r2, [r3, #8]
      break;
 8002d32:	e04e      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f000 f945 	bl	8002fd2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d56:	609a      	str	r2, [r3, #8]
      break;
 8002d58:	e03b      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f000 f8bc 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2150      	movs	r1, #80	; 0x50
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f913 	bl	8002f9e <TIM_ITRx_SetConfig>
      break;
 8002d78:	e02b      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f000 f8da 	bl	8002f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2160      	movs	r1, #96	; 0x60
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f903 	bl	8002f9e <TIM_ITRx_SetConfig>
      break;
 8002d98:	e01b      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f000 f89c 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2140      	movs	r1, #64	; 0x40
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f8f3 	bl	8002f9e <TIM_ITRx_SetConfig>
      break;
 8002db8:	e00b      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f000 f8ea 	bl	8002f9e <TIM_ITRx_SetConfig>
        break;
 8002dca:	e002      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a25      	ldr	r2, [pc, #148]	; (8002edc <TIM_Base_SetConfig+0xa8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <TIM_Base_SetConfig+0x28>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0x28>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <TIM_Base_SetConfig+0xac>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <TIM_Base_SetConfig+0xa8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_Base_SetConfig+0x52>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d003      	beq.n	8002e86 <TIM_Base_SetConfig+0x52>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <TIM_Base_SetConfig+0xac>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d108      	bne.n	8002e98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <TIM_Base_SetConfig+0xa8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d103      	bne.n	8002ecc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	615a      	str	r2, [r3, #20]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0201 	bic.w	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 030a 	bic.w	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f023 0210 	bic.w	r2, r3, #16
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	031b      	lsls	r3, r3, #12
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	621a      	str	r2, [r3, #32]
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f043 0307 	orr.w	r3, r3, #7
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	609a      	str	r2, [r3, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b087      	sub	sp, #28
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	609a      	str	r2, [r3, #8]
}
 8003006:	bf00      	nop
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003024:	2302      	movs	r3, #2
 8003026:	e041      	b.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003074:	d004      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10c      	bne.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400

080030c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <__libc_init_array>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	2600      	movs	r6, #0
 80030e8:	4d0c      	ldr	r5, [pc, #48]	; (800311c <__libc_init_array+0x38>)
 80030ea:	4c0d      	ldr	r4, [pc, #52]	; (8003120 <__libc_init_array+0x3c>)
 80030ec:	1b64      	subs	r4, r4, r5
 80030ee:	10a4      	asrs	r4, r4, #2
 80030f0:	42a6      	cmp	r6, r4
 80030f2:	d109      	bne.n	8003108 <__libc_init_array+0x24>
 80030f4:	f000 f822 	bl	800313c <_init>
 80030f8:	2600      	movs	r6, #0
 80030fa:	4d0a      	ldr	r5, [pc, #40]	; (8003124 <__libc_init_array+0x40>)
 80030fc:	4c0a      	ldr	r4, [pc, #40]	; (8003128 <__libc_init_array+0x44>)
 80030fe:	1b64      	subs	r4, r4, r5
 8003100:	10a4      	asrs	r4, r4, #2
 8003102:	42a6      	cmp	r6, r4
 8003104:	d105      	bne.n	8003112 <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	f855 3b04 	ldr.w	r3, [r5], #4
 800310c:	4798      	blx	r3
 800310e:	3601      	adds	r6, #1
 8003110:	e7ee      	b.n	80030f0 <__libc_init_array+0xc>
 8003112:	f855 3b04 	ldr.w	r3, [r5], #4
 8003116:	4798      	blx	r3
 8003118:	3601      	adds	r6, #1
 800311a:	e7f2      	b.n	8003102 <__libc_init_array+0x1e>
 800311c:	08003174 	.word	0x08003174
 8003120:	08003174 	.word	0x08003174
 8003124:	08003174 	.word	0x08003174
 8003128:	08003178 	.word	0x08003178

0800312c <memset>:
 800312c:	4603      	mov	r3, r0
 800312e:	4402      	add	r2, r0
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	f803 1b01 	strb.w	r1, [r3], #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>

0800313c <_init>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	bf00      	nop
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr

08003148 <_fini>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	bf00      	nop
 800314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314e:	bc08      	pop	{r3}
 8003150:	469e      	mov	lr, r3
 8003152:	4770      	bx	lr
